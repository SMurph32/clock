
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000013e2  00001476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800118  00800118  0000148e  2**0
                  ALLOC
  3 .stab         00004884  00000000  00000000  00001490  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013b3  00000000  00000000  00005d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000070c7  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 43 02 	jmp	0x486	; 0x486 <__vector_9>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 94 01 	jmp	0x328	; 0x328 <__vector_16>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_21>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      8c:	07 63       	ori	r16, 0x37	; 55
      8e:	42 36       	cpi	r20, 0x62	; 98
      90:	b7 9b       	sbis	0x16, 7	; 22
      92:	d8 a7       	std	Y+40, r29	; 0x28
      94:	1a 39       	cpi	r17, 0x9A	; 154
      96:	68 56       	subi	r22, 0x68	; 104
      98:	18 ae       	std	Y+56, r1	; 0x38
      9a:	ba ab       	std	Y+50, r27	; 0x32
      9c:	55 8c       	ldd	r5, Z+29	; 0x1d
      9e:	1d 3c       	cpi	r17, 0xCD	; 205
      a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
      a2:	57 63       	ori	r21, 0x37	; 55
      a4:	bd 6d       	ori	r27, 0xDD	; 221
      a6:	ed fd       	.word	0xfded	; ????
      a8:	75 3e       	cpi	r23, 0xE5	; 229
      aa:	f6 17       	cp	r31, r22
      ac:	72 31       	cpi	r23, 0x12	; 18
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <adc_init+0x52>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e1       	ldi	r29, 0x10	; 16
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e2 ee       	ldi	r30, 0xE2	; 226
     122:	f3 e1       	ldi	r31, 0x13	; 19
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a8 31       	cpi	r26, 0x18	; 24
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	11 e0       	ldi	r17, 0x01	; 1
     136:	a8 e1       	ldi	r26, 0x18	; 24
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	ad 33       	cpi	r26, 0x3D	; 61
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 9d 04 	call	0x93a	; 0x93a <main>
     148:	0c 94 ef 09 	jmp	0x13de	; 0x13de <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <spi_init>:
extern uint8_t digit_data[5], segment_data[5], dec_to_7seg[12];

/*****************************************************************************
initialize SPI mode
*****************************************************************************/
void spi_init(void){
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
	DDRB  |=   0xff;          //Turn on SS, MOSI, SCLK
     158:	87 e3       	ldi	r24, 0x37	; 55
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	80 81       	ld	r24, Z
     160:	87 e3       	ldi	r24, 0x37	; 55
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	2f ef       	ldi	r18, 0xFF	; 255
     166:	fc 01       	movw	r30, r24
     168:	20 83       	st	Z, r18
	SPCR  |=   (1 << SPE) | (1 << MSTR);     //set up SPI mode
     16a:	8d e2       	ldi	r24, 0x2D	; 45
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	2d e2       	ldi	r18, 0x2D	; 45
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	f9 01       	movw	r30, r18
     174:	20 81       	ld	r18, Z
     176:	20 65       	ori	r18, 0x50	; 80
     178:	fc 01       	movw	r30, r24
     17a:	20 83       	st	Z, r18
	SPSR  |=   (1 << SPI2X);           // double speed operation
     17c:	8e e2       	ldi	r24, 0x2E	; 46
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	2e e2       	ldi	r18, 0x2E	; 46
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	f9 01       	movw	r30, r18
     186:	20 81       	ld	r18, Z
     188:	21 60       	ori	r18, 0x01	; 1
     18a:	fc 01       	movw	r30, r24
     18c:	20 83       	st	Z, r18
}//spi_init
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	08 95       	ret

00000194 <read_enc>:
/*****************************************************************************
** Data is tranlsated from the knob's current position relative to it's last position
*****************************************************************************/
void read_enc(knob){
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	00 d0       	rcall	.+0      	; 0x19a <read_enc+0x6>
     19a:	00 d0       	rcall	.+0      	; 0x19c <read_enc+0x8>
     19c:	1f 92       	push	r1
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	9b 83       	std	Y+3, r25	; 0x03
     1a4:	8a 83       	std	Y+2, r24	; 0x02

	static uint8_t enc_state1=0, enc_state2=0, enc_state;
	uint8_t temp = (enc/knob)%4;//isolates 2 digits relevant to encoder
     1a6:	80 91 24 01 	lds	r24, 0x0124
     1aa:	88 2f       	mov	r24, r24
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	2a 81       	ldd	r18, Y+2	; 0x02
     1b0:	3b 81       	ldd	r19, Y+3	; 0x03
     1b2:	b9 01       	movw	r22, r18
     1b4:	0e 94 4c 06 	call	0xc98	; 0xc98 <__divmodhi4>
     1b8:	cb 01       	movw	r24, r22
     1ba:	83 70       	andi	r24, 0x03	; 3
     1bc:	90 78       	andi	r25, 0x80	; 128
     1be:	99 23       	and	r25, r25
     1c0:	24 f4       	brge	.+8      	; 0x1ca <read_enc+0x36>
     1c2:	01 97       	sbiw	r24, 0x01	; 1
     1c4:	8c 6f       	ori	r24, 0xFC	; 252
     1c6:	9f 6f       	ori	r25, 0xFF	; 255
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	89 83       	std	Y+1, r24	; 0x01

	if(knob == KNOB1) enc_state = enc_state1;
     1cc:	8a 81       	ldd	r24, Y+2	; 0x02
     1ce:	9b 81       	ldd	r25, Y+3	; 0x03
     1d0:	84 30       	cpi	r24, 0x04	; 4
     1d2:	91 05       	cpc	r25, r1
     1d4:	21 f4       	brne	.+8      	; 0x1de <read_enc+0x4a>
     1d6:	80 91 25 01 	lds	r24, 0x0125
     1da:	80 93 26 01 	sts	0x0126, r24
	if(knob == KNOB2) enc_state = enc_state2;
     1de:	8a 81       	ldd	r24, Y+2	; 0x02
     1e0:	9b 81       	ldd	r25, Y+3	; 0x03
     1e2:	81 30       	cpi	r24, 0x01	; 1
     1e4:	91 05       	cpc	r25, r1
     1e6:	21 f4       	brne	.+8      	; 0x1f0 <read_enc+0x5c>
     1e8:	80 91 27 01 	lds	r24, 0x0127
     1ec:	80 93 26 01 	sts	0x0126, r24

	enc_state=enc_state%4;
     1f0:	80 91 26 01 	lds	r24, 0x0126
     1f4:	83 70       	andi	r24, 0x03	; 3
     1f6:	80 93 26 01 	sts	0x0126, r24

	switch(enc_state){
     1fa:	80 91 26 01 	lds	r24, 0x0126
     1fe:	88 2f       	mov	r24, r24
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	81 30       	cpi	r24, 0x01	; 1
     204:	91 05       	cpc	r25, r1
     206:	01 f1       	breq	.+64     	; 0x248 <read_enc+0xb4>
     208:	82 30       	cpi	r24, 0x02	; 2
     20a:	91 05       	cpc	r25, r1
     20c:	1c f4       	brge	.+6      	; 0x214 <read_enc+0x80>
     20e:	00 97       	sbiw	r24, 0x00	; 0
     210:	49 f0       	breq	.+18     	; 0x224 <read_enc+0x90>
     212:	70 c0       	rjmp	.+224    	; 0x2f4 <read_enc+0x160>
     214:	82 30       	cpi	r24, 0x02	; 2
     216:	91 05       	cpc	r25, r1
     218:	d1 f1       	breq	.+116    	; 0x28e <read_enc+0xfa>
     21a:	83 30       	cpi	r24, 0x03	; 3
     21c:	91 05       	cpc	r25, r1
     21e:	09 f4       	brne	.+2      	; 0x222 <read_enc+0x8e>
     220:	48 c0       	rjmp	.+144    	; 0x2b2 <read_enc+0x11e>
     222:	68 c0       	rjmp	.+208    	; 0x2f4 <read_enc+0x160>
		case 0://neutral position
			if (temp == 1) enc_state++; //indicating we clicked encoder right from neutral position
     224:	89 81       	ldd	r24, Y+1	; 0x01
     226:	81 30       	cpi	r24, 0x01	; 1
     228:	29 f4       	brne	.+10     	; 0x234 <read_enc+0xa0>
     22a:	80 91 26 01 	lds	r24, 0x0126
     22e:	8f 5f       	subi	r24, 0xFF	; 255
     230:	80 93 26 01 	sts	0x0126, r24
			if (temp == 2) enc_state --;//indicating we clicked encoder left from neutral position
     234:	89 81       	ldd	r24, Y+1	; 0x01
     236:	82 30       	cpi	r24, 0x02	; 2
     238:	31 f4       	brne	.+12     	; 0x246 <read_enc+0xb2>
     23a:	80 91 26 01 	lds	r24, 0x0126
     23e:	81 50       	subi	r24, 0x01	; 1
     240:	80 93 26 01 	sts	0x0126, r24
			break;
     244:	57 c0       	rjmp	.+174    	; 0x2f4 <read_enc+0x160>
     246:	56 c0       	rjmp	.+172    	; 0x2f4 <read_enc+0x160>
		case 1://one click right, three clicks left
			if(temp == 0) enc_state++;
     248:	89 81       	ldd	r24, Y+1	; 0x01
     24a:	88 23       	and	r24, r24
     24c:	29 f4       	brne	.+10     	; 0x258 <read_enc+0xc4>
     24e:	80 91 26 01 	lds	r24, 0x0126
     252:	8f 5f       	subi	r24, 0xFF	; 255
     254:	80 93 26 01 	sts	0x0126, r24
			if(temp == 3){
     258:	89 81       	ldd	r24, Y+1	; 0x01
     25a:	83 30       	cpi	r24, 0x03	; 3
     25c:	b9 f4       	brne	.+46     	; 0x28c <read_enc+0xf8>
				enc_state++;
     25e:	80 91 26 01 	lds	r24, 0x0126
     262:	8f 5f       	subi	r24, 0xFF	; 255
     264:	80 93 26 01 	sts	0x0126, r24
				count = (count - count_add)%1024;			
     268:	20 91 22 01 	lds	r18, 0x0122
     26c:	30 91 23 01 	lds	r19, 0x0123
     270:	80 91 16 01 	lds	r24, 0x0116
     274:	90 91 17 01 	lds	r25, 0x0117
     278:	a9 01       	movw	r20, r18
     27a:	48 1b       	sub	r20, r24
     27c:	59 0b       	sbc	r21, r25
     27e:	ca 01       	movw	r24, r20
     280:	93 70       	andi	r25, 0x03	; 3
     282:	90 93 23 01 	sts	0x0123, r25
     286:	80 93 22 01 	sts	0x0122, r24
			}
			break;
     28a:	34 c0       	rjmp	.+104    	; 0x2f4 <read_enc+0x160>
     28c:	33 c0       	rjmp	.+102    	; 0x2f4 <read_enc+0x160>
		case 2://two clicks right, two click left
			if(temp == 2) enc_state++;
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	82 30       	cpi	r24, 0x02	; 2
     292:	29 f4       	brne	.+10     	; 0x29e <read_enc+0x10a>
     294:	80 91 26 01 	lds	r24, 0x0126
     298:	8f 5f       	subi	r24, 0xFF	; 255
     29a:	80 93 26 01 	sts	0x0126, r24
			if(temp == 1) enc_state--;
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	81 30       	cpi	r24, 0x01	; 1
     2a2:	31 f4       	brne	.+12     	; 0x2b0 <read_enc+0x11c>
     2a4:	80 91 26 01 	lds	r24, 0x0126
     2a8:	81 50       	subi	r24, 0x01	; 1
     2aa:	80 93 26 01 	sts	0x0126, r24
			break;
     2ae:	22 c0       	rjmp	.+68     	; 0x2f4 <read_enc+0x160>
     2b0:	21 c0       	rjmp	.+66     	; 0x2f4 <read_enc+0x160>
		case 3://three clicks right, one click left
			if(temp == 3){
     2b2:	89 81       	ldd	r24, Y+1	; 0x01
     2b4:	83 30       	cpi	r24, 0x03	; 3
     2b6:	a1 f4       	brne	.+40     	; 0x2e0 <read_enc+0x14c>
				enc_state++;
     2b8:	80 91 26 01 	lds	r24, 0x0126
     2bc:	8f 5f       	subi	r24, 0xFF	; 255
     2be:	80 93 26 01 	sts	0x0126, r24
				count = (count + count_add)%1024;		
     2c2:	20 91 22 01 	lds	r18, 0x0122
     2c6:	30 91 23 01 	lds	r19, 0x0123
     2ca:	80 91 16 01 	lds	r24, 0x0116
     2ce:	90 91 17 01 	lds	r25, 0x0117
     2d2:	82 0f       	add	r24, r18
     2d4:	93 1f       	adc	r25, r19
     2d6:	93 70       	andi	r25, 0x03	; 3
     2d8:	90 93 23 01 	sts	0x0123, r25
     2dc:	80 93 22 01 	sts	0x0122, r24
			}
			if(temp == 0) enc_state--;
     2e0:	89 81       	ldd	r24, Y+1	; 0x01
     2e2:	88 23       	and	r24, r24
     2e4:	31 f4       	brne	.+12     	; 0x2f2 <read_enc+0x15e>
     2e6:	80 91 26 01 	lds	r24, 0x0126
     2ea:	81 50       	subi	r24, 0x01	; 1
     2ec:	80 93 26 01 	sts	0x0126, r24
			break;
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <read_enc+0x15e>
     2f2:	00 00       	nop

	}
	if(knob == KNOB1) enc_state1 = enc_state;
     2f4:	8a 81       	ldd	r24, Y+2	; 0x02
     2f6:	9b 81       	ldd	r25, Y+3	; 0x03
     2f8:	84 30       	cpi	r24, 0x04	; 4
     2fa:	91 05       	cpc	r25, r1
     2fc:	21 f4       	brne	.+8      	; 0x306 <read_enc+0x172>
     2fe:	80 91 26 01 	lds	r24, 0x0126
     302:	80 93 25 01 	sts	0x0125, r24
	if(knob == KNOB2) enc_state2 = enc_state;
     306:	8a 81       	ldd	r24, Y+2	; 0x02
     308:	9b 81       	ldd	r25, Y+3	; 0x03
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	91 05       	cpc	r25, r1
     30e:	21 f4       	brne	.+8      	; 0x318 <read_enc+0x184>
     310:	80 91 26 01 	lds	r24, 0x0126
     314:	80 93 27 01 	sts	0x0127, r24
}
     318:	0f 90       	pop	r0
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <__vector_16>:

/*****************************************************************************
interupt service routine for timercounter0. Used to scan for button presses and data from the ecoder. I have added functions create a delay between presing a button
and having the controller take action to prevent action from happening when trying to press two buttons at once.  
*****************************************************************************/
ISR(TIMER0_OVF_vect){
     328:	1f 92       	push	r1
     32a:	0f 92       	push	r0
     32c:	00 90 5f 00 	lds	r0, 0x005F
     330:	0f 92       	push	r0
     332:	11 24       	eor	r1, r1
     334:	00 90 5b 00 	lds	r0, 0x005B
     338:	0f 92       	push	r0
     33a:	2f 93       	push	r18
     33c:	3f 93       	push	r19
     33e:	4f 93       	push	r20
     340:	5f 93       	push	r21
     342:	6f 93       	push	r22
     344:	7f 93       	push	r23
     346:	8f 93       	push	r24
     348:	9f 93       	push	r25
     34a:	af 93       	push	r26
     34c:	bf 93       	push	r27
     34e:	ef 93       	push	r30
     350:	ff 93       	push	r31
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
	static uint16_t count_7ms = 0;
	static uint8_t  button_delay=0, button_release_delay=0;       	//delay counters to create a gap between pressing or releaseing a button and 
									//and controller taking input from buttons
	count_7ms++;
     35a:	80 91 28 01 	lds	r24, 0x0128
     35e:	90 91 29 01 	lds	r25, 0x0129
     362:	01 96       	adiw	r24, 0x01	; 1
     364:	90 93 29 01 	sts	0x0129, r25
     368:	80 93 28 01 	sts	0x0128, r24
	PORTA = 0xff;//make PORTA an input port with pullups 
     36c:	8b e3       	ldi	r24, 0x3B	; 59
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	2f ef       	ldi	r18, 0xFF	; 255
     372:	fc 01       	movw	r30, r24
     374:	20 83       	st	Z, r18
	DDRA = 0x00;
     376:	8a e3       	ldi	r24, 0x3A	; 58
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	fc 01       	movw	r30, r24
     37c:	10 82       	st	Z, r1

	PORTB |= 0b01110000;//enable tristate buffer for pushbutton switches
     37e:	88 e3       	ldi	r24, 0x38	; 56
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	28 e3       	ldi	r18, 0x38	; 56
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	f9 01       	movw	r30, r18
     388:	20 81       	ld	r18, Z
     38a:	20 67       	ori	r18, 0x70	; 112
     38c:	fc 01       	movw	r30, r24
     38e:	20 83       	st	Z, r18

	DebounceSwitch();//detect button state
     390:	0e 94 11 03 	call	0x622	; 0x622 <DebounceSwitch>

	if(debounced_state && button==-1){				//if button is pressed and was not pressed on last check
     394:	80 91 18 01 	lds	r24, 0x0118
     398:	88 23       	and	r24, r24
     39a:	09 f1       	breq	.+66     	; 0x3de <__vector_16+0xb6>
     39c:	80 91 1e 01 	lds	r24, 0x011E
     3a0:	90 91 1f 01 	lds	r25, 0x011F
     3a4:	8f 3f       	cpi	r24, 0xFF	; 255
     3a6:	ff ef       	ldi	r31, 0xFF	; 255
     3a8:	9f 07       	cpc	r25, r31
     3aa:	c9 f4       	brne	.+50     	; 0x3de <__vector_16+0xb6>
		button_delay++;						//wait before taking action. This Allows me to create two button presses
     3ac:	80 91 2a 01 	lds	r24, 0x012A
     3b0:	8f 5f       	subi	r24, 0xFF	; 255
     3b2:	80 93 2a 01 	sts	0x012A, r24
									//that behave differently than one button. No action taken before user can press
									//second button down.

		if ((button_delay > 16) && (button_release_delay > 32)){
     3b6:	80 91 2a 01 	lds	r24, 0x012A
     3ba:	81 31       	cpi	r24, 0x11	; 17
     3bc:	78 f0       	brcs	.+30     	; 0x3dc <__vector_16+0xb4>
     3be:	80 91 2b 01 	lds	r24, 0x012B
     3c2:	81 32       	cpi	r24, 0x21	; 33
     3c4:	58 f0       	brcs	.+22     	; 0x3dc <__vector_16+0xb4>
			button = debounced_state;
     3c6:	80 91 18 01 	lds	r24, 0x0118
     3ca:	88 2f       	mov	r24, r24
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	90 93 1f 01 	sts	0x011F, r25
     3d2:	80 93 1e 01 	sts	0x011E, r24
			button_release_delay=0;			//set release to 0 and it will start counting once button is released
     3d6:	10 92 2b 01 	sts	0x012B, r1
	if(debounced_state && button==-1){				//if button is pressed and was not pressed on last check
		button_delay++;						//wait before taking action. This Allows me to create two button presses
									//that behave differently than one button. No action taken before user can press
									//second button down.

		if ((button_delay > 16) && (button_release_delay > 32)){
     3da:	08 c0       	rjmp	.+16     	; 0x3ec <__vector_16+0xc4>
     3dc:	07 c0       	rjmp	.+14     	; 0x3ec <__vector_16+0xc4>
			button = debounced_state;
			button_release_delay=0;			//set release to 0 and it will start counting once button is released
		}
	}else{
		button_release_delay++;					//count time since button was released
     3de:	80 91 2b 01 	lds	r24, 0x012B
     3e2:	8f 5f       	subi	r24, 0xFF	; 255
     3e4:	80 93 2b 01 	sts	0x012B, r24
		button_delay=0;						//button has not been pressed
     3e8:	10 92 2a 01 	sts	0x012A, r1
	//This increments count approximately every 1 second. 
	//	if ((count_7ms % 512)==0) //?? interrupts equals one half second 
	//		count = (count + count_add)%1023;//bound the count to 0 - 1023


	SPDR = mode;//display current mode on bar graph
     3ec:	8f e2       	ldi	r24, 0x2F	; 47
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	20 91 19 01 	lds	r18, 0x0119
     3f4:	fc 01       	movw	r30, r24
     3f6:	20 83       	st	Z, r18


	while(bit_is_clear(SPSR, SPIF));	//wait until mode is sent to bar graph
     3f8:	00 00       	nop
     3fa:	8e e2       	ldi	r24, 0x2E	; 46
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	fc 01       	movw	r30, r24
     400:	80 81       	ld	r24, Z
     402:	88 23       	and	r24, r24
     404:	d4 f7       	brge	.-12     	; 0x3fa <__vector_16+0xd2>
	PORTB |=  0x01;        			//strobe output data reg in HC595 - rising edge
     406:	88 e3       	ldi	r24, 0x38	; 56
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	28 e3       	ldi	r18, 0x38	; 56
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	f9 01       	movw	r30, r18
     410:	20 81       	ld	r18, Z
     412:	21 60       	ori	r18, 0x01	; 1
     414:	fc 01       	movw	r30, r24
     416:	20 83       	st	Z, r18
	PORTB &=  0xfe;        			//falling edge
     418:	88 e3       	ldi	r24, 0x38	; 56
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	28 e3       	ldi	r18, 0x38	; 56
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	f9 01       	movw	r30, r18
     422:	20 81       	ld	r18, Z
     424:	2e 7f       	andi	r18, 0xFE	; 254
     426:	fc 01       	movw	r30, r24
     428:	20 83       	st	Z, r18

	PORTE = 0x00;				//record encoder data
     42a:	83 e2       	ldi	r24, 0x23	; 35
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	fc 01       	movw	r30, r24
     430:	10 82       	st	Z, r1
	PORTE = 0x40;				//protect encoder data
     432:	83 e2       	ldi	r24, 0x23	; 35
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	20 e4       	ldi	r18, 0x40	; 64
     438:	fc 01       	movw	r30, r24
     43a:	20 83       	st	Z, r18
	enc = SPDR;				//read encoder data
     43c:	8f e2       	ldi	r24, 0x2F	; 47
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	fc 01       	movw	r30, r24
     442:	80 81       	ld	r24, Z
     444:	80 93 24 01 	sts	0x0124, r24

	read_enc(KNOB1);				//interpreate encoder data and increment/decrement count
     448:	84 e0       	ldi	r24, 0x04	; 4
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 ca 00 	call	0x194	; 0x194 <read_enc>
	read_enc(KNOB2);				//interpreate encoder data and increment/decrement count
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 ca 00 	call	0x194	; 0x194 <read_enc>
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	ff 91       	pop	r31
     45e:	ef 91       	pop	r30
     460:	bf 91       	pop	r27
     462:	af 91       	pop	r26
     464:	9f 91       	pop	r25
     466:	8f 91       	pop	r24
     468:	7f 91       	pop	r23
     46a:	6f 91       	pop	r22
     46c:	5f 91       	pop	r21
     46e:	4f 91       	pop	r20
     470:	3f 91       	pop	r19
     472:	2f 91       	pop	r18
     474:	0f 90       	pop	r0
     476:	00 92 5b 00 	sts	0x005B, r0
     47a:	0f 90       	pop	r0
     47c:	00 92 5f 00 	sts	0x005F, r0
     480:	0f 90       	pop	r0
     482:	1f 90       	pop	r1
     484:	18 95       	reti

00000486 <__vector_9>:
/*****************************************************************************
ISR for timer/counter2: set up in fast PWM mode and toggles PE1 to create the alarm signal 
*****************************************************************************/
ISR(TIMER2_COMP_vect){
     486:	1f 92       	push	r1
     488:	0f 92       	push	r0
     48a:	00 90 5f 00 	lds	r0, 0x005F
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	00 90 5b 00 	lds	r0, 0x005B
     496:	0f 92       	push	r0
     498:	2f 93       	push	r18
     49a:	3f 93       	push	r19
     49c:	8f 93       	push	r24
     49e:	9f 93       	push	r25
     4a0:	ef 93       	push	r30
     4a2:	ff 93       	push	r31
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
	PORTE ^= (1 << 0);
     4ac:	83 e2       	ldi	r24, 0x23	; 35
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	23 e2       	ldi	r18, 0x23	; 35
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	f9 01       	movw	r30, r18
     4b6:	30 81       	ld	r19, Z
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	23 27       	eor	r18, r19
     4bc:	fc 01       	movw	r30, r24
     4be:	20 83       	st	Z, r18
}
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	ff 91       	pop	r31
     4c6:	ef 91       	pop	r30
     4c8:	9f 91       	pop	r25
     4ca:	8f 91       	pop	r24
     4cc:	3f 91       	pop	r19
     4ce:	2f 91       	pop	r18
     4d0:	0f 90       	pop	r0
     4d2:	00 92 5b 00 	sts	0x005B, r0
     4d6:	0f 90       	pop	r0
     4d8:	00 92 5f 00 	sts	0x005F, r0
     4dc:	0f 90       	pop	r0
     4de:	1f 90       	pop	r1
     4e0:	18 95       	reti

000004e2 <__vector_21>:

/*****************************************************************************
ISR for the ADC. Whenever the adc signals a completion it stores the upper 8 bits
*****************************************************************************/
ISR(ADC_vect){
     4e2:	1f 92       	push	r1
     4e4:	0f 92       	push	r0
     4e6:	00 90 5f 00 	lds	r0, 0x005F
     4ea:	0f 92       	push	r0
     4ec:	11 24       	eor	r1, r1
     4ee:	00 90 5b 00 	lds	r0, 0x005B
     4f2:	0f 92       	push	r0
     4f4:	2f 93       	push	r18
     4f6:	3f 93       	push	r19
     4f8:	8f 93       	push	r24
     4fa:	9f 93       	push	r25
     4fc:	ef 93       	push	r30
     4fe:	ff 93       	push	r31
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62


	adc_data = ADCH;
     508:	85 e2       	ldi	r24, 0x25	; 37
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	fc 01       	movw	r30, r24
     50e:	80 81       	ld	r24, Z
     510:	88 2f       	mov	r24, r24
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	90 93 39 01 	sts	0x0139, r25
     518:	80 93 38 01 	sts	0x0138, r24
	OCR2  = adc_data;
     51c:	83 e4       	ldi	r24, 0x43	; 67
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	20 91 38 01 	lds	r18, 0x0138
     524:	30 91 39 01 	lds	r19, 0x0139
     528:	fc 01       	movw	r30, r24
     52a:	20 83       	st	Z, r18

}
     52c:	df 91       	pop	r29
     52e:	cf 91       	pop	r28
     530:	ff 91       	pop	r31
     532:	ef 91       	pop	r30
     534:	9f 91       	pop	r25
     536:	8f 91       	pop	r24
     538:	3f 91       	pop	r19
     53a:	2f 91       	pop	r18
     53c:	0f 90       	pop	r0
     53e:	00 92 5b 00 	sts	0x005B, r0
     542:	0f 90       	pop	r0
     544:	00 92 5f 00 	sts	0x005F, r0
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <int0_init>:

/*****************************************************************************
initialize timer/counter0 to run in normal mode. Scans buttons and enconders and controls the clock display value 
*****************************************************************************/
void int0_init(){
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1 << TCNT0);			//enable interrupts
     556:	87 e5       	ldi	r24, 0x57	; 87
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	27 e5       	ldi	r18, 0x57	; 87
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	f9 01       	movw	r30, r18
     560:	20 81       	ld	r18, Z
     562:	62 2f       	mov	r22, r18
     564:	22 e5       	ldi	r18, 0x52	; 82
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	f9 01       	movw	r30, r18
     56a:	20 81       	ld	r18, Z
     56c:	42 2f       	mov	r20, r18
     56e:	50 e0       	ldi	r21, 0x00	; 0
     570:	21 e0       	ldi	r18, 0x01	; 1
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	04 2e       	mov	r0, r20
     576:	02 c0       	rjmp	.+4      	; 0x57c <int0_init+0x2e>
     578:	22 0f       	add	r18, r18
     57a:	33 1f       	adc	r19, r19
     57c:	0a 94       	dec	r0
     57e:	e2 f7       	brpl	.-8      	; 0x578 <int0_init+0x2a>
     580:	26 2b       	or	r18, r22
     582:	fc 01       	movw	r30, r24
     584:	20 83       	st	Z, r18
	TCCR0 |= (1 << CS02) | (1 << CS00); 	//normal mode, prescale by 128
     586:	83 e5       	ldi	r24, 0x53	; 83
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	23 e5       	ldi	r18, 0x53	; 83
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	f9 01       	movw	r30, r18
     590:	20 81       	ld	r18, Z
     592:	25 60       	ori	r18, 0x05	; 5
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <int2_init>:

/*****************************************************************************
initialize timer/counter2 to normal mode. Creates the alarm audio signal
*****************************************************************************/
void int2_init(){
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	cd b7       	in	r28, 0x3d	; 61
     5a4:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1 << OCIE2);			//enable interrupts:
     5a6:	87 e5       	ldi	r24, 0x57	; 87
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	27 e5       	ldi	r18, 0x57	; 87
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	f9 01       	movw	r30, r18
     5b0:	20 81       	ld	r18, Z
     5b2:	20 68       	ori	r18, 0x80	; 128
     5b4:	fc 01       	movw	r30, r24
     5b6:	20 83       	st	Z, r18
	TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (1 << CS21); 	//CTC mode, prescale by 128
     5b8:	85 e4       	ldi	r24, 0x45	; 69
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	25 e4       	ldi	r18, 0x45	; 69
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	f9 01       	movw	r30, r18
     5c2:	20 81       	ld	r18, Z
     5c4:	2a 66       	ori	r18, 0x6A	; 106
     5c6:	fc 01       	movw	r30, r24
     5c8:	20 83       	st	Z, r18
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <int3_init>:

/*****************************************************************************
initialize timer/counter3 to fast pwm mode. Create a duty cycle to control speaker volume
*****************************************************************************/
void int3_init(){
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	cd b7       	in	r28, 0x3d	; 61
     5d6:	de b7       	in	r29, 0x3e	; 62

	TCCR3A |= (1<<COM3A1) | (1<<COM3A0) | (1 << WGM30);//fast pwm, set on match, clear@bottom, 
     5d8:	8b e8       	ldi	r24, 0x8B	; 139
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	2b e8       	ldi	r18, 0x8B	; 139
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	f9 01       	movw	r30, r18
     5e2:	20 81       	ld	r18, Z
     5e4:	21 6c       	ori	r18, 0xC1	; 193
     5e6:	fc 01       	movw	r30, r24
     5e8:	20 83       	st	Z, r18
	TCCR3B |= (1<< WGM32) | (1<<CS30);// | (1 << CS31);//use ICR1 as source for TOP, use clk/1
     5ea:	8a e8       	ldi	r24, 0x8A	; 138
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	2a e8       	ldi	r18, 0x8A	; 138
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	f9 01       	movw	r30, r18
     5f4:	20 81       	ld	r18, Z
     5f6:	29 60       	ori	r18, 0x09	; 9
     5f8:	fc 01       	movw	r30, r24
     5fa:	20 83       	st	Z, r18
	TCCR3C= 0x00;                            //no forced compare 
     5fc:	8c e8       	ldi	r24, 0x8C	; 140
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	fc 01       	movw	r30, r24
     602:	10 82       	st	Z, r1
	ETIMSK = (1<<OCIE3A);                         //enable timer 3 interrupt on TOV
     604:	8d e7       	ldi	r24, 0x7D	; 125
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	20 e1       	ldi	r18, 0x10	; 16
     60a:	fc 01       	movw	r30, r24
     60c:	20 83       	st	Z, r18
	
	OCR3A = 0x00a0;
     60e:	86 e8       	ldi	r24, 0x86	; 134
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	20 ea       	ldi	r18, 0xA0	; 160
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	fc 01       	movw	r30, r24
     618:	31 83       	std	Z+1, r19	; 0x01
     61a:	20 83       	st	Z, r18
	
}
     61c:	df 91       	pop	r29
     61e:	cf 91       	pop	r28
     620:	08 95       	ret

00000622 <DebounceSwitch>:
/*****************************************************************************
debouncing switch checks for 12 consecutive signals from same button before returning 1
*****************************************************************************/
void DebounceSwitch(){
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	00 d0       	rcall	.+0      	; 0x628 <DebounceSwitch+0x6>
     628:	cd b7       	in	r28, 0x3d	; 61
     62a:	de b7       	in	r29, 0x3e	; 62
	uint8_t i,j;
	state[check_index++%MAX_CHECKS]=0xff - PINA;
     62c:	80 91 3a 01 	lds	r24, 0x013A
     630:	28 2f       	mov	r18, r24
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	82 0f       	add	r24, r18
     636:	80 93 3a 01 	sts	0x013A, r24
     63a:	8b ea       	ldi	r24, 0xAB	; 171
     63c:	28 9f       	mul	r18, r24
     63e:	81 2d       	mov	r24, r1
     640:	11 24       	eor	r1, r1
     642:	98 2f       	mov	r25, r24
     644:	96 95       	lsr	r25
     646:	96 95       	lsr	r25
     648:	96 95       	lsr	r25
     64a:	89 2f       	mov	r24, r25
     64c:	88 0f       	add	r24, r24
     64e:	89 0f       	add	r24, r25
     650:	88 0f       	add	r24, r24
     652:	88 0f       	add	r24, r24
     654:	92 2f       	mov	r25, r18
     656:	98 1b       	sub	r25, r24
     658:	89 2f       	mov	r24, r25
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	29 e3       	ldi	r18, 0x39	; 57
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	f9 01       	movw	r30, r18
     662:	20 81       	ld	r18, Z
     664:	20 95       	com	r18
     666:	84 5d       	subi	r24, 0xD4	; 212
     668:	9e 4f       	sbci	r25, 0xFE	; 254
     66a:	fc 01       	movw	r30, r24
     66c:	20 83       	st	Z, r18
	j=0xff;
     66e:	8f ef       	ldi	r24, 0xFF	; 255
     670:	8a 83       	std	Y+2, r24	; 0x02
	for(i=0; i<MAX_CHECKS-1;i++)j=j & state[i];
     672:	19 82       	std	Y+1, r1	; 0x01
     674:	0d c0       	rjmp	.+26     	; 0x690 <DebounceSwitch+0x6e>
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	88 2f       	mov	r24, r24
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	84 5d       	subi	r24, 0xD4	; 212
     67e:	9e 4f       	sbci	r25, 0xFE	; 254
     680:	fc 01       	movw	r30, r24
     682:	80 81       	ld	r24, Z
     684:	9a 81       	ldd	r25, Y+2	; 0x02
     686:	89 23       	and	r24, r25
     688:	8a 83       	std	Y+2, r24	; 0x02
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	8f 5f       	subi	r24, 0xFF	; 255
     68e:	89 83       	std	Y+1, r24	; 0x01
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	8b 30       	cpi	r24, 0x0B	; 11
     694:	80 f3       	brcs	.-32     	; 0x676 <DebounceSwitch+0x54>
	debounced_state = j;
     696:	8a 81       	ldd	r24, Y+2	; 0x02
     698:	80 93 18 01 	sts	0x0118, r24
}
     69c:	0f 90       	pop	r0
     69e:	0f 90       	pop	r0
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	08 95       	ret

000006a6 <segsum>:


/*****************************************************************************
returns the display to segmentn_data in decimal
*****************************************************************************/
void segsum(uint16_t sum) {
     6a6:	cf 92       	push	r12
     6a8:	df 92       	push	r13
     6aa:	ef 92       	push	r14
     6ac:	ff 92       	push	r15
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	2e 97       	sbiw	r28, 0x0e	; 14
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
     6c2:	9a 87       	std	Y+10, r25	; 0x0a
     6c4:	89 87       	std	Y+9, r24	; 0x09
	int num_d=0, i;
     6c6:	1a 82       	std	Y+2, r1	; 0x02
     6c8:	19 82       	std	Y+1, r1	; 0x01
	int temp, temp2;
	temp = sum;
     6ca:	89 85       	ldd	r24, Y+9	; 0x09
     6cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ce:	9e 83       	std	Y+6, r25	; 0x06
     6d0:	8d 83       	std	Y+5, r24	; 0x05
	while(sum >= (pow(10, num_d))) {num_d++;}//record number of digits
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <segsum+0x38>
     6d4:	89 81       	ldd	r24, Y+1	; 0x01
     6d6:	9a 81       	ldd	r25, Y+2	; 0x02
     6d8:	01 96       	adiw	r24, 0x01	; 1
     6da:	9a 83       	std	Y+2, r25	; 0x02
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	89 85       	ldd	r24, Y+9	; 0x09
     6e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6e2:	cc 01       	movw	r24, r24
     6e4:	a0 e0       	ldi	r26, 0x00	; 0
     6e6:	b0 e0       	ldi	r27, 0x00	; 0
     6e8:	bc 01       	movw	r22, r24
     6ea:	cd 01       	movw	r24, r26
     6ec:	0e 94 0c 07 	call	0xe18	; 0xe18 <__floatunsisf>
     6f0:	6b 01       	movw	r12, r22
     6f2:	7c 01       	movw	r14, r24
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	9a 81       	ldd	r25, Y+2	; 0x02
     6f8:	aa 27       	eor	r26, r26
     6fa:	97 fd       	sbrc	r25, 7
     6fc:	a0 95       	com	r26
     6fe:	ba 2f       	mov	r27, r26
     700:	bc 01       	movw	r22, r24
     702:	cd 01       	movw	r24, r26
     704:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__floatsisf>
     708:	dc 01       	movw	r26, r24
     70a:	cb 01       	movw	r24, r22
     70c:	9c 01       	movw	r18, r24
     70e:	ad 01       	movw	r20, r26
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	80 e2       	ldi	r24, 0x20	; 32
     716:	91 e4       	ldi	r25, 0x41	; 65
     718:	0e 94 25 08 	call	0x104a	; 0x104a <pow>
     71c:	dc 01       	movw	r26, r24
     71e:	cb 01       	movw	r24, r22
     720:	9c 01       	movw	r18, r24
     722:	ad 01       	movw	r20, r26
     724:	c7 01       	movw	r24, r14
     726:	b6 01       	movw	r22, r12
     728:	0e 94 be 07 	call	0xf7c	; 0xf7c <__gesf2>
     72c:	88 23       	and	r24, r24
     72e:	94 f6       	brge	.-92     	; 0x6d4 <segsum+0x2e>



	//seg segment_data array correctly
	temp = sum/1000;
     730:	89 85       	ldd	r24, Y+9	; 0x09
     732:	9a 85       	ldd	r25, Y+10	; 0x0a
     734:	96 95       	lsr	r25
     736:	87 95       	ror	r24
     738:	96 95       	lsr	r25
     73a:	87 95       	ror	r24
     73c:	96 95       	lsr	r25
     73e:	87 95       	ror	r24
     740:	9c 01       	movw	r18, r24
     742:	a5 ec       	ldi	r26, 0xC5	; 197
     744:	b0 e2       	ldi	r27, 0x20	; 32
     746:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__umulhisi3>
     74a:	92 95       	swap	r25
     74c:	82 95       	swap	r24
     74e:	8f 70       	andi	r24, 0x0F	; 15
     750:	89 27       	eor	r24, r25
     752:	9f 70       	andi	r25, 0x0F	; 15
     754:	89 27       	eor	r24, r25
     756:	9e 83       	std	Y+6, r25	; 0x06
     758:	8d 83       	std	Y+5, r24	; 0x05
	temp2=temp*1000;
     75a:	4d 81       	ldd	r20, Y+5	; 0x05
     75c:	5e 81       	ldd	r21, Y+6	; 0x06
     75e:	28 ee       	ldi	r18, 0xE8	; 232
     760:	33 e0       	ldi	r19, 0x03	; 3
     762:	42 9f       	mul	r20, r18
     764:	c0 01       	movw	r24, r0
     766:	43 9f       	mul	r20, r19
     768:	90 0d       	add	r25, r0
     76a:	52 9f       	mul	r21, r18
     76c:	90 0d       	add	r25, r0
     76e:	11 24       	eor	r1, r1
     770:	98 87       	std	Y+8, r25	; 0x08
     772:	8f 83       	std	Y+7, r24	; 0x07
	segment_data[4] = dec_to_7seg[temp];
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	9e 81       	ldd	r25, Y+6	; 0x06
     778:	86 5f       	subi	r24, 0xF6	; 246
     77a:	9e 4f       	sbci	r25, 0xFE	; 254
     77c:	fc 01       	movw	r30, r24
     77e:	80 81       	ld	r24, Z
     780:	80 93 09 01 	sts	0x0109, r24
	temp = sum - temp2;
     784:	8f 81       	ldd	r24, Y+7	; 0x07
     786:	98 85       	ldd	r25, Y+8	; 0x08
     788:	29 85       	ldd	r18, Y+9	; 0x09
     78a:	3a 85       	ldd	r19, Y+10	; 0x0a
     78c:	a9 01       	movw	r20, r18
     78e:	48 1b       	sub	r20, r24
     790:	59 0b       	sbc	r21, r25
     792:	ca 01       	movw	r24, r20
     794:	9e 83       	std	Y+6, r25	; 0x06
     796:	8d 83       	std	Y+5, r24	; 0x05
	temp = temp/100;
     798:	8d 81       	ldd	r24, Y+5	; 0x05
     79a:	9e 81       	ldd	r25, Y+6	; 0x06
     79c:	24 e6       	ldi	r18, 0x64	; 100
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	b9 01       	movw	r22, r18
     7a2:	0e 94 4c 06 	call	0xc98	; 0xc98 <__divmodhi4>
     7a6:	cb 01       	movw	r24, r22
     7a8:	9e 83       	std	Y+6, r25	; 0x06
     7aa:	8d 83       	std	Y+5, r24	; 0x05
	temp2+=temp*100;
     7ac:	2d 81       	ldd	r18, Y+5	; 0x05
     7ae:	3e 81       	ldd	r19, Y+6	; 0x06
     7b0:	44 e6       	ldi	r20, 0x64	; 100
     7b2:	42 9f       	mul	r20, r18
     7b4:	c0 01       	movw	r24, r0
     7b6:	43 9f       	mul	r20, r19
     7b8:	90 0d       	add	r25, r0
     7ba:	11 24       	eor	r1, r1
     7bc:	2f 81       	ldd	r18, Y+7	; 0x07
     7be:	38 85       	ldd	r19, Y+8	; 0x08
     7c0:	82 0f       	add	r24, r18
     7c2:	93 1f       	adc	r25, r19
     7c4:	98 87       	std	Y+8, r25	; 0x08
     7c6:	8f 83       	std	Y+7, r24	; 0x07
	segment_data[3] = dec_to_7seg[temp];
     7c8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ca:	9e 81       	ldd	r25, Y+6	; 0x06
     7cc:	86 5f       	subi	r24, 0xF6	; 246
     7ce:	9e 4f       	sbci	r25, 0xFE	; 254
     7d0:	fc 01       	movw	r30, r24
     7d2:	80 81       	ld	r24, Z
     7d4:	80 93 08 01 	sts	0x0108, r24
	temp = sum - temp2;
     7d8:	8f 81       	ldd	r24, Y+7	; 0x07
     7da:	98 85       	ldd	r25, Y+8	; 0x08
     7dc:	29 85       	ldd	r18, Y+9	; 0x09
     7de:	3a 85       	ldd	r19, Y+10	; 0x0a
     7e0:	a9 01       	movw	r20, r18
     7e2:	48 1b       	sub	r20, r24
     7e4:	59 0b       	sbc	r21, r25
     7e6:	ca 01       	movw	r24, r20
     7e8:	9e 83       	std	Y+6, r25	; 0x06
     7ea:	8d 83       	std	Y+5, r24	; 0x05
	temp = temp/10;
     7ec:	8d 81       	ldd	r24, Y+5	; 0x05
     7ee:	9e 81       	ldd	r25, Y+6	; 0x06
     7f0:	2a e0       	ldi	r18, 0x0A	; 10
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	b9 01       	movw	r22, r18
     7f6:	0e 94 4c 06 	call	0xc98	; 0xc98 <__divmodhi4>
     7fa:	cb 01       	movw	r24, r22
     7fc:	9e 83       	std	Y+6, r25	; 0x06
     7fe:	8d 83       	std	Y+5, r24	; 0x05
	temp2+=temp*10;
     800:	8d 81       	ldd	r24, Y+5	; 0x05
     802:	9e 81       	ldd	r25, Y+6	; 0x06
     804:	88 0f       	add	r24, r24
     806:	99 1f       	adc	r25, r25
     808:	9c 01       	movw	r18, r24
     80a:	22 0f       	add	r18, r18
     80c:	33 1f       	adc	r19, r19
     80e:	22 0f       	add	r18, r18
     810:	33 1f       	adc	r19, r19
     812:	82 0f       	add	r24, r18
     814:	93 1f       	adc	r25, r19
     816:	2f 81       	ldd	r18, Y+7	; 0x07
     818:	38 85       	ldd	r19, Y+8	; 0x08
     81a:	82 0f       	add	r24, r18
     81c:	93 1f       	adc	r25, r19
     81e:	98 87       	std	Y+8, r25	; 0x08
     820:	8f 83       	std	Y+7, r24	; 0x07
	segment_data[1] = dec_to_7seg[temp];
     822:	8d 81       	ldd	r24, Y+5	; 0x05
     824:	9e 81       	ldd	r25, Y+6	; 0x06
     826:	86 5f       	subi	r24, 0xF6	; 246
     828:	9e 4f       	sbci	r25, 0xFE	; 254
     82a:	fc 01       	movw	r30, r24
     82c:	80 81       	ld	r24, Z
     82e:	80 93 06 01 	sts	0x0106, r24
	temp = sum - temp2;
     832:	8f 81       	ldd	r24, Y+7	; 0x07
     834:	98 85       	ldd	r25, Y+8	; 0x08
     836:	29 85       	ldd	r18, Y+9	; 0x09
     838:	3a 85       	ldd	r19, Y+10	; 0x0a
     83a:	a9 01       	movw	r20, r18
     83c:	48 1b       	sub	r20, r24
     83e:	59 0b       	sbc	r21, r25
     840:	ca 01       	movw	r24, r20
     842:	9e 83       	std	Y+6, r25	; 0x06
     844:	8d 83       	std	Y+5, r24	; 0x05
	segment_data[0] = dec_to_7seg[temp];
     846:	8d 81       	ldd	r24, Y+5	; 0x05
     848:	9e 81       	ldd	r25, Y+6	; 0x06
     84a:	86 5f       	subi	r24, 0xF6	; 246
     84c:	9e 4f       	sbci	r25, 0xFE	; 254
     84e:	fc 01       	movw	r30, r24
     850:	80 81       	ld	r24, Z
     852:	80 93 05 01 	sts	0x0105, r24

	//remove leading 0's
	if(num_d>2) {num_d++;}
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	9a 81       	ldd	r25, Y+2	; 0x02
     85a:	83 30       	cpi	r24, 0x03	; 3
     85c:	91 05       	cpc	r25, r1
     85e:	2c f0       	brlt	.+10     	; 0x86a <segsum+0x1c4>
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	9a 81       	ldd	r25, Y+2	; 0x02
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	9a 83       	std	Y+2, r25	; 0x02
     868:	89 83       	std	Y+1, r24	; 0x01
	for(i=5;i>num_d;i--) {segment_data[i-1] = 0b11111111;}	
     86a:	85 e0       	ldi	r24, 0x05	; 5
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	9c 83       	std	Y+4, r25	; 0x04
     870:	8b 83       	std	Y+3, r24	; 0x03
     872:	0d c0       	rjmp	.+26     	; 0x88e <segsum+0x1e8>
     874:	8b 81       	ldd	r24, Y+3	; 0x03
     876:	9c 81       	ldd	r25, Y+4	; 0x04
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	8b 5f       	subi	r24, 0xFB	; 251
     87c:	9e 4f       	sbci	r25, 0xFE	; 254
     87e:	2f ef       	ldi	r18, 0xFF	; 255
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18
     884:	8b 81       	ldd	r24, Y+3	; 0x03
     886:	9c 81       	ldd	r25, Y+4	; 0x04
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	9c 83       	std	Y+4, r25	; 0x04
     88c:	8b 83       	std	Y+3, r24	; 0x03
     88e:	2b 81       	ldd	r18, Y+3	; 0x03
     890:	3c 81       	ldd	r19, Y+4	; 0x04
     892:	89 81       	ldd	r24, Y+1	; 0x01
     894:	9a 81       	ldd	r25, Y+2	; 0x02
     896:	82 17       	cp	r24, r18
     898:	93 07       	cpc	r25, r19
     89a:	64 f3       	brlt	.-40     	; 0x874 <segsum+0x1ce>

}
     89c:	2e 96       	adiw	r28, 0x0e	; 14
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	df 90       	pop	r13
     8b2:	cf 90       	pop	r12
     8b4:	08 95       	ret

000008b6 <adc_init>:

/*****************************************************************************
initialize the ADC: freerunning mode, clock 1024 prescale
*****************************************************************************/
void adc_init(){
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
	PORTF |= (1 << 2);
     8be:	82 e6       	ldi	r24, 0x62	; 98
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	22 e6       	ldi	r18, 0x62	; 98
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	f9 01       	movw	r30, r18
     8c8:	20 81       	ld	r18, Z
     8ca:	24 60       	ori	r18, 0x04	; 4
     8cc:	fc 01       	movw	r30, r24
     8ce:	20 83       	st	Z, r18
	DDRF &= ~(1 << 2);
     8d0:	81 e6       	ldi	r24, 0x61	; 97
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	21 e6       	ldi	r18, 0x61	; 97
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	f9 01       	movw	r30, r18
     8da:	20 81       	ld	r18, Z
     8dc:	2b 7f       	andi	r18, 0xFB	; 251
     8de:	fc 01       	movw	r30, r24
     8e0:	20 83       	st	Z, r18
	ADCSR |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     8e2:	86 e2       	ldi	r24, 0x26	; 38
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	26 e2       	ldi	r18, 0x26	; 38
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	f9 01       	movw	r30, r18
     8ec:	20 81       	ld	r18, Z
     8ee:	27 60       	ori	r18, 0x07	; 7
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 83       	st	Z, r18
	//	ADCSR |= (1 << ADEN);
	ADCSR |= (1 << ADFR);
     8f4:	86 e2       	ldi	r24, 0x26	; 38
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	26 e2       	ldi	r18, 0x26	; 38
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	f9 01       	movw	r30, r18
     8fe:	20 81       	ld	r18, Z
     900:	20 62       	ori	r18, 0x20	; 32
     902:	fc 01       	movw	r30, r24
     904:	20 83       	st	Z, r18
	ADMUX = 0x62;
     906:	87 e2       	ldi	r24, 0x27	; 39
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	22 e6       	ldi	r18, 0x62	; 98
     90c:	fc 01       	movw	r30, r24
     90e:	20 83       	st	Z, r18
	ADCSR |= (1 << ADIE);
     910:	86 e2       	ldi	r24, 0x26	; 38
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	26 e2       	ldi	r18, 0x26	; 38
     916:	30 e0       	ldi	r19, 0x00	; 0
     918:	f9 01       	movw	r30, r18
     91a:	20 81       	ld	r18, Z
     91c:	28 60       	ori	r18, 0x08	; 8
     91e:	fc 01       	movw	r30, r24
     920:	20 83       	st	Z, r18
	ADCSR |= (1 << ADSC);
     922:	86 e2       	ldi	r24, 0x26	; 38
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	26 e2       	ldi	r18, 0x26	; 38
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	f9 01       	movw	r30, r18
     92c:	20 81       	ld	r18, Z
     92e:	20 64       	ori	r18, 0x40	; 64
     930:	fc 01       	movw	r30, r24
     932:	20 83       	st	Z, r18

}
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <main>:

/*****************************************************************************
main
*****************************************************************************/
uint8_t main()
{
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	cd b7       	in	r28, 0x3d	; 61
     940:	de b7       	in	r29, 0x3e	; 62
     942:	6a 97       	sbiw	r28, 0x1a	; 26
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	de bf       	out	0x3e, r29	; 62
     94a:	0f be       	out	0x3f, r0	; 63
     94c:	cd bf       	out	0x3d, r28	; 61
	int i, temp, delay;

	int0_init();
     94e:	0e 94 a7 02 	call	0x54e	; 0x54e <int0_init>
	int2_init();
     952:	0e 94 cf 02 	call	0x59e	; 0x59e <int2_init>
	int3_init();
     956:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <int3_init>
	//set port bits 4-7 B as outputs
	spi_init();    //initalize SPI port
     95a:	0e 94 a8 00 	call	0x150	; 0x150 <spi_init>
	sei();         //enable interrupts before entering loop
     95e:	78 94       	sei

	DDRD = 0xff;
     960:	81 e3       	ldi	r24, 0x31	; 49
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	2f ef       	ldi	r18, 0xFF	; 255
     966:	fc 01       	movw	r30, r24
     968:	20 83       	st	Z, r18
	DDRB = 0xff;
     96a:	87 e3       	ldi	r24, 0x37	; 55
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	2f ef       	ldi	r18, 0xFF	; 255
     970:	fc 01       	movw	r30, r24
     972:	20 83       	st	Z, r18
	DDRC = 0xff;
     974:	84 e3       	ldi	r24, 0x34	; 52
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	2f ef       	ldi	r18, 0xFF	; 255
     97a:	fc 01       	movw	r30, r24
     97c:	20 83       	st	Z, r18
	PORTC = 0x00;
     97e:	85 e3       	ldi	r24, 0x35	; 53
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	fc 01       	movw	r30, r24
     984:	10 82       	st	Z, r1
	DDRA = 0xff;
     986:	8a e3       	ldi	r24, 0x3A	; 58
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	2f ef       	ldi	r18, 0xFF	; 255
     98c:	fc 01       	movw	r30, r24
     98e:	20 83       	st	Z, r18
	PORTA = 0x00;
     990:	8b e3       	ldi	r24, 0x3B	; 59
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	fc 01       	movw	r30, r24
     996:	10 82       	st	Z, r1
	SPDR = 0x01;
     998:	8f e2       	ldi	r24, 0x2F	; 47
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	21 e0       	ldi	r18, 0x01	; 1
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
	DDRF = 0xff;
     9a2:	81 e6       	ldi	r24, 0x61	; 97
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	2f ef       	ldi	r18, 0xFF	; 255
     9a8:	fc 01       	movw	r30, r24
     9aa:	20 83       	st	Z, r18
	DDRE = 0xff;
     9ac:	82 e2       	ldi	r24, 0x22	; 34
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	2f ef       	ldi	r18, 0xFF	; 255
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 83       	st	Z, r18
	PORTE = 0xff;
     9b6:	83 e2       	ldi	r24, 0x23	; 35
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	2f ef       	ldi	r18, 0xFF	; 255
     9bc:	fc 01       	movw	r30, r24
     9be:	20 83       	st	Z, r18

	adc_init();
     9c0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <adc_init>
	while(1)
	{


		if(button>=0){ //if button is pressed toggle mode
     9c4:	80 91 1e 01 	lds	r24, 0x011E
     9c8:	90 91 1f 01 	lds	r25, 0x011F
     9cc:	99 23       	and	r25, r25
     9ce:	0c f4       	brge	.+2      	; 0x9d2 <main+0x98>
     9d0:	56 c0       	rjmp	.+172    	; 0xa7e <main+0x144>
			switch(button){
     9d2:	80 91 1e 01 	lds	r24, 0x011E
     9d6:	90 91 1f 01 	lds	r25, 0x011F
     9da:	82 30       	cpi	r24, 0x02	; 2
     9dc:	91 05       	cpc	r25, r1
     9de:	69 f0       	breq	.+26     	; 0x9fa <main+0xc0>
     9e0:	84 30       	cpi	r24, 0x04	; 4
     9e2:	91 05       	cpc	r25, r1
     9e4:	89 f0       	breq	.+34     	; 0xa08 <main+0xce>
     9e6:	81 30       	cpi	r24, 0x01	; 1
     9e8:	91 05       	cpc	r25, r1
     9ea:	a9 f4       	brne	.+42     	; 0xa16 <main+0xdc>
				case 1:
					mode ^= 0x80;
     9ec:	90 91 19 01 	lds	r25, 0x0119
     9f0:	80 e8       	ldi	r24, 0x80	; 128
     9f2:	89 27       	eor	r24, r25
     9f4:	80 93 19 01 	sts	0x0119, r24
					break;
     9f8:	0e c0       	rjmp	.+28     	; 0xa16 <main+0xdc>
				case 2:
					mode ^= 0x40;
     9fa:	90 91 19 01 	lds	r25, 0x0119
     9fe:	80 e4       	ldi	r24, 0x40	; 64
     a00:	89 27       	eor	r24, r25
     a02:	80 93 19 01 	sts	0x0119, r24
					break;
     a06:	07 c0       	rjmp	.+14     	; 0xa16 <main+0xdc>
				case 4:
					mode ^= 0x20;
     a08:	90 91 19 01 	lds	r25, 0x0119
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	89 27       	eor	r24, r25
     a10:	80 93 19 01 	sts	0x0119, r24
					break;
     a14:	00 00       	nop

			}
			switch(mode){//control count increment value based on mode
     a16:	80 91 19 01 	lds	r24, 0x0119
     a1a:	88 2f       	mov	r24, r24
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	80 32       	cpi	r24, 0x20	; 32
     a20:	91 05       	cpc	r25, r1
     a22:	d9 f0       	breq	.+54     	; 0xa5a <main+0x120>
     a24:	81 32       	cpi	r24, 0x21	; 33
     a26:	91 05       	cpc	r25, r1
     a28:	1c f4       	brge	.+6      	; 0xa30 <main+0xf6>
     a2a:	00 97       	sbiw	r24, 0x00	; 0
     a2c:	41 f0       	breq	.+16     	; 0xa3e <main+0x104>
     a2e:	21 c0       	rjmp	.+66     	; 0xa72 <main+0x138>
     a30:	80 34       	cpi	r24, 0x40	; 64
     a32:	91 05       	cpc	r25, r1
     a34:	59 f0       	breq	.+22     	; 0xa4c <main+0x112>
     a36:	80 36       	cpi	r24, 0x60	; 96
     a38:	91 05       	cpc	r25, r1
     a3a:	b1 f0       	breq	.+44     	; 0xa68 <main+0x12e>
     a3c:	1a c0       	rjmp	.+52     	; 0xa72 <main+0x138>
				case 0x00:
					count_add = 1;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	90 93 17 01 	sts	0x0117, r25
     a46:	80 93 16 01 	sts	0x0116, r24
					break;
     a4a:	13 c0       	rjmp	.+38     	; 0xa72 <main+0x138>
				case 0x40:
					count_add = 2;
     a4c:	82 e0       	ldi	r24, 0x02	; 2
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	90 93 17 01 	sts	0x0117, r25
     a54:	80 93 16 01 	sts	0x0116, r24
					break;
     a58:	0c c0       	rjmp	.+24     	; 0xa72 <main+0x138>
				case 0x20:
					count_add = 4;
     a5a:	84 e0       	ldi	r24, 0x04	; 4
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	90 93 17 01 	sts	0x0117, r25
     a62:	80 93 16 01 	sts	0x0116, r24
					break;
     a66:	05 c0       	rjmp	.+10     	; 0xa72 <main+0x138>
				case 0x60:
					count_add = 0;
     a68:	10 92 17 01 	sts	0x0117, r1
     a6c:	10 92 16 01 	sts	0x0116, r1
					break;
     a70:	00 00       	nop
			}

			button = -1;	//rell ISR that button has been read and can be changed
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	9f ef       	ldi	r25, 0xFF	; 255
     a76:	90 93 1f 01 	sts	0x011F, r25
     a7a:	80 93 1e 01 	sts	0x011E, r24
		}


		segsum(8888);	//translate count to SSD format
     a7e:	88 eb       	ldi	r24, 0xB8	; 184
     a80:	92 e2       	ldi	r25, 0x22	; 34
     a82:	0e 94 53 03 	call	0x6a6	; 0x6a6 <segsum>

		for(i=4;i>=0;i--){//bound a counter (0-4) to keep track of digit to display 
     a86:	84 e0       	ldi	r24, 0x04	; 4
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	9a 83       	std	Y+2, r25	; 0x02
     a8c:	89 83       	std	Y+1, r24	; 0x01
     a8e:	ef c0       	rjmp	.+478    	; 0xc6e <main+0x334>
			DDRA = 0xff;//make PORTA an output
     a90:	8a e3       	ldi	r24, 0x3A	; 58
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	2f ef       	ldi	r18, 0xFF	; 255
     a96:	fc 01       	movw	r30, r24
     a98:	20 83       	st	Z, r18
			PORTA = segment_data[i];//segment_data[i];
     a9a:	8b e3       	ldi	r24, 0x3B	; 59
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	29 81       	ldd	r18, Y+1	; 0x01
     aa0:	3a 81       	ldd	r19, Y+2	; 0x02
     aa2:	2b 5f       	subi	r18, 0xFB	; 251
     aa4:	3e 4f       	sbci	r19, 0xFE	; 254
     aa6:	f9 01       	movw	r30, r18
     aa8:	20 81       	ld	r18, Z
     aaa:	fc 01       	movw	r30, r24
     aac:	20 83       	st	Z, r18
			PORTB &= DC;
     aae:	88 e3       	ldi	r24, 0x38	; 56
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	28 e3       	ldi	r18, 0x38	; 56
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	f9 01       	movw	r30, r18
     ab8:	20 81       	ld	r18, Z
     aba:	2f 78       	andi	r18, 0x8F	; 143
     abc:	fc 01       	movw	r30, r24
     abe:	20 83       	st	Z, r18
			PORTB |= digit_data[i];//update digit to display
     ac0:	88 e3       	ldi	r24, 0x38	; 56
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	28 e3       	ldi	r18, 0x38	; 56
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	f9 01       	movw	r30, r18
     aca:	40 81       	ld	r20, Z
     acc:	29 81       	ldd	r18, Y+1	; 0x01
     ace:	3a 81       	ldd	r19, Y+2	; 0x02
     ad0:	20 50       	subi	r18, 0x00	; 0
     ad2:	3f 4f       	sbci	r19, 0xFF	; 255
     ad4:	f9 01       	movw	r30, r18
     ad6:	20 81       	ld	r18, Z
     ad8:	24 2b       	or	r18, r20
     ada:	fc 01       	movw	r30, r24
     adc:	20 83       	st	Z, r18
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	a8 ec       	ldi	r26, 0xC8	; 200
     ae4:	b3 e4       	ldi	r27, 0x43	; 67
     ae6:	8b 83       	std	Y+3, r24	; 0x03
     ae8:	9c 83       	std	Y+4, r25	; 0x04
     aea:	ad 83       	std	Y+5, r26	; 0x05
     aec:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     aee:	2b ea       	ldi	r18, 0xAB	; 171
     af0:	3a ea       	ldi	r19, 0xAA	; 170
     af2:	4a ea       	ldi	r20, 0xAA	; 170
     af4:	50 e4       	ldi	r21, 0x40	; 64
     af6:	6b 81       	ldd	r22, Y+3	; 0x03
     af8:	7c 81       	ldd	r23, Y+4	; 0x04
     afa:	8d 81       	ldd	r24, Y+5	; 0x05
     afc:	9e 81       	ldd	r25, Y+6	; 0x06
     afe:	0e 94 c2 07 	call	0xf84	; 0xf84 <__mulsf3>
     b02:	dc 01       	movw	r26, r24
     b04:	cb 01       	movw	r24, r22
     b06:	8f 83       	std	Y+7, r24	; 0x07
     b08:	98 87       	std	Y+8, r25	; 0x08
     b0a:	a9 87       	std	Y+9, r26	; 0x09
     b0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	40 e8       	ldi	r20, 0x80	; 128
     b14:	5f e3       	ldi	r21, 0x3F	; 63
     b16:	6f 81       	ldd	r22, Y+7	; 0x07
     b18:	78 85       	ldd	r23, Y+8	; 0x08
     b1a:	89 85       	ldd	r24, Y+9	; 0x09
     b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b1e:	0e 94 74 06 	call	0xce8	; 0xce8 <__cmpsf2>
     b22:	88 23       	and	r24, r24
     b24:	1c f4       	brge	.+6      	; 0xb2c <main+0x1f2>
		__ticks = 1;
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	8b 87       	std	Y+11, r24	; 0x0b
     b2a:	91 c0       	rjmp	.+290    	; 0xc4e <main+0x314>
	else if (__tmp > 255)
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	4f e7       	ldi	r20, 0x7F	; 127
     b32:	53 e4       	ldi	r21, 0x43	; 67
     b34:	6f 81       	ldd	r22, Y+7	; 0x07
     b36:	78 85       	ldd	r23, Y+8	; 0x08
     b38:	89 85       	ldd	r24, Y+9	; 0x09
     b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     b3c:	0e 94 be 07 	call	0xf7c	; 0xf7c <__gesf2>
     b40:	18 16       	cp	r1, r24
     b42:	0c f0       	brlt	.+2      	; 0xb46 <main+0x20c>
     b44:	7b c0       	rjmp	.+246    	; 0xc3c <main+0x302>
	{
		_delay_ms(__us / 1000.0);
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	4a e7       	ldi	r20, 0x7A	; 122
     b4c:	54 e4       	ldi	r21, 0x44	; 68
     b4e:	6b 81       	ldd	r22, Y+3	; 0x03
     b50:	7c 81       	ldd	r23, Y+4	; 0x04
     b52:	8d 81       	ldd	r24, Y+5	; 0x05
     b54:	9e 81       	ldd	r25, Y+6	; 0x06
     b56:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__divsf3>
     b5a:	dc 01       	movw	r26, r24
     b5c:	cb 01       	movw	r24, r22
     b5e:	8c 87       	std	Y+12, r24	; 0x0c
     b60:	9d 87       	std	Y+13, r25	; 0x0d
     b62:	ae 87       	std	Y+14, r26	; 0x0e
     b64:	bf 87       	std	Y+15, r27	; 0x0f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     b66:	20 e0       	ldi	r18, 0x00	; 0
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	4a e7       	ldi	r20, 0x7A	; 122
     b6c:	55 e4       	ldi	r21, 0x45	; 69
     b6e:	6c 85       	ldd	r22, Y+12	; 0x0c
     b70:	7d 85       	ldd	r23, Y+13	; 0x0d
     b72:	8e 85       	ldd	r24, Y+14	; 0x0e
     b74:	9f 85       	ldd	r25, Y+15	; 0x0f
     b76:	0e 94 c2 07 	call	0xf84	; 0xf84 <__mulsf3>
     b7a:	dc 01       	movw	r26, r24
     b7c:	cb 01       	movw	r24, r22
     b7e:	88 8b       	std	Y+16, r24	; 0x10
     b80:	99 8b       	std	Y+17, r25	; 0x11
     b82:	aa 8b       	std	Y+18, r26	; 0x12
     b84:	bb 8b       	std	Y+19, r27	; 0x13
	if (__tmp < 1.0)
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	40 e8       	ldi	r20, 0x80	; 128
     b8c:	5f e3       	ldi	r21, 0x3F	; 63
     b8e:	68 89       	ldd	r22, Y+16	; 0x10
     b90:	79 89       	ldd	r23, Y+17	; 0x11
     b92:	8a 89       	ldd	r24, Y+18	; 0x12
     b94:	9b 89       	ldd	r25, Y+19	; 0x13
     b96:	0e 94 74 06 	call	0xce8	; 0xce8 <__cmpsf2>
     b9a:	88 23       	and	r24, r24
     b9c:	2c f4       	brge	.+10     	; 0xba8 <main+0x26e>
		__ticks = 1;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	9d 8b       	std	Y+21, r25	; 0x15
     ba4:	8c 8b       	std	Y+20, r24	; 0x14
     ba6:	3f c0       	rjmp	.+126    	; 0xc26 <main+0x2ec>
	else if (__tmp > 65535)
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	3f ef       	ldi	r19, 0xFF	; 255
     bac:	4f e7       	ldi	r20, 0x7F	; 127
     bae:	57 e4       	ldi	r21, 0x47	; 71
     bb0:	68 89       	ldd	r22, Y+16	; 0x10
     bb2:	79 89       	ldd	r23, Y+17	; 0x11
     bb4:	8a 89       	ldd	r24, Y+18	; 0x12
     bb6:	9b 89       	ldd	r25, Y+19	; 0x13
     bb8:	0e 94 be 07 	call	0xf7c	; 0xf7c <__gesf2>
     bbc:	18 16       	cp	r1, r24
     bbe:	4c f5       	brge	.+82     	; 0xc12 <main+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bc0:	20 e0       	ldi	r18, 0x00	; 0
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	40 e2       	ldi	r20, 0x20	; 32
     bc6:	51 e4       	ldi	r21, 0x41	; 65
     bc8:	6c 85       	ldd	r22, Y+12	; 0x0c
     bca:	7d 85       	ldd	r23, Y+13	; 0x0d
     bcc:	8e 85       	ldd	r24, Y+14	; 0x0e
     bce:	9f 85       	ldd	r25, Y+15	; 0x0f
     bd0:	0e 94 c2 07 	call	0xf84	; 0xf84 <__mulsf3>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	bc 01       	movw	r22, r24
     bda:	cd 01       	movw	r24, r26
     bdc:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__fixunssfsi>
     be0:	dc 01       	movw	r26, r24
     be2:	cb 01       	movw	r24, r22
     be4:	9d 8b       	std	Y+21, r25	; 0x15
     be6:	8c 8b       	std	Y+20, r24	; 0x14
     be8:	0f c0       	rjmp	.+30     	; 0xc08 <main+0x2ce>
     bea:	80 e9       	ldi	r24, 0x90	; 144
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	9f 8b       	std	Y+23, r25	; 0x17
     bf0:	8e 8b       	std	Y+22, r24	; 0x16
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bf2:	8e 89       	ldd	r24, Y+22	; 0x16
     bf4:	9f 89       	ldd	r25, Y+23	; 0x17
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	f1 f7       	brne	.-4      	; 0xbf6 <main+0x2bc>
     bfa:	9f 8b       	std	Y+23, r25	; 0x17
     bfc:	8e 8b       	std	Y+22, r24	; 0x16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfe:	8c 89       	ldd	r24, Y+20	; 0x14
     c00:	9d 89       	ldd	r25, Y+21	; 0x15
     c02:	01 97       	sbiw	r24, 0x01	; 1
     c04:	9d 8b       	std	Y+21, r25	; 0x15
     c06:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c08:	8c 89       	ldd	r24, Y+20	; 0x14
     c0a:	9d 89       	ldd	r25, Y+21	; 0x15
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	69 f7       	brne	.-38     	; 0xbea <main+0x2b0>
     c10:	24 c0       	rjmp	.+72     	; 0xc5a <main+0x320>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c12:	68 89       	ldd	r22, Y+16	; 0x10
     c14:	79 89       	ldd	r23, Y+17	; 0x11
     c16:	8a 89       	ldd	r24, Y+18	; 0x12
     c18:	9b 89       	ldd	r25, Y+19	; 0x13
     c1a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__fixunssfsi>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	9d 8b       	std	Y+21, r25	; 0x15
     c24:	8c 8b       	std	Y+20, r24	; 0x14
     c26:	8c 89       	ldd	r24, Y+20	; 0x14
     c28:	9d 89       	ldd	r25, Y+21	; 0x15
     c2a:	99 8f       	std	Y+25, r25	; 0x19
     c2c:	88 8f       	std	Y+24, r24	; 0x18
     c2e:	88 8d       	ldd	r24, Y+24	; 0x18
     c30:	99 8d       	ldd	r25, Y+25	; 0x19
     c32:	01 97       	sbiw	r24, 0x01	; 1
     c34:	f1 f7       	brne	.-4      	; 0xc32 <main+0x2f8>
     c36:	99 8f       	std	Y+25, r25	; 0x19
     c38:	88 8f       	std	Y+24, r24	; 0x18
     c3a:	0f c0       	rjmp	.+30     	; 0xc5a <main+0x320>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c3c:	6f 81       	ldd	r22, Y+7	; 0x07
     c3e:	78 85       	ldd	r23, Y+8	; 0x08
     c40:	89 85       	ldd	r24, Y+9	; 0x09
     c42:	9a 85       	ldd	r25, Y+10	; 0x0a
     c44:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	8b 87       	std	Y+11, r24	; 0x0b
     c4e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c50:	8a 8f       	std	Y+26, r24	; 0x1a
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c52:	8a 8d       	ldd	r24, Y+26	; 0x1a
     c54:	8a 95       	dec	r24
     c56:	f1 f7       	brne	.-4      	; 0xc54 <main+0x31a>
     c58:	8a 8f       	std	Y+26, r24	; 0x1a
			_delay_us(400);
			PORTA = 0xff;//isegment_data[i];
     c5a:	8b e3       	ldi	r24, 0x3B	; 59
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	2f ef       	ldi	r18, 0xFF	; 255
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18
		}


		segsum(8888);	//translate count to SSD format

		for(i=4;i>=0;i--){//bound a counter (0-4) to keep track of digit to display 
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	9a 83       	std	Y+2, r25	; 0x02
     c6c:	89 83       	std	Y+1, r24	; 0x01
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	99 23       	and	r25, r25
     c74:	0c f0       	brlt	.+2      	; 0xc78 <main+0x33e>
     c76:	0c cf       	rjmp	.-488    	; 0xa90 <main+0x156>
			PORTB &= DC;
			PORTB |= digit_data[i];//update digit to display
			_delay_us(400);
			PORTA = 0xff;//isegment_data[i];
		}
	}
     c78:	a5 ce       	rjmp	.-694    	; 0x9c4 <main+0x8a>

00000c7a <__umulhisi3>:
     c7a:	a2 9f       	mul	r26, r18
     c7c:	b0 01       	movw	r22, r0
     c7e:	b3 9f       	mul	r27, r19
     c80:	c0 01       	movw	r24, r0
     c82:	a3 9f       	mul	r26, r19
     c84:	70 0d       	add	r23, r0
     c86:	81 1d       	adc	r24, r1
     c88:	11 24       	eor	r1, r1
     c8a:	91 1d       	adc	r25, r1
     c8c:	b2 9f       	mul	r27, r18
     c8e:	70 0d       	add	r23, r0
     c90:	81 1d       	adc	r24, r1
     c92:	11 24       	eor	r1, r1
     c94:	91 1d       	adc	r25, r1
     c96:	08 95       	ret

00000c98 <__divmodhi4>:
     c98:	97 fb       	bst	r25, 7
     c9a:	07 2e       	mov	r0, r23
     c9c:	16 f4       	brtc	.+4      	; 0xca2 <__divmodhi4+0xa>
     c9e:	00 94       	com	r0
     ca0:	07 d0       	rcall	.+14     	; 0xcb0 <__divmodhi4_neg1>
     ca2:	77 fd       	sbrc	r23, 7
     ca4:	09 d0       	rcall	.+18     	; 0xcb8 <__divmodhi4_neg2>
     ca6:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__udivmodhi4>
     caa:	07 fc       	sbrc	r0, 7
     cac:	05 d0       	rcall	.+10     	; 0xcb8 <__divmodhi4_neg2>
     cae:	3e f4       	brtc	.+14     	; 0xcbe <__divmodhi4_exit>

00000cb0 <__divmodhi4_neg1>:
     cb0:	90 95       	com	r25
     cb2:	81 95       	neg	r24
     cb4:	9f 4f       	sbci	r25, 0xFF	; 255
     cb6:	08 95       	ret

00000cb8 <__divmodhi4_neg2>:
     cb8:	70 95       	com	r23
     cba:	61 95       	neg	r22
     cbc:	7f 4f       	sbci	r23, 0xFF	; 255

00000cbe <__divmodhi4_exit>:
     cbe:	08 95       	ret

00000cc0 <__udivmodhi4>:
     cc0:	aa 1b       	sub	r26, r26
     cc2:	bb 1b       	sub	r27, r27
     cc4:	51 e1       	ldi	r21, 0x11	; 17
     cc6:	07 c0       	rjmp	.+14     	; 0xcd6 <__udivmodhi4_ep>

00000cc8 <__udivmodhi4_loop>:
     cc8:	aa 1f       	adc	r26, r26
     cca:	bb 1f       	adc	r27, r27
     ccc:	a6 17       	cp	r26, r22
     cce:	b7 07       	cpc	r27, r23
     cd0:	10 f0       	brcs	.+4      	; 0xcd6 <__udivmodhi4_ep>
     cd2:	a6 1b       	sub	r26, r22
     cd4:	b7 0b       	sbc	r27, r23

00000cd6 <__udivmodhi4_ep>:
     cd6:	88 1f       	adc	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	5a 95       	dec	r21
     cdc:	a9 f7       	brne	.-22     	; 0xcc8 <__udivmodhi4_loop>
     cde:	80 95       	com	r24
     ce0:	90 95       	com	r25
     ce2:	bc 01       	movw	r22, r24
     ce4:	cd 01       	movw	r24, r26
     ce6:	08 95       	ret

00000ce8 <__cmpsf2>:
     ce8:	d4 d0       	rcall	.+424    	; 0xe92 <__fp_cmp>
     cea:	08 f4       	brcc	.+2      	; 0xcee <__cmpsf2+0x6>
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	08 95       	ret

00000cf0 <__divsf3>:
     cf0:	0c d0       	rcall	.+24     	; 0xd0a <__divsf3x>
     cf2:	0a c1       	rjmp	.+532    	; 0xf08 <__fp_round>
     cf4:	02 d1       	rcall	.+516    	; 0xefa <__fp_pscB>
     cf6:	40 f0       	brcs	.+16     	; 0xd08 <__divsf3+0x18>
     cf8:	f9 d0       	rcall	.+498    	; 0xeec <__fp_pscA>
     cfa:	30 f0       	brcs	.+12     	; 0xd08 <__divsf3+0x18>
     cfc:	21 f4       	brne	.+8      	; 0xd06 <__divsf3+0x16>
     cfe:	5f 3f       	cpi	r21, 0xFF	; 255
     d00:	19 f0       	breq	.+6      	; 0xd08 <__divsf3+0x18>
     d02:	eb c0       	rjmp	.+470    	; 0xeda <__fp_inf>
     d04:	51 11       	cpse	r21, r1
     d06:	34 c1       	rjmp	.+616    	; 0xf70 <__fp_szero>
     d08:	ee c0       	rjmp	.+476    	; 0xee6 <__fp_nan>

00000d0a <__divsf3x>:
     d0a:	0f d1       	rcall	.+542    	; 0xf2a <__fp_split3>
     d0c:	98 f3       	brcs	.-26     	; 0xcf4 <__divsf3+0x4>

00000d0e <__divsf3_pse>:
     d0e:	99 23       	and	r25, r25
     d10:	c9 f3       	breq	.-14     	; 0xd04 <__divsf3+0x14>
     d12:	55 23       	and	r21, r21
     d14:	b1 f3       	breq	.-20     	; 0xd02 <__divsf3+0x12>
     d16:	95 1b       	sub	r25, r21
     d18:	55 0b       	sbc	r21, r21
     d1a:	bb 27       	eor	r27, r27
     d1c:	aa 27       	eor	r26, r26
     d1e:	62 17       	cp	r22, r18
     d20:	73 07       	cpc	r23, r19
     d22:	84 07       	cpc	r24, r20
     d24:	38 f0       	brcs	.+14     	; 0xd34 <__divsf3_pse+0x26>
     d26:	9f 5f       	subi	r25, 0xFF	; 255
     d28:	5f 4f       	sbci	r21, 0xFF	; 255
     d2a:	22 0f       	add	r18, r18
     d2c:	33 1f       	adc	r19, r19
     d2e:	44 1f       	adc	r20, r20
     d30:	aa 1f       	adc	r26, r26
     d32:	a9 f3       	breq	.-22     	; 0xd1e <__divsf3_pse+0x10>
     d34:	33 d0       	rcall	.+102    	; 0xd9c <__divsf3_pse+0x8e>
     d36:	0e 2e       	mov	r0, r30
     d38:	3a f0       	brmi	.+14     	; 0xd48 <__divsf3_pse+0x3a>
     d3a:	e0 e8       	ldi	r30, 0x80	; 128
     d3c:	30 d0       	rcall	.+96     	; 0xd9e <__divsf3_pse+0x90>
     d3e:	91 50       	subi	r25, 0x01	; 1
     d40:	50 40       	sbci	r21, 0x00	; 0
     d42:	e6 95       	lsr	r30
     d44:	00 1c       	adc	r0, r0
     d46:	ca f7       	brpl	.-14     	; 0xd3a <__divsf3_pse+0x2c>
     d48:	29 d0       	rcall	.+82     	; 0xd9c <__divsf3_pse+0x8e>
     d4a:	fe 2f       	mov	r31, r30
     d4c:	27 d0       	rcall	.+78     	; 0xd9c <__divsf3_pse+0x8e>
     d4e:	66 0f       	add	r22, r22
     d50:	77 1f       	adc	r23, r23
     d52:	88 1f       	adc	r24, r24
     d54:	bb 1f       	adc	r27, r27
     d56:	26 17       	cp	r18, r22
     d58:	37 07       	cpc	r19, r23
     d5a:	48 07       	cpc	r20, r24
     d5c:	ab 07       	cpc	r26, r27
     d5e:	b0 e8       	ldi	r27, 0x80	; 128
     d60:	09 f0       	breq	.+2      	; 0xd64 <__divsf3_pse+0x56>
     d62:	bb 0b       	sbc	r27, r27
     d64:	80 2d       	mov	r24, r0
     d66:	bf 01       	movw	r22, r30
     d68:	ff 27       	eor	r31, r31
     d6a:	93 58       	subi	r25, 0x83	; 131
     d6c:	5f 4f       	sbci	r21, 0xFF	; 255
     d6e:	2a f0       	brmi	.+10     	; 0xd7a <__divsf3_pse+0x6c>
     d70:	9e 3f       	cpi	r25, 0xFE	; 254
     d72:	51 05       	cpc	r21, r1
     d74:	68 f0       	brcs	.+26     	; 0xd90 <__divsf3_pse+0x82>
     d76:	b1 c0       	rjmp	.+354    	; 0xeda <__fp_inf>
     d78:	fb c0       	rjmp	.+502    	; 0xf70 <__fp_szero>
     d7a:	5f 3f       	cpi	r21, 0xFF	; 255
     d7c:	ec f3       	brlt	.-6      	; 0xd78 <__divsf3_pse+0x6a>
     d7e:	98 3e       	cpi	r25, 0xE8	; 232
     d80:	dc f3       	brlt	.-10     	; 0xd78 <__divsf3_pse+0x6a>
     d82:	86 95       	lsr	r24
     d84:	77 95       	ror	r23
     d86:	67 95       	ror	r22
     d88:	b7 95       	ror	r27
     d8a:	f7 95       	ror	r31
     d8c:	9f 5f       	subi	r25, 0xFF	; 255
     d8e:	c9 f7       	brne	.-14     	; 0xd82 <__divsf3_pse+0x74>
     d90:	88 0f       	add	r24, r24
     d92:	91 1d       	adc	r25, r1
     d94:	96 95       	lsr	r25
     d96:	87 95       	ror	r24
     d98:	97 f9       	bld	r25, 7
     d9a:	08 95       	ret
     d9c:	e1 e0       	ldi	r30, 0x01	; 1
     d9e:	66 0f       	add	r22, r22
     da0:	77 1f       	adc	r23, r23
     da2:	88 1f       	adc	r24, r24
     da4:	bb 1f       	adc	r27, r27
     da6:	62 17       	cp	r22, r18
     da8:	73 07       	cpc	r23, r19
     daa:	84 07       	cpc	r24, r20
     dac:	ba 07       	cpc	r27, r26
     dae:	20 f0       	brcs	.+8      	; 0xdb8 <__divsf3_pse+0xaa>
     db0:	62 1b       	sub	r22, r18
     db2:	73 0b       	sbc	r23, r19
     db4:	84 0b       	sbc	r24, r20
     db6:	ba 0b       	sbc	r27, r26
     db8:	ee 1f       	adc	r30, r30
     dba:	88 f7       	brcc	.-30     	; 0xd9e <__divsf3_pse+0x90>
     dbc:	e0 95       	com	r30
     dbe:	08 95       	ret

00000dc0 <__fixunssfsi>:
     dc0:	bc d0       	rcall	.+376    	; 0xf3a <__fp_splitA>
     dc2:	88 f0       	brcs	.+34     	; 0xde6 <__fixunssfsi+0x26>
     dc4:	9f 57       	subi	r25, 0x7F	; 127
     dc6:	90 f0       	brcs	.+36     	; 0xdec <__fixunssfsi+0x2c>
     dc8:	b9 2f       	mov	r27, r25
     dca:	99 27       	eor	r25, r25
     dcc:	b7 51       	subi	r27, 0x17	; 23
     dce:	a0 f0       	brcs	.+40     	; 0xdf8 <__fixunssfsi+0x38>
     dd0:	d1 f0       	breq	.+52     	; 0xe06 <__fixunssfsi+0x46>
     dd2:	66 0f       	add	r22, r22
     dd4:	77 1f       	adc	r23, r23
     dd6:	88 1f       	adc	r24, r24
     dd8:	99 1f       	adc	r25, r25
     dda:	1a f0       	brmi	.+6      	; 0xde2 <__fixunssfsi+0x22>
     ddc:	ba 95       	dec	r27
     dde:	c9 f7       	brne	.-14     	; 0xdd2 <__fixunssfsi+0x12>
     de0:	12 c0       	rjmp	.+36     	; 0xe06 <__fixunssfsi+0x46>
     de2:	b1 30       	cpi	r27, 0x01	; 1
     de4:	81 f0       	breq	.+32     	; 0xe06 <__fixunssfsi+0x46>
     de6:	c3 d0       	rcall	.+390    	; 0xf6e <__fp_zero>
     de8:	b1 e0       	ldi	r27, 0x01	; 1
     dea:	08 95       	ret
     dec:	c0 c0       	rjmp	.+384    	; 0xf6e <__fp_zero>
     dee:	67 2f       	mov	r22, r23
     df0:	78 2f       	mov	r23, r24
     df2:	88 27       	eor	r24, r24
     df4:	b8 5f       	subi	r27, 0xF8	; 248
     df6:	39 f0       	breq	.+14     	; 0xe06 <__fixunssfsi+0x46>
     df8:	b9 3f       	cpi	r27, 0xF9	; 249
     dfa:	cc f3       	brlt	.-14     	; 0xdee <__fixunssfsi+0x2e>
     dfc:	86 95       	lsr	r24
     dfe:	77 95       	ror	r23
     e00:	67 95       	ror	r22
     e02:	b3 95       	inc	r27
     e04:	d9 f7       	brne	.-10     	; 0xdfc <__fixunssfsi+0x3c>
     e06:	3e f4       	brtc	.+14     	; 0xe16 <__fixunssfsi+0x56>
     e08:	90 95       	com	r25
     e0a:	80 95       	com	r24
     e0c:	70 95       	com	r23
     e0e:	61 95       	neg	r22
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	8f 4f       	sbci	r24, 0xFF	; 255
     e14:	9f 4f       	sbci	r25, 0xFF	; 255
     e16:	08 95       	ret

00000e18 <__floatunsisf>:
     e18:	e8 94       	clt
     e1a:	09 c0       	rjmp	.+18     	; 0xe2e <__floatsisf+0x12>

00000e1c <__floatsisf>:
     e1c:	97 fb       	bst	r25, 7
     e1e:	3e f4       	brtc	.+14     	; 0xe2e <__floatsisf+0x12>
     e20:	90 95       	com	r25
     e22:	80 95       	com	r24
     e24:	70 95       	com	r23
     e26:	61 95       	neg	r22
     e28:	7f 4f       	sbci	r23, 0xFF	; 255
     e2a:	8f 4f       	sbci	r24, 0xFF	; 255
     e2c:	9f 4f       	sbci	r25, 0xFF	; 255
     e2e:	99 23       	and	r25, r25
     e30:	a9 f0       	breq	.+42     	; 0xe5c <__floatsisf+0x40>
     e32:	f9 2f       	mov	r31, r25
     e34:	96 e9       	ldi	r25, 0x96	; 150
     e36:	bb 27       	eor	r27, r27
     e38:	93 95       	inc	r25
     e3a:	f6 95       	lsr	r31
     e3c:	87 95       	ror	r24
     e3e:	77 95       	ror	r23
     e40:	67 95       	ror	r22
     e42:	b7 95       	ror	r27
     e44:	f1 11       	cpse	r31, r1
     e46:	f8 cf       	rjmp	.-16     	; 0xe38 <__floatsisf+0x1c>
     e48:	fa f4       	brpl	.+62     	; 0xe88 <__floatsisf+0x6c>
     e4a:	bb 0f       	add	r27, r27
     e4c:	11 f4       	brne	.+4      	; 0xe52 <__floatsisf+0x36>
     e4e:	60 ff       	sbrs	r22, 0
     e50:	1b c0       	rjmp	.+54     	; 0xe88 <__floatsisf+0x6c>
     e52:	6f 5f       	subi	r22, 0xFF	; 255
     e54:	7f 4f       	sbci	r23, 0xFF	; 255
     e56:	8f 4f       	sbci	r24, 0xFF	; 255
     e58:	9f 4f       	sbci	r25, 0xFF	; 255
     e5a:	16 c0       	rjmp	.+44     	; 0xe88 <__floatsisf+0x6c>
     e5c:	88 23       	and	r24, r24
     e5e:	11 f0       	breq	.+4      	; 0xe64 <__floatsisf+0x48>
     e60:	96 e9       	ldi	r25, 0x96	; 150
     e62:	11 c0       	rjmp	.+34     	; 0xe86 <__floatsisf+0x6a>
     e64:	77 23       	and	r23, r23
     e66:	21 f0       	breq	.+8      	; 0xe70 <__floatsisf+0x54>
     e68:	9e e8       	ldi	r25, 0x8E	; 142
     e6a:	87 2f       	mov	r24, r23
     e6c:	76 2f       	mov	r23, r22
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <__floatsisf+0x5e>
     e70:	66 23       	and	r22, r22
     e72:	71 f0       	breq	.+28     	; 0xe90 <__floatsisf+0x74>
     e74:	96 e8       	ldi	r25, 0x86	; 134
     e76:	86 2f       	mov	r24, r22
     e78:	70 e0       	ldi	r23, 0x00	; 0
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	2a f0       	brmi	.+10     	; 0xe88 <__floatsisf+0x6c>
     e7e:	9a 95       	dec	r25
     e80:	66 0f       	add	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	88 1f       	adc	r24, r24
     e86:	da f7       	brpl	.-10     	; 0xe7e <__floatsisf+0x62>
     e88:	88 0f       	add	r24, r24
     e8a:	96 95       	lsr	r25
     e8c:	87 95       	ror	r24
     e8e:	97 f9       	bld	r25, 7
     e90:	08 95       	ret

00000e92 <__fp_cmp>:
     e92:	99 0f       	add	r25, r25
     e94:	00 08       	sbc	r0, r0
     e96:	55 0f       	add	r21, r21
     e98:	aa 0b       	sbc	r26, r26
     e9a:	e0 e8       	ldi	r30, 0x80	; 128
     e9c:	fe ef       	ldi	r31, 0xFE	; 254
     e9e:	16 16       	cp	r1, r22
     ea0:	17 06       	cpc	r1, r23
     ea2:	e8 07       	cpc	r30, r24
     ea4:	f9 07       	cpc	r31, r25
     ea6:	c0 f0       	brcs	.+48     	; 0xed8 <__fp_cmp+0x46>
     ea8:	12 16       	cp	r1, r18
     eaa:	13 06       	cpc	r1, r19
     eac:	e4 07       	cpc	r30, r20
     eae:	f5 07       	cpc	r31, r21
     eb0:	98 f0       	brcs	.+38     	; 0xed8 <__fp_cmp+0x46>
     eb2:	62 1b       	sub	r22, r18
     eb4:	73 0b       	sbc	r23, r19
     eb6:	84 0b       	sbc	r24, r20
     eb8:	95 0b       	sbc	r25, r21
     eba:	39 f4       	brne	.+14     	; 0xeca <__fp_cmp+0x38>
     ebc:	0a 26       	eor	r0, r26
     ebe:	61 f0       	breq	.+24     	; 0xed8 <__fp_cmp+0x46>
     ec0:	23 2b       	or	r18, r19
     ec2:	24 2b       	or	r18, r20
     ec4:	25 2b       	or	r18, r21
     ec6:	21 f4       	brne	.+8      	; 0xed0 <__fp_cmp+0x3e>
     ec8:	08 95       	ret
     eca:	0a 26       	eor	r0, r26
     ecc:	09 f4       	brne	.+2      	; 0xed0 <__fp_cmp+0x3e>
     ece:	a1 40       	sbci	r26, 0x01	; 1
     ed0:	a6 95       	lsr	r26
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	81 1d       	adc	r24, r1
     ed6:	81 1d       	adc	r24, r1
     ed8:	08 95       	ret

00000eda <__fp_inf>:
     eda:	97 f9       	bld	r25, 7
     edc:	9f 67       	ori	r25, 0x7F	; 127
     ede:	80 e8       	ldi	r24, 0x80	; 128
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	08 95       	ret

00000ee6 <__fp_nan>:
     ee6:	9f ef       	ldi	r25, 0xFF	; 255
     ee8:	80 ec       	ldi	r24, 0xC0	; 192
     eea:	08 95       	ret

00000eec <__fp_pscA>:
     eec:	00 24       	eor	r0, r0
     eee:	0a 94       	dec	r0
     ef0:	16 16       	cp	r1, r22
     ef2:	17 06       	cpc	r1, r23
     ef4:	18 06       	cpc	r1, r24
     ef6:	09 06       	cpc	r0, r25
     ef8:	08 95       	ret

00000efa <__fp_pscB>:
     efa:	00 24       	eor	r0, r0
     efc:	0a 94       	dec	r0
     efe:	12 16       	cp	r1, r18
     f00:	13 06       	cpc	r1, r19
     f02:	14 06       	cpc	r1, r20
     f04:	05 06       	cpc	r0, r21
     f06:	08 95       	ret

00000f08 <__fp_round>:
     f08:	09 2e       	mov	r0, r25
     f0a:	03 94       	inc	r0
     f0c:	00 0c       	add	r0, r0
     f0e:	11 f4       	brne	.+4      	; 0xf14 <__fp_round+0xc>
     f10:	88 23       	and	r24, r24
     f12:	52 f0       	brmi	.+20     	; 0xf28 <__fp_round+0x20>
     f14:	bb 0f       	add	r27, r27
     f16:	40 f4       	brcc	.+16     	; 0xf28 <__fp_round+0x20>
     f18:	bf 2b       	or	r27, r31
     f1a:	11 f4       	brne	.+4      	; 0xf20 <__fp_round+0x18>
     f1c:	60 ff       	sbrs	r22, 0
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <__fp_round+0x20>
     f20:	6f 5f       	subi	r22, 0xFF	; 255
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	8f 4f       	sbci	r24, 0xFF	; 255
     f26:	9f 4f       	sbci	r25, 0xFF	; 255
     f28:	08 95       	ret

00000f2a <__fp_split3>:
     f2a:	57 fd       	sbrc	r21, 7
     f2c:	90 58       	subi	r25, 0x80	; 128
     f2e:	44 0f       	add	r20, r20
     f30:	55 1f       	adc	r21, r21
     f32:	59 f0       	breq	.+22     	; 0xf4a <__fp_splitA+0x10>
     f34:	5f 3f       	cpi	r21, 0xFF	; 255
     f36:	71 f0       	breq	.+28     	; 0xf54 <__fp_splitA+0x1a>
     f38:	47 95       	ror	r20

00000f3a <__fp_splitA>:
     f3a:	88 0f       	add	r24, r24
     f3c:	97 fb       	bst	r25, 7
     f3e:	99 1f       	adc	r25, r25
     f40:	61 f0       	breq	.+24     	; 0xf5a <__fp_splitA+0x20>
     f42:	9f 3f       	cpi	r25, 0xFF	; 255
     f44:	79 f0       	breq	.+30     	; 0xf64 <__fp_splitA+0x2a>
     f46:	87 95       	ror	r24
     f48:	08 95       	ret
     f4a:	12 16       	cp	r1, r18
     f4c:	13 06       	cpc	r1, r19
     f4e:	14 06       	cpc	r1, r20
     f50:	55 1f       	adc	r21, r21
     f52:	f2 cf       	rjmp	.-28     	; 0xf38 <__fp_split3+0xe>
     f54:	46 95       	lsr	r20
     f56:	f1 df       	rcall	.-30     	; 0xf3a <__fp_splitA>
     f58:	08 c0       	rjmp	.+16     	; 0xf6a <__fp_splitA+0x30>
     f5a:	16 16       	cp	r1, r22
     f5c:	17 06       	cpc	r1, r23
     f5e:	18 06       	cpc	r1, r24
     f60:	99 1f       	adc	r25, r25
     f62:	f1 cf       	rjmp	.-30     	; 0xf46 <__fp_splitA+0xc>
     f64:	86 95       	lsr	r24
     f66:	71 05       	cpc	r23, r1
     f68:	61 05       	cpc	r22, r1
     f6a:	08 94       	sec
     f6c:	08 95       	ret

00000f6e <__fp_zero>:
     f6e:	e8 94       	clt

00000f70 <__fp_szero>:
     f70:	bb 27       	eor	r27, r27
     f72:	66 27       	eor	r22, r22
     f74:	77 27       	eor	r23, r23
     f76:	cb 01       	movw	r24, r22
     f78:	97 f9       	bld	r25, 7
     f7a:	08 95       	ret

00000f7c <__gesf2>:
     f7c:	8a df       	rcall	.-236    	; 0xe92 <__fp_cmp>
     f7e:	08 f4       	brcc	.+2      	; 0xf82 <__gesf2+0x6>
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	08 95       	ret

00000f84 <__mulsf3>:
     f84:	0b d0       	rcall	.+22     	; 0xf9c <__mulsf3x>
     f86:	c0 cf       	rjmp	.-128    	; 0xf08 <__fp_round>
     f88:	b1 df       	rcall	.-158    	; 0xeec <__fp_pscA>
     f8a:	28 f0       	brcs	.+10     	; 0xf96 <__mulsf3+0x12>
     f8c:	b6 df       	rcall	.-148    	; 0xefa <__fp_pscB>
     f8e:	18 f0       	brcs	.+6      	; 0xf96 <__mulsf3+0x12>
     f90:	95 23       	and	r25, r21
     f92:	09 f0       	breq	.+2      	; 0xf96 <__mulsf3+0x12>
     f94:	a2 cf       	rjmp	.-188    	; 0xeda <__fp_inf>
     f96:	a7 cf       	rjmp	.-178    	; 0xee6 <__fp_nan>
     f98:	11 24       	eor	r1, r1
     f9a:	ea cf       	rjmp	.-44     	; 0xf70 <__fp_szero>

00000f9c <__mulsf3x>:
     f9c:	c6 df       	rcall	.-116    	; 0xf2a <__fp_split3>
     f9e:	a0 f3       	brcs	.-24     	; 0xf88 <__mulsf3+0x4>

00000fa0 <__mulsf3_pse>:
     fa0:	95 9f       	mul	r25, r21
     fa2:	d1 f3       	breq	.-12     	; 0xf98 <__mulsf3+0x14>
     fa4:	95 0f       	add	r25, r21
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	55 1f       	adc	r21, r21
     faa:	62 9f       	mul	r22, r18
     fac:	f0 01       	movw	r30, r0
     fae:	72 9f       	mul	r23, r18
     fb0:	bb 27       	eor	r27, r27
     fb2:	f0 0d       	add	r31, r0
     fb4:	b1 1d       	adc	r27, r1
     fb6:	63 9f       	mul	r22, r19
     fb8:	aa 27       	eor	r26, r26
     fba:	f0 0d       	add	r31, r0
     fbc:	b1 1d       	adc	r27, r1
     fbe:	aa 1f       	adc	r26, r26
     fc0:	64 9f       	mul	r22, r20
     fc2:	66 27       	eor	r22, r22
     fc4:	b0 0d       	add	r27, r0
     fc6:	a1 1d       	adc	r26, r1
     fc8:	66 1f       	adc	r22, r22
     fca:	82 9f       	mul	r24, r18
     fcc:	22 27       	eor	r18, r18
     fce:	b0 0d       	add	r27, r0
     fd0:	a1 1d       	adc	r26, r1
     fd2:	62 1f       	adc	r22, r18
     fd4:	73 9f       	mul	r23, r19
     fd6:	b0 0d       	add	r27, r0
     fd8:	a1 1d       	adc	r26, r1
     fda:	62 1f       	adc	r22, r18
     fdc:	83 9f       	mul	r24, r19
     fde:	a0 0d       	add	r26, r0
     fe0:	61 1d       	adc	r22, r1
     fe2:	22 1f       	adc	r18, r18
     fe4:	74 9f       	mul	r23, r20
     fe6:	33 27       	eor	r19, r19
     fe8:	a0 0d       	add	r26, r0
     fea:	61 1d       	adc	r22, r1
     fec:	23 1f       	adc	r18, r19
     fee:	84 9f       	mul	r24, r20
     ff0:	60 0d       	add	r22, r0
     ff2:	21 1d       	adc	r18, r1
     ff4:	82 2f       	mov	r24, r18
     ff6:	76 2f       	mov	r23, r22
     ff8:	6a 2f       	mov	r22, r26
     ffa:	11 24       	eor	r1, r1
     ffc:	9f 57       	subi	r25, 0x7F	; 127
     ffe:	50 40       	sbci	r21, 0x00	; 0
    1000:	8a f0       	brmi	.+34     	; 0x1024 <__mulsf3_pse+0x84>
    1002:	e1 f0       	breq	.+56     	; 0x103c <__mulsf3_pse+0x9c>
    1004:	88 23       	and	r24, r24
    1006:	4a f0       	brmi	.+18     	; 0x101a <__mulsf3_pse+0x7a>
    1008:	ee 0f       	add	r30, r30
    100a:	ff 1f       	adc	r31, r31
    100c:	bb 1f       	adc	r27, r27
    100e:	66 1f       	adc	r22, r22
    1010:	77 1f       	adc	r23, r23
    1012:	88 1f       	adc	r24, r24
    1014:	91 50       	subi	r25, 0x01	; 1
    1016:	50 40       	sbci	r21, 0x00	; 0
    1018:	a9 f7       	brne	.-22     	; 0x1004 <__mulsf3_pse+0x64>
    101a:	9e 3f       	cpi	r25, 0xFE	; 254
    101c:	51 05       	cpc	r21, r1
    101e:	70 f0       	brcs	.+28     	; 0x103c <__mulsf3_pse+0x9c>
    1020:	5c cf       	rjmp	.-328    	; 0xeda <__fp_inf>
    1022:	a6 cf       	rjmp	.-180    	; 0xf70 <__fp_szero>
    1024:	5f 3f       	cpi	r21, 0xFF	; 255
    1026:	ec f3       	brlt	.-6      	; 0x1022 <__mulsf3_pse+0x82>
    1028:	98 3e       	cpi	r25, 0xE8	; 232
    102a:	dc f3       	brlt	.-10     	; 0x1022 <__mulsf3_pse+0x82>
    102c:	86 95       	lsr	r24
    102e:	77 95       	ror	r23
    1030:	67 95       	ror	r22
    1032:	b7 95       	ror	r27
    1034:	f7 95       	ror	r31
    1036:	e7 95       	ror	r30
    1038:	9f 5f       	subi	r25, 0xFF	; 255
    103a:	c1 f7       	brne	.-16     	; 0x102c <__mulsf3_pse+0x8c>
    103c:	fe 2b       	or	r31, r30
    103e:	88 0f       	add	r24, r24
    1040:	91 1d       	adc	r25, r1
    1042:	96 95       	lsr	r25
    1044:	87 95       	ror	r24
    1046:	97 f9       	bld	r25, 7
    1048:	08 95       	ret

0000104a <pow>:
    104a:	fa 01       	movw	r30, r20
    104c:	ee 0f       	add	r30, r30
    104e:	ff 1f       	adc	r31, r31
    1050:	30 96       	adiw	r30, 0x00	; 0
    1052:	21 05       	cpc	r18, r1
    1054:	31 05       	cpc	r19, r1
    1056:	99 f1       	breq	.+102    	; 0x10be <pow+0x74>
    1058:	61 15       	cp	r22, r1
    105a:	71 05       	cpc	r23, r1
    105c:	61 f4       	brne	.+24     	; 0x1076 <pow+0x2c>
    105e:	80 38       	cpi	r24, 0x80	; 128
    1060:	bf e3       	ldi	r27, 0x3F	; 63
    1062:	9b 07       	cpc	r25, r27
    1064:	49 f1       	breq	.+82     	; 0x10b8 <pow+0x6e>
    1066:	68 94       	set
    1068:	90 38       	cpi	r25, 0x80	; 128
    106a:	81 05       	cpc	r24, r1
    106c:	61 f0       	breq	.+24     	; 0x1086 <pow+0x3c>
    106e:	80 38       	cpi	r24, 0x80	; 128
    1070:	bf ef       	ldi	r27, 0xFF	; 255
    1072:	9b 07       	cpc	r25, r27
    1074:	41 f0       	breq	.+16     	; 0x1086 <pow+0x3c>
    1076:	99 23       	and	r25, r25
    1078:	42 f5       	brpl	.+80     	; 0x10ca <pow+0x80>
    107a:	ff 3f       	cpi	r31, 0xFF	; 255
    107c:	e1 05       	cpc	r30, r1
    107e:	31 05       	cpc	r19, r1
    1080:	21 05       	cpc	r18, r1
    1082:	11 f1       	breq	.+68     	; 0x10c8 <pow+0x7e>
    1084:	e8 94       	clt
    1086:	08 94       	sec
    1088:	e7 95       	ror	r30
    108a:	d9 01       	movw	r26, r18
    108c:	aa 23       	and	r26, r26
    108e:	29 f4       	brne	.+10     	; 0x109a <pow+0x50>
    1090:	ab 2f       	mov	r26, r27
    1092:	be 2f       	mov	r27, r30
    1094:	f8 5f       	subi	r31, 0xF8	; 248
    1096:	d0 f3       	brcs	.-12     	; 0x108c <pow+0x42>
    1098:	10 c0       	rjmp	.+32     	; 0x10ba <pow+0x70>
    109a:	ff 5f       	subi	r31, 0xFF	; 255
    109c:	70 f4       	brcc	.+28     	; 0x10ba <pow+0x70>
    109e:	a6 95       	lsr	r26
    10a0:	e0 f7       	brcc	.-8      	; 0x109a <pow+0x50>
    10a2:	f7 39       	cpi	r31, 0x97	; 151
    10a4:	50 f0       	brcs	.+20     	; 0x10ba <pow+0x70>
    10a6:	19 f0       	breq	.+6      	; 0x10ae <pow+0x64>
    10a8:	ff 3a       	cpi	r31, 0xAF	; 175
    10aa:	38 f4       	brcc	.+14     	; 0x10ba <pow+0x70>
    10ac:	9f 77       	andi	r25, 0x7F	; 127
    10ae:	9f 93       	push	r25
    10b0:	0c d0       	rcall	.+24     	; 0x10ca <pow+0x80>
    10b2:	0f 90       	pop	r0
    10b4:	07 fc       	sbrc	r0, 7
    10b6:	90 58       	subi	r25, 0x80	; 128
    10b8:	08 95       	ret
    10ba:	3e f0       	brts	.+14     	; 0x10ca <pow+0x80>
    10bc:	14 cf       	rjmp	.-472    	; 0xee6 <__fp_nan>
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	80 e8       	ldi	r24, 0x80	; 128
    10c4:	9f e3       	ldi	r25, 0x3F	; 63
    10c6:	08 95       	ret
    10c8:	4f e7       	ldi	r20, 0x7F	; 127
    10ca:	9f 77       	andi	r25, 0x7F	; 127
    10cc:	5f 93       	push	r21
    10ce:	4f 93       	push	r20
    10d0:	3f 93       	push	r19
    10d2:	2f 93       	push	r18
    10d4:	9e d0       	rcall	.+316    	; 0x1212 <log>
    10d6:	2f 91       	pop	r18
    10d8:	3f 91       	pop	r19
    10da:	4f 91       	pop	r20
    10dc:	5f 91       	pop	r21
    10de:	52 df       	rcall	.-348    	; 0xf84 <__mulsf3>
    10e0:	05 c0       	rjmp	.+10     	; 0x10ec <exp>
    10e2:	19 f4       	brne	.+6      	; 0x10ea <pow+0xa0>
    10e4:	0e f0       	brts	.+2      	; 0x10e8 <pow+0x9e>
    10e6:	f9 ce       	rjmp	.-526    	; 0xeda <__fp_inf>
    10e8:	42 cf       	rjmp	.-380    	; 0xf6e <__fp_zero>
    10ea:	fd ce       	rjmp	.-518    	; 0xee6 <__fp_nan>

000010ec <exp>:
    10ec:	26 df       	rcall	.-436    	; 0xf3a <__fp_splitA>
    10ee:	c8 f3       	brcs	.-14     	; 0x10e2 <pow+0x98>
    10f0:	96 38       	cpi	r25, 0x86	; 134
    10f2:	c0 f7       	brcc	.-16     	; 0x10e4 <pow+0x9a>
    10f4:	07 f8       	bld	r0, 7
    10f6:	0f 92       	push	r0
    10f8:	e8 94       	clt
    10fa:	2b e3       	ldi	r18, 0x3B	; 59
    10fc:	3a ea       	ldi	r19, 0xAA	; 170
    10fe:	48 eb       	ldi	r20, 0xB8	; 184
    1100:	5f e7       	ldi	r21, 0x7F	; 127
    1102:	4e df       	rcall	.-356    	; 0xfa0 <__mulsf3_pse>
    1104:	0f 92       	push	r0
    1106:	0f 92       	push	r0
    1108:	0f 92       	push	r0
    110a:	4d b7       	in	r20, 0x3d	; 61
    110c:	5e b7       	in	r21, 0x3e	; 62
    110e:	0f 92       	push	r0
    1110:	c0 d0       	rcall	.+384    	; 0x1292 <modf>
    1112:	ec e8       	ldi	r30, 0x8C	; 140
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	16 d0       	rcall	.+44     	; 0x1144 <__fp_powser>
    1118:	4f 91       	pop	r20
    111a:	5f 91       	pop	r21
    111c:	ef 91       	pop	r30
    111e:	ff 91       	pop	r31
    1120:	e5 95       	asr	r30
    1122:	ee 1f       	adc	r30, r30
    1124:	ff 1f       	adc	r31, r31
    1126:	49 f0       	breq	.+18     	; 0x113a <__stack+0x3b>
    1128:	fe 57       	subi	r31, 0x7E	; 126
    112a:	e0 68       	ori	r30, 0x80	; 128
    112c:	44 27       	eor	r20, r20
    112e:	ee 0f       	add	r30, r30
    1130:	44 1f       	adc	r20, r20
    1132:	fa 95       	dec	r31
    1134:	e1 f7       	brne	.-8      	; 0x112e <__stack+0x2f>
    1136:	41 95       	neg	r20
    1138:	55 0b       	sbc	r21, r21
    113a:	32 d0       	rcall	.+100    	; 0x11a0 <ldexp>
    113c:	0f 90       	pop	r0
    113e:	07 fe       	sbrs	r0, 7
    1140:	26 c0       	rjmp	.+76     	; 0x118e <inverse>
    1142:	08 95       	ret

00001144 <__fp_powser>:
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	1f 93       	push	r17
    114a:	0f 93       	push	r16
    114c:	ff 92       	push	r15
    114e:	ef 92       	push	r14
    1150:	df 92       	push	r13
    1152:	7b 01       	movw	r14, r22
    1154:	8c 01       	movw	r16, r24
    1156:	68 94       	set
    1158:	05 c0       	rjmp	.+10     	; 0x1164 <__fp_powser+0x20>
    115a:	da 2e       	mov	r13, r26
    115c:	ef 01       	movw	r28, r30
    115e:	1e df       	rcall	.-452    	; 0xf9c <__mulsf3x>
    1160:	fe 01       	movw	r30, r28
    1162:	e8 94       	clt
    1164:	a5 91       	lpm	r26, Z+
    1166:	25 91       	lpm	r18, Z+
    1168:	35 91       	lpm	r19, Z+
    116a:	45 91       	lpm	r20, Z+
    116c:	55 91       	lpm	r21, Z+
    116e:	ae f3       	brts	.-22     	; 0x115a <__fp_powser+0x16>
    1170:	ef 01       	movw	r28, r30
    1172:	d4 d0       	rcall	.+424    	; 0x131c <__addsf3x>
    1174:	fe 01       	movw	r30, r28
    1176:	97 01       	movw	r18, r14
    1178:	a8 01       	movw	r20, r16
    117a:	da 94       	dec	r13
    117c:	79 f7       	brne	.-34     	; 0x115c <__fp_powser+0x18>
    117e:	df 90       	pop	r13
    1180:	ef 90       	pop	r14
    1182:	ff 90       	pop	r15
    1184:	0f 91       	pop	r16
    1186:	1f 91       	pop	r17
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <inverse>:
    118e:	9b 01       	movw	r18, r22
    1190:	ac 01       	movw	r20, r24
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	80 e8       	ldi	r24, 0x80	; 128
    1198:	9f e3       	ldi	r25, 0x3F	; 63
    119a:	aa cd       	rjmp	.-1196   	; 0xcf0 <__divsf3>
    119c:	9e ce       	rjmp	.-708    	; 0xeda <__fp_inf>
    119e:	11 c1       	rjmp	.+546    	; 0x13c2 <__fp_mpack>

000011a0 <ldexp>:
    11a0:	cc de       	rcall	.-616    	; 0xf3a <__fp_splitA>
    11a2:	e8 f3       	brcs	.-6      	; 0x119e <inverse+0x10>
    11a4:	99 23       	and	r25, r25
    11a6:	d9 f3       	breq	.-10     	; 0x119e <inverse+0x10>
    11a8:	94 0f       	add	r25, r20
    11aa:	51 1d       	adc	r21, r1
    11ac:	bb f3       	brvs	.-18     	; 0x119c <inverse+0xe>
    11ae:	91 50       	subi	r25, 0x01	; 1
    11b0:	50 40       	sbci	r21, 0x00	; 0
    11b2:	94 f0       	brlt	.+36     	; 0x11d8 <ldexp+0x38>
    11b4:	59 f0       	breq	.+22     	; 0x11cc <ldexp+0x2c>
    11b6:	88 23       	and	r24, r24
    11b8:	32 f0       	brmi	.+12     	; 0x11c6 <ldexp+0x26>
    11ba:	66 0f       	add	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	88 1f       	adc	r24, r24
    11c0:	91 50       	subi	r25, 0x01	; 1
    11c2:	50 40       	sbci	r21, 0x00	; 0
    11c4:	c1 f7       	brne	.-16     	; 0x11b6 <ldexp+0x16>
    11c6:	9e 3f       	cpi	r25, 0xFE	; 254
    11c8:	51 05       	cpc	r21, r1
    11ca:	44 f7       	brge	.-48     	; 0x119c <inverse+0xe>
    11cc:	88 0f       	add	r24, r24
    11ce:	91 1d       	adc	r25, r1
    11d0:	96 95       	lsr	r25
    11d2:	87 95       	ror	r24
    11d4:	97 f9       	bld	r25, 7
    11d6:	08 95       	ret
    11d8:	5f 3f       	cpi	r21, 0xFF	; 255
    11da:	ac f0       	brlt	.+42     	; 0x1206 <ldexp+0x66>
    11dc:	98 3e       	cpi	r25, 0xE8	; 232
    11de:	9c f0       	brlt	.+38     	; 0x1206 <ldexp+0x66>
    11e0:	bb 27       	eor	r27, r27
    11e2:	86 95       	lsr	r24
    11e4:	77 95       	ror	r23
    11e6:	67 95       	ror	r22
    11e8:	b7 95       	ror	r27
    11ea:	08 f4       	brcc	.+2      	; 0x11ee <ldexp+0x4e>
    11ec:	b1 60       	ori	r27, 0x01	; 1
    11ee:	93 95       	inc	r25
    11f0:	c1 f7       	brne	.-16     	; 0x11e2 <ldexp+0x42>
    11f2:	bb 0f       	add	r27, r27
    11f4:	58 f7       	brcc	.-42     	; 0x11cc <ldexp+0x2c>
    11f6:	11 f4       	brne	.+4      	; 0x11fc <ldexp+0x5c>
    11f8:	60 ff       	sbrs	r22, 0
    11fa:	e8 cf       	rjmp	.-48     	; 0x11cc <ldexp+0x2c>
    11fc:	6f 5f       	subi	r22, 0xFF	; 255
    11fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1200:	8f 4f       	sbci	r24, 0xFF	; 255
    1202:	9f 4f       	sbci	r25, 0xFF	; 255
    1204:	e3 cf       	rjmp	.-58     	; 0x11cc <ldexp+0x2c>
    1206:	b4 ce       	rjmp	.-664    	; 0xf70 <__fp_szero>
    1208:	0e f0       	brts	.+2      	; 0x120c <ldexp+0x6c>
    120a:	db c0       	rjmp	.+438    	; 0x13c2 <__fp_mpack>
    120c:	6c ce       	rjmp	.-808    	; 0xee6 <__fp_nan>
    120e:	68 94       	set
    1210:	64 ce       	rjmp	.-824    	; 0xeda <__fp_inf>

00001212 <log>:
    1212:	93 de       	rcall	.-730    	; 0xf3a <__fp_splitA>
    1214:	c8 f3       	brcs	.-14     	; 0x1208 <ldexp+0x68>
    1216:	99 23       	and	r25, r25
    1218:	d1 f3       	breq	.-12     	; 0x120e <ldexp+0x6e>
    121a:	c6 f3       	brts	.-16     	; 0x120c <ldexp+0x6c>
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	1f 93       	push	r17
    1222:	0f 93       	push	r16
    1224:	ff 92       	push	r15
    1226:	c9 2f       	mov	r28, r25
    1228:	dd 27       	eor	r29, r29
    122a:	88 23       	and	r24, r24
    122c:	2a f0       	brmi	.+10     	; 0x1238 <log+0x26>
    122e:	21 97       	sbiw	r28, 0x01	; 1
    1230:	66 0f       	add	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	88 1f       	adc	r24, r24
    1236:	da f7       	brpl	.-10     	; 0x122e <log+0x1c>
    1238:	20 e0       	ldi	r18, 0x00	; 0
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	40 e8       	ldi	r20, 0x80	; 128
    123e:	5f eb       	ldi	r21, 0xBF	; 191
    1240:	9f e3       	ldi	r25, 0x3F	; 63
    1242:	88 39       	cpi	r24, 0x98	; 152
    1244:	20 f0       	brcs	.+8      	; 0x124e <log+0x3c>
    1246:	80 3e       	cpi	r24, 0xE0	; 224
    1248:	30 f0       	brcs	.+12     	; 0x1256 <log+0x44>
    124a:	21 96       	adiw	r28, 0x01	; 1
    124c:	8f 77       	andi	r24, 0x7F	; 127
    124e:	55 d0       	rcall	.+170    	; 0x12fa <__addsf3>
    1250:	e4 eb       	ldi	r30, 0xB4	; 180
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	03 c0       	rjmp	.+6      	; 0x125c <log+0x4a>
    1256:	51 d0       	rcall	.+162    	; 0x12fa <__addsf3>
    1258:	e1 ee       	ldi	r30, 0xE1	; 225
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	73 df       	rcall	.-282    	; 0x1144 <__fp_powser>
    125e:	8b 01       	movw	r16, r22
    1260:	be 01       	movw	r22, r28
    1262:	ec 01       	movw	r28, r24
    1264:	fb 2e       	mov	r15, r27
    1266:	6f 57       	subi	r22, 0x7F	; 127
    1268:	71 09       	sbc	r23, r1
    126a:	75 95       	asr	r23
    126c:	77 1f       	adc	r23, r23
    126e:	88 0b       	sbc	r24, r24
    1270:	99 0b       	sbc	r25, r25
    1272:	d4 dd       	rcall	.-1112   	; 0xe1c <__floatsisf>
    1274:	28 e1       	ldi	r18, 0x18	; 24
    1276:	32 e7       	ldi	r19, 0x72	; 114
    1278:	41 e3       	ldi	r20, 0x31	; 49
    127a:	5f e3       	ldi	r21, 0x3F	; 63
    127c:	8f de       	rcall	.-738    	; 0xf9c <__mulsf3x>
    127e:	af 2d       	mov	r26, r15
    1280:	98 01       	movw	r18, r16
    1282:	ae 01       	movw	r20, r28
    1284:	ff 90       	pop	r15
    1286:	0f 91       	pop	r16
    1288:	1f 91       	pop	r17
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	46 d0       	rcall	.+140    	; 0x131c <__addsf3x>
    1290:	3b ce       	rjmp	.-906    	; 0xf08 <__fp_round>

00001292 <modf>:
    1292:	fa 01       	movw	r30, r20
    1294:	dc 01       	movw	r26, r24
    1296:	aa 0f       	add	r26, r26
    1298:	bb 1f       	adc	r27, r27
    129a:	9b 01       	movw	r18, r22
    129c:	ac 01       	movw	r20, r24
    129e:	bf 57       	subi	r27, 0x7F	; 127
    12a0:	28 f4       	brcc	.+10     	; 0x12ac <modf+0x1a>
    12a2:	22 27       	eor	r18, r18
    12a4:	33 27       	eor	r19, r19
    12a6:	44 27       	eor	r20, r20
    12a8:	50 78       	andi	r21, 0x80	; 128
    12aa:	1f c0       	rjmp	.+62     	; 0x12ea <modf+0x58>
    12ac:	b7 51       	subi	r27, 0x17	; 23
    12ae:	88 f4       	brcc	.+34     	; 0x12d2 <modf+0x40>
    12b0:	ab 2f       	mov	r26, r27
    12b2:	00 24       	eor	r0, r0
    12b4:	46 95       	lsr	r20
    12b6:	37 95       	ror	r19
    12b8:	27 95       	ror	r18
    12ba:	01 1c       	adc	r0, r1
    12bc:	a3 95       	inc	r26
    12be:	d2 f3       	brmi	.-12     	; 0x12b4 <modf+0x22>
    12c0:	00 20       	and	r0, r0
    12c2:	69 f0       	breq	.+26     	; 0x12de <modf+0x4c>
    12c4:	22 0f       	add	r18, r18
    12c6:	33 1f       	adc	r19, r19
    12c8:	44 1f       	adc	r20, r20
    12ca:	b3 95       	inc	r27
    12cc:	da f3       	brmi	.-10     	; 0x12c4 <modf+0x32>
    12ce:	0d d0       	rcall	.+26     	; 0x12ea <modf+0x58>
    12d0:	13 c0       	rjmp	.+38     	; 0x12f8 <__subsf3>
    12d2:	61 30       	cpi	r22, 0x01	; 1
    12d4:	71 05       	cpc	r23, r1
    12d6:	a0 e8       	ldi	r26, 0x80	; 128
    12d8:	8a 07       	cpc	r24, r26
    12da:	b9 46       	sbci	r27, 0x69	; 105
    12dc:	30 f4       	brcc	.+12     	; 0x12ea <modf+0x58>
    12de:	9b 01       	movw	r18, r22
    12e0:	ac 01       	movw	r20, r24
    12e2:	66 27       	eor	r22, r22
    12e4:	77 27       	eor	r23, r23
    12e6:	88 27       	eor	r24, r24
    12e8:	90 78       	andi	r25, 0x80	; 128
    12ea:	30 96       	adiw	r30, 0x00	; 0
    12ec:	21 f0       	breq	.+8      	; 0x12f6 <modf+0x64>
    12ee:	20 83       	st	Z, r18
    12f0:	31 83       	std	Z+1, r19	; 0x01
    12f2:	42 83       	std	Z+2, r20	; 0x02
    12f4:	53 83       	std	Z+3, r21	; 0x03
    12f6:	08 95       	ret

000012f8 <__subsf3>:
    12f8:	50 58       	subi	r21, 0x80	; 128

000012fa <__addsf3>:
    12fa:	bb 27       	eor	r27, r27
    12fc:	aa 27       	eor	r26, r26
    12fe:	0e d0       	rcall	.+28     	; 0x131c <__addsf3x>
    1300:	03 ce       	rjmp	.-1018   	; 0xf08 <__fp_round>
    1302:	f4 dd       	rcall	.-1048   	; 0xeec <__fp_pscA>
    1304:	30 f0       	brcs	.+12     	; 0x1312 <__addsf3+0x18>
    1306:	f9 dd       	rcall	.-1038   	; 0xefa <__fp_pscB>
    1308:	20 f0       	brcs	.+8      	; 0x1312 <__addsf3+0x18>
    130a:	31 f4       	brne	.+12     	; 0x1318 <__addsf3+0x1e>
    130c:	9f 3f       	cpi	r25, 0xFF	; 255
    130e:	11 f4       	brne	.+4      	; 0x1314 <__addsf3+0x1a>
    1310:	1e f4       	brtc	.+6      	; 0x1318 <__addsf3+0x1e>
    1312:	e9 cd       	rjmp	.-1070   	; 0xee6 <__fp_nan>
    1314:	0e f4       	brtc	.+2      	; 0x1318 <__addsf3+0x1e>
    1316:	e0 95       	com	r30
    1318:	e7 fb       	bst	r30, 7
    131a:	df cd       	rjmp	.-1090   	; 0xeda <__fp_inf>

0000131c <__addsf3x>:
    131c:	e9 2f       	mov	r30, r25
    131e:	05 de       	rcall	.-1014   	; 0xf2a <__fp_split3>
    1320:	80 f3       	brcs	.-32     	; 0x1302 <__addsf3+0x8>
    1322:	ba 17       	cp	r27, r26
    1324:	62 07       	cpc	r22, r18
    1326:	73 07       	cpc	r23, r19
    1328:	84 07       	cpc	r24, r20
    132a:	95 07       	cpc	r25, r21
    132c:	18 f0       	brcs	.+6      	; 0x1334 <__addsf3x+0x18>
    132e:	71 f4       	brne	.+28     	; 0x134c <__addsf3x+0x30>
    1330:	9e f5       	brtc	.+102    	; 0x1398 <__addsf3x+0x7c>
    1332:	1d ce       	rjmp	.-966    	; 0xf6e <__fp_zero>
    1334:	0e f4       	brtc	.+2      	; 0x1338 <__addsf3x+0x1c>
    1336:	e0 95       	com	r30
    1338:	0b 2e       	mov	r0, r27
    133a:	ba 2f       	mov	r27, r26
    133c:	a0 2d       	mov	r26, r0
    133e:	0b 01       	movw	r0, r22
    1340:	b9 01       	movw	r22, r18
    1342:	90 01       	movw	r18, r0
    1344:	0c 01       	movw	r0, r24
    1346:	ca 01       	movw	r24, r20
    1348:	a0 01       	movw	r20, r0
    134a:	11 24       	eor	r1, r1
    134c:	ff 27       	eor	r31, r31
    134e:	59 1b       	sub	r21, r25
    1350:	99 f0       	breq	.+38     	; 0x1378 <__addsf3x+0x5c>
    1352:	59 3f       	cpi	r21, 0xF9	; 249
    1354:	50 f4       	brcc	.+20     	; 0x136a <__addsf3x+0x4e>
    1356:	50 3e       	cpi	r21, 0xE0	; 224
    1358:	68 f1       	brcs	.+90     	; 0x13b4 <__addsf3x+0x98>
    135a:	1a 16       	cp	r1, r26
    135c:	f0 40       	sbci	r31, 0x00	; 0
    135e:	a2 2f       	mov	r26, r18
    1360:	23 2f       	mov	r18, r19
    1362:	34 2f       	mov	r19, r20
    1364:	44 27       	eor	r20, r20
    1366:	58 5f       	subi	r21, 0xF8	; 248
    1368:	f3 cf       	rjmp	.-26     	; 0x1350 <__addsf3x+0x34>
    136a:	46 95       	lsr	r20
    136c:	37 95       	ror	r19
    136e:	27 95       	ror	r18
    1370:	a7 95       	ror	r26
    1372:	f0 40       	sbci	r31, 0x00	; 0
    1374:	53 95       	inc	r21
    1376:	c9 f7       	brne	.-14     	; 0x136a <__addsf3x+0x4e>
    1378:	7e f4       	brtc	.+30     	; 0x1398 <__addsf3x+0x7c>
    137a:	1f 16       	cp	r1, r31
    137c:	ba 0b       	sbc	r27, r26
    137e:	62 0b       	sbc	r22, r18
    1380:	73 0b       	sbc	r23, r19
    1382:	84 0b       	sbc	r24, r20
    1384:	ba f0       	brmi	.+46     	; 0x13b4 <__addsf3x+0x98>
    1386:	91 50       	subi	r25, 0x01	; 1
    1388:	a1 f0       	breq	.+40     	; 0x13b2 <__addsf3x+0x96>
    138a:	ff 0f       	add	r31, r31
    138c:	bb 1f       	adc	r27, r27
    138e:	66 1f       	adc	r22, r22
    1390:	77 1f       	adc	r23, r23
    1392:	88 1f       	adc	r24, r24
    1394:	c2 f7       	brpl	.-16     	; 0x1386 <__addsf3x+0x6a>
    1396:	0e c0       	rjmp	.+28     	; 0x13b4 <__addsf3x+0x98>
    1398:	ba 0f       	add	r27, r26
    139a:	62 1f       	adc	r22, r18
    139c:	73 1f       	adc	r23, r19
    139e:	84 1f       	adc	r24, r20
    13a0:	48 f4       	brcc	.+18     	; 0x13b4 <__addsf3x+0x98>
    13a2:	87 95       	ror	r24
    13a4:	77 95       	ror	r23
    13a6:	67 95       	ror	r22
    13a8:	b7 95       	ror	r27
    13aa:	f7 95       	ror	r31
    13ac:	9e 3f       	cpi	r25, 0xFE	; 254
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <__addsf3x+0x96>
    13b0:	b3 cf       	rjmp	.-154    	; 0x1318 <__addsf3+0x1e>
    13b2:	93 95       	inc	r25
    13b4:	88 0f       	add	r24, r24
    13b6:	08 f0       	brcs	.+2      	; 0x13ba <__addsf3x+0x9e>
    13b8:	99 27       	eor	r25, r25
    13ba:	ee 0f       	add	r30, r30
    13bc:	97 95       	ror	r25
    13be:	87 95       	ror	r24
    13c0:	08 95       	ret

000013c2 <__fp_mpack>:
    13c2:	9f 3f       	cpi	r25, 0xFF	; 255
    13c4:	31 f0       	breq	.+12     	; 0x13d2 <__fp_mpack_finite+0xc>

000013c6 <__fp_mpack_finite>:
    13c6:	91 50       	subi	r25, 0x01	; 1
    13c8:	20 f4       	brcc	.+8      	; 0x13d2 <__fp_mpack_finite+0xc>
    13ca:	87 95       	ror	r24
    13cc:	77 95       	ror	r23
    13ce:	67 95       	ror	r22
    13d0:	b7 95       	ror	r27
    13d2:	88 0f       	add	r24, r24
    13d4:	91 1d       	adc	r25, r1
    13d6:	96 95       	lsr	r25
    13d8:	87 95       	ror	r24
    13da:	97 f9       	bld	r25, 7
    13dc:	08 95       	ret

000013de <_exit>:
    13de:	f8 94       	cli

000013e0 <__stop_program>:
    13e0:	ff cf       	rjmp	.-2      	; 0x13e0 <__stop_program>
