
lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00002904  00002998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002904  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800118  00800118  000029b0  2**0
                  ALLOC
  3 .stab         00005fd0  00000000  00000000  000029b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001922  00000000  00000000  00008980  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000a2a2  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__ctors_end>
       4:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       8:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
       c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      10:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      14:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      18:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      1c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      20:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      24:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      28:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      2c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      30:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_12>
      34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      38:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      3c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      40:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__vector_16>
      44:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      48:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      4c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      50:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      58:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      5c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      60:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      68:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      6c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      70:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      7c:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      80:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      84:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      88:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__bad_interrupt>
      8c:	07 63       	ori	r16, 0x37	; 55
      8e:	42 36       	cpi	r20, 0x62	; 98
      90:	b7 9b       	sbis	0x16, 7	; 22
      92:	d8 a7       	std	Y+40, r29	; 0x28
      94:	1a 39       	cpi	r17, 0x9A	; 154
      96:	68 56       	subi	r22, 0x68	; 104
      98:	18 ae       	std	Y+56, r1	; 0x38
      9a:	ba ab       	std	Y+50, r27	; 0x32
      9c:	55 8c       	ldd	r5, Z+29	; 0x1d
      9e:	1d 3c       	cpi	r17, 0xCD	; 205
      a0:	b7 cc       	rjmp	.-1682   	; 0xfffffa10 <__eeprom_end+0xff7efa10>
      a2:	57 63       	ori	r21, 0x37	; 55
      a4:	bd 6d       	ori	r27, 0xDD	; 221
      a6:	ed fd       	.word	0xfded	; ????
      a8:	75 3e       	cpi	r23, 0xE5	; 229
      aa:	f6 17       	cp	r31, r22
      ac:	72 31       	cpi	r23, 0x12	; 18
      ae:	bf 00       	.word	0x00bf	; ????
      b0:	00 00       	nop
      b2:	80 3f       	cpi	r24, 0xF0	; 240
      b4:	08 00       	.word	0x0008	; ????
      b6:	00 00       	nop
      b8:	be 92       	st	-X, r11
      ba:	24 49       	sbci	r18, 0x94	; 148
      bc:	12 3e       	cpi	r17, 0xE2	; 226
      be:	ab aa       	std	Y+51, r10	; 0x33
      c0:	aa 2a       	or	r10, r26
      c2:	be cd       	rjmp	.-1156   	; 0xfffffc40 <__eeprom_end+0xff7efc40>
      c4:	cc cc       	rjmp	.-1640   	; 0xfffffa5e <__eeprom_end+0xff7efa5e>
      c6:	4c 3e       	cpi	r20, 0xEC	; 236
      c8:	00 00       	nop
      ca:	00 80       	ld	r0, Z
      cc:	be ab       	std	Y+54, r27	; 0x36
      ce:	aa aa       	std	Y+50, r10	; 0x32
      d0:	aa 3e       	cpi	r26, 0xEA	; 234
      d2:	00 00       	nop
      d4:	00 00       	nop
      d6:	bf 00       	.word	0x00bf	; ????
      d8:	00 00       	nop
      da:	80 3f       	cpi	r24, 0xF0	; 240
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 08       	sbc	r0, r0
      e2:	41 78       	andi	r20, 0x81	; 129
      e4:	d3 bb       	out	0x13, r29	; 19
      e6:	43 87       	std	Z+11, r20	; 0x0b
      e8:	d1 13       	cpse	r29, r17
      ea:	3d 19       	sub	r19, r13
      ec:	0e 3c       	cpi	r16, 0xCE	; 206
      ee:	c3 bd       	out	0x23, r28	; 35
      f0:	42 82       	std	Z+2, r4	; 0x02
      f2:	ad 2b       	or	r26, r29
      f4:	3e 68       	ori	r19, 0x8E	; 142
      f6:	ec 82       	std	Y+4, r14	; 0x04
      f8:	76 be       	out	0x36, r7	; 54
      fa:	d9 8f       	std	Y+25, r29	; 0x19
      fc:	e1 a9       	ldd	r30, Z+49	; 0x31
      fe:	3e 4c       	sbci	r19, 0xCE	; 206
     100:	80 ef       	ldi	r24, 0xF0	; 240
     102:	ff be       	out	0x3f, r15	; 63
     104:	01 c4       	rjmp	.+2050   	; 0x908 <clear_display+0x14>
     106:	ff 7f       	andi	r31, 0xFF	; 255
     108:	3f 00       	.word	0x003f	; ????
     10a:	00 00       	nop
	...

0000010e <__ctors_end>:
     10e:	11 24       	eor	r1, r1
     110:	1f be       	out	0x3f, r1	; 63
     112:	cf ef       	ldi	r28, 0xFF	; 255
     114:	d0 e1       	ldi	r29, 0x10	; 16
     116:	de bf       	out	0x3e, r29	; 62
     118:	cd bf       	out	0x3d, r28	; 61

0000011a <__do_copy_data>:
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	a0 e0       	ldi	r26, 0x00	; 0
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	e4 e0       	ldi	r30, 0x04	; 4
     122:	f9 e2       	ldi	r31, 0x29	; 41
     124:	00 e0       	ldi	r16, 0x00	; 0
     126:	0b bf       	out	0x3b, r16	; 59
     128:	02 c0       	rjmp	.+4      	; 0x12e <__do_copy_data+0x14>
     12a:	07 90       	elpm	r0, Z+
     12c:	0d 92       	st	X+, r0
     12e:	a8 31       	cpi	r26, 0x18	; 24
     130:	b1 07       	cpc	r27, r17
     132:	d9 f7       	brne	.-10     	; 0x12a <__do_copy_data+0x10>

00000134 <__do_clear_bss>:
     134:	11 e0       	ldi	r17, 0x01	; 1
     136:	a8 e1       	ldi	r26, 0x18	; 24
     138:	b1 e0       	ldi	r27, 0x01	; 1
     13a:	01 c0       	rjmp	.+2      	; 0x13e <.do_clear_bss_start>

0000013c <.do_clear_bss_loop>:
     13c:	1d 92       	st	X+, r1

0000013e <.do_clear_bss_start>:
     13e:	a2 37       	cpi	r26, 0x72	; 114
     140:	b1 07       	cpc	r27, r17
     142:	e1 f7       	brne	.-8      	; 0x13c <.do_clear_bss_loop>
     144:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <main>
     148:	0c 94 80 14 	jmp	0x2900	; 0x2900 <_exit>

0000014c <__bad_interrupt>:
     14c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000150 <send_lcd>:
// the return.
//
// This is a low-level function usually called by the other functions but may
// be called directly to provide more control, especially over the wait delay.
//
void send_lcd(uint8_t cmd_or_char, uint8_t byte, uint16_t wait){
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	6c 97       	sbiw	r28, 0x1c	; 28
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
     164:	89 8f       	std	Y+25, r24	; 0x19
     166:	6a 8f       	std	Y+26, r22	; 0x1a
     168:	5c 8f       	std	Y+28, r21	; 0x1c
     16a:	4b 8f       	std	Y+27, r20	; 0x1b
//TODO: uint32_t temp_long;
//TODO: temp_long = F_CPU;


#if SPI_MODE==1
  SPDR = (cmd_or_char)? 0x01 : 0x00;  //send the proper value for intent
     16c:	8f e2       	ldi	r24, 0x2F	; 47
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	21 e0       	ldi	r18, 0x01	; 1
     172:	39 8d       	ldd	r19, Y+25	; 0x19
     174:	33 23       	and	r19, r19
     176:	09 f4       	brne	.+2      	; 0x17a <send_lcd+0x2a>
     178:	20 e0       	ldi	r18, 0x00	; 0
     17a:	fc 01       	movw	r30, r24
     17c:	20 83       	st	Z, r18
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     17e:	00 00       	nop
     180:	8e e2       	ldi	r24, 0x2E	; 46
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	fc 01       	movw	r30, r24
     186:	80 81       	ld	r24, Z
     188:	88 23       	and	r24, r24
     18a:	d4 f7       	brge	.-12     	; 0x180 <send_lcd+0x30>
  SPDR = byte;                        //send payload
     18c:	8f e2       	ldi	r24, 0x2F	; 47
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	2a 8d       	ldd	r18, Y+26	; 0x1a
     192:	fc 01       	movw	r30, r24
     194:	20 83       	st	Z, r18
  while (bit_is_clear(SPSR,SPIF)){}   //wait till byte is sent out
     196:	00 00       	nop
     198:	8e e2       	ldi	r24, 0x2E	; 46
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	80 81       	ld	r24, Z
     1a0:	88 23       	and	r24, r24
     1a2:	d4 f7       	brge	.-12     	; 0x198 <send_lcd+0x48>
  strobe_lcd();                       //strobe the LCD enable pin
     1a4:	0e 94 61 04 	call	0x8c2	; 0x8c2 <strobe_lcd>
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	90 e0       	ldi	r25, 0x00	; 0
     1ac:	aa e7       	ldi	r26, 0x7A	; 122
     1ae:	b4 e4       	ldi	r27, 0x44	; 68
     1b0:	89 83       	std	Y+1, r24	; 0x01
     1b2:	9a 83       	std	Y+2, r25	; 0x02
     1b4:	ab 83       	std	Y+3, r26	; 0x03
     1b6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     1b8:	2b ea       	ldi	r18, 0xAB	; 171
     1ba:	3a ea       	ldi	r19, 0xAA	; 170
     1bc:	4a ea       	ldi	r20, 0xAA	; 170
     1be:	50 e4       	ldi	r21, 0x40	; 64
     1c0:	69 81       	ldd	r22, Y+1	; 0x01
     1c2:	7a 81       	ldd	r23, Y+2	; 0x02
     1c4:	8b 81       	ldd	r24, Y+3	; 0x03
     1c6:	9c 81       	ldd	r25, Y+4	; 0x04
     1c8:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
     1cc:	dc 01       	movw	r26, r24
     1ce:	cb 01       	movw	r24, r22
     1d0:	8d 83       	std	Y+5, r24	; 0x05
     1d2:	9e 83       	std	Y+6, r25	; 0x06
     1d4:	af 83       	std	Y+7, r26	; 0x07
     1d6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     1d8:	20 e0       	ldi	r18, 0x00	; 0
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	40 e8       	ldi	r20, 0x80	; 128
     1de:	5f e3       	ldi	r21, 0x3F	; 63
     1e0:	6d 81       	ldd	r22, Y+5	; 0x05
     1e2:	7e 81       	ldd	r23, Y+6	; 0x06
     1e4:	8f 81       	ldd	r24, Y+7	; 0x07
     1e6:	98 85       	ldd	r25, Y+8	; 0x08
     1e8:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__cmpsf2>
     1ec:	88 23       	and	r24, r24
     1ee:	1c f4       	brge	.+6      	; 0x1f6 <send_lcd+0xa6>
		__ticks = 1;
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	89 87       	std	Y+9, r24	; 0x09
     1f4:	91 c0       	rjmp	.+290    	; 0x318 <send_lcd+0x1c8>
	else if (__tmp > 255)
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	4f e7       	ldi	r20, 0x7F	; 127
     1fc:	53 e4       	ldi	r21, 0x43	; 67
     1fe:	6d 81       	ldd	r22, Y+5	; 0x05
     200:	7e 81       	ldd	r23, Y+6	; 0x06
     202:	8f 81       	ldd	r24, Y+7	; 0x07
     204:	98 85       	ldd	r25, Y+8	; 0x08
     206:	0e 94 46 12 	call	0x248c	; 0x248c <__gesf2>
     20a:	18 16       	cp	r1, r24
     20c:	0c f0       	brlt	.+2      	; 0x210 <send_lcd+0xc0>
     20e:	7b c0       	rjmp	.+246    	; 0x306 <send_lcd+0x1b6>
	{
		_delay_ms(__us / 1000.0);
     210:	20 e0       	ldi	r18, 0x00	; 0
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	4a e7       	ldi	r20, 0x7A	; 122
     216:	54 e4       	ldi	r21, 0x44	; 68
     218:	69 81       	ldd	r22, Y+1	; 0x01
     21a:	7a 81       	ldd	r23, Y+2	; 0x02
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	9c 81       	ldd	r25, Y+4	; 0x04
     220:	0e 94 00 11 	call	0x2200	; 0x2200 <__divsf3>
     224:	dc 01       	movw	r26, r24
     226:	cb 01       	movw	r24, r22
     228:	8a 87       	std	Y+10, r24	; 0x0a
     22a:	9b 87       	std	Y+11, r25	; 0x0b
     22c:	ac 87       	std	Y+12, r26	; 0x0c
     22e:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	4a e7       	ldi	r20, 0x7A	; 122
     236:	55 e4       	ldi	r21, 0x45	; 69
     238:	6a 85       	ldd	r22, Y+10	; 0x0a
     23a:	7b 85       	ldd	r23, Y+11	; 0x0b
     23c:	8c 85       	ldd	r24, Y+12	; 0x0c
     23e:	9d 85       	ldd	r25, Y+13	; 0x0d
     240:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
     244:	dc 01       	movw	r26, r24
     246:	cb 01       	movw	r24, r22
     248:	8e 87       	std	Y+14, r24	; 0x0e
     24a:	9f 87       	std	Y+15, r25	; 0x0f
     24c:	a8 8b       	std	Y+16, r26	; 0x10
     24e:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e8       	ldi	r20, 0x80	; 128
     256:	5f e3       	ldi	r21, 0x3F	; 63
     258:	6e 85       	ldd	r22, Y+14	; 0x0e
     25a:	7f 85       	ldd	r23, Y+15	; 0x0f
     25c:	88 89       	ldd	r24, Y+16	; 0x10
     25e:	99 89       	ldd	r25, Y+17	; 0x11
     260:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__cmpsf2>
     264:	88 23       	and	r24, r24
     266:	2c f4       	brge	.+10     	; 0x272 <send_lcd+0x122>
		__ticks = 1;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	9b 8b       	std	Y+19, r25	; 0x13
     26e:	8a 8b       	std	Y+18, r24	; 0x12
     270:	3f c0       	rjmp	.+126    	; 0x2f0 <send_lcd+0x1a0>
	else if (__tmp > 65535)
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	3f ef       	ldi	r19, 0xFF	; 255
     276:	4f e7       	ldi	r20, 0x7F	; 127
     278:	57 e4       	ldi	r21, 0x47	; 71
     27a:	6e 85       	ldd	r22, Y+14	; 0x0e
     27c:	7f 85       	ldd	r23, Y+15	; 0x0f
     27e:	88 89       	ldd	r24, Y+16	; 0x10
     280:	99 89       	ldd	r25, Y+17	; 0x11
     282:	0e 94 46 12 	call	0x248c	; 0x248c <__gesf2>
     286:	18 16       	cp	r1, r24
     288:	4c f5       	brge	.+82     	; 0x2dc <send_lcd+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     28a:	20 e0       	ldi	r18, 0x00	; 0
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	40 e2       	ldi	r20, 0x20	; 32
     290:	51 e4       	ldi	r21, 0x41	; 65
     292:	6a 85       	ldd	r22, Y+10	; 0x0a
     294:	7b 85       	ldd	r23, Y+11	; 0x0b
     296:	8c 85       	ldd	r24, Y+12	; 0x0c
     298:	9d 85       	ldd	r25, Y+13	; 0x0d
     29a:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
     29e:	dc 01       	movw	r26, r24
     2a0:	cb 01       	movw	r24, r22
     2a2:	bc 01       	movw	r22, r24
     2a4:	cd 01       	movw	r24, r26
     2a6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
     2aa:	dc 01       	movw	r26, r24
     2ac:	cb 01       	movw	r24, r22
     2ae:	9b 8b       	std	Y+19, r25	; 0x13
     2b0:	8a 8b       	std	Y+18, r24	; 0x12
     2b2:	0f c0       	rjmp	.+30     	; 0x2d2 <send_lcd+0x182>
     2b4:	80 e9       	ldi	r24, 0x90	; 144
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	9d 8b       	std	Y+21, r25	; 0x15
     2ba:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2bc:	8c 89       	ldd	r24, Y+20	; 0x14
     2be:	9d 89       	ldd	r25, Y+21	; 0x15
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <send_lcd+0x170>
     2c4:	9d 8b       	std	Y+21, r25	; 0x15
     2c6:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2c8:	8a 89       	ldd	r24, Y+18	; 0x12
     2ca:	9b 89       	ldd	r25, Y+19	; 0x13
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	9b 8b       	std	Y+19, r25	; 0x13
     2d0:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2d2:	8a 89       	ldd	r24, Y+18	; 0x12
     2d4:	9b 89       	ldd	r25, Y+19	; 0x13
     2d6:	00 97       	sbiw	r24, 0x00	; 0
     2d8:	69 f7       	brne	.-38     	; 0x2b4 <send_lcd+0x164>
     2da:	24 c0       	rjmp	.+72     	; 0x324 <send_lcd+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2dc:	6e 85       	ldd	r22, Y+14	; 0x0e
     2de:	7f 85       	ldd	r23, Y+15	; 0x0f
     2e0:	88 89       	ldd	r24, Y+16	; 0x10
     2e2:	99 89       	ldd	r25, Y+17	; 0x11
     2e4:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
     2e8:	dc 01       	movw	r26, r24
     2ea:	cb 01       	movw	r24, r22
     2ec:	9b 8b       	std	Y+19, r25	; 0x13
     2ee:	8a 8b       	std	Y+18, r24	; 0x12
     2f0:	8a 89       	ldd	r24, Y+18	; 0x12
     2f2:	9b 89       	ldd	r25, Y+19	; 0x13
     2f4:	9f 8b       	std	Y+23, r25	; 0x17
     2f6:	8e 8b       	std	Y+22, r24	; 0x16
     2f8:	8e 89       	ldd	r24, Y+22	; 0x16
     2fa:	9f 89       	ldd	r25, Y+23	; 0x17
     2fc:	01 97       	sbiw	r24, 0x01	; 1
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <send_lcd+0x1ac>
     300:	9f 8b       	std	Y+23, r25	; 0x17
     302:	8e 8b       	std	Y+22, r24	; 0x16
     304:	0f c0       	rjmp	.+30     	; 0x324 <send_lcd+0x1d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     306:	6d 81       	ldd	r22, Y+5	; 0x05
     308:	7e 81       	ldd	r23, Y+6	; 0x06
     30a:	8f 81       	ldd	r24, Y+7	; 0x07
     30c:	98 85       	ldd	r25, Y+8	; 0x08
     30e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	89 87       	std	Y+9, r24	; 0x09
     318:	89 85       	ldd	r24, Y+9	; 0x09
     31a:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     31c:	88 8d       	ldd	r24, Y+24	; 0x18
     31e:	8a 95       	dec	r24
     320:	f1 f7       	brne	.-4      	; 0x31e <send_lcd+0x1ce>
     322:	88 8f       	std	Y+24, r24	; 0x18
  LCD_PORT   = temp | (byte << 4);    //output lower nibble second
  strobe_lcd();                       //send to LCD
  if(cmd_or_char==0x01) {_delay_us(100);}  //typ 1ms for CMDs, 100uS for CHARs
  else                  {_delay_us(1000);}
#endif
}
     324:	6c 96       	adiw	r28, 0x1c	; 28
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	f8 94       	cli
     32a:	de bf       	out	0x3e, r29	; 62
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	cd bf       	out	0x3d, r28	; 61
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	08 95       	ret

00000336 <refresh_lcd>:
//
//
//TODO: why is the delay 40us before hte homeline2 and cursor home?
//TODO: integrate the unified lcd code here.

void refresh_lcd(char lcd_string_array[]) {
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	e2 97       	sbiw	r28, 0x32	; 50
     340:	0f b6       	in	r0, 0x3f	; 63
     342:	f8 94       	cli
     344:	de bf       	out	0x3e, r29	; 62
     346:	0f be       	out	0x3f, r0	; 63
     348:	cd bf       	out	0x3d, r28	; 61
     34a:	9a ab       	std	Y+50, r25	; 0x32
     34c:	89 ab       	std	Y+49, r24	; 0x31

    static uint8_t index=0;           // index into string array 

    SPDR = 0x01; //set SR for data
     34e:	8f e2       	ldi	r24, 0x2F	; 47
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	21 e0       	ldi	r18, 0x01	; 1
     354:	fc 01       	movw	r30, r24
     356:	20 83       	st	Z, r18
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
     358:	00 00       	nop
     35a:	8e e2       	ldi	r24, 0x2E	; 46
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	fc 01       	movw	r30, r24
     360:	80 81       	ld	r24, Z
     362:	88 23       	and	r24, r24
     364:	d4 f7       	brge	.-12     	; 0x35a <refresh_lcd+0x24>
    SPDR = lcd_string_array[index];
     366:	8f e2       	ldi	r24, 0x2F	; 47
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	20 91 2b 01 	lds	r18, 0x012B
     36e:	22 2f       	mov	r18, r18
     370:	30 e0       	ldi	r19, 0x00	; 0
     372:	49 a9       	ldd	r20, Y+49	; 0x31
     374:	5a a9       	ldd	r21, Y+50	; 0x32
     376:	24 0f       	add	r18, r20
     378:	35 1f       	adc	r19, r21
     37a:	f9 01       	movw	r30, r18
     37c:	20 81       	ld	r18, Z
     37e:	fc 01       	movw	r30, r24
     380:	20 83       	st	Z, r18
    while (!(SPSR & 0x80)) {}       //wait for SPI transfer to complete
     382:	00 00       	nop
     384:	8e e2       	ldi	r24, 0x2E	; 46
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	fc 01       	movw	r30, r24
     38a:	80 81       	ld	r24, Z
     38c:	88 23       	and	r24, r24
     38e:	d4 f7       	brge	.-12     	; 0x384 <refresh_lcd+0x4e>
    strobe_lcd();                   //write into LCD
     390:	0e 94 61 04 	call	0x8c2	; 0x8c2 <strobe_lcd>
    index++;                        //increment to next character
     394:	80 91 2b 01 	lds	r24, 0x012B
     398:	8f 5f       	subi	r24, 0xFF	; 255
     39a:	80 93 2b 01 	sts	0x012B, r24
    if(index == 16) {_delay_us(40); home_line2();}           //on to 2nd line, 1st position 
     39e:	80 91 2b 01 	lds	r24, 0x012B
     3a2:	80 31       	cpi	r24, 0x10	; 16
     3a4:	09 f0       	breq	.+2      	; 0x3a8 <refresh_lcd+0x72>
     3a6:	c0 c0       	rjmp	.+384    	; 0x528 <refresh_lcd+0x1f2>
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	a0 e2       	ldi	r26, 0x20	; 32
     3ae:	b2 e4       	ldi	r27, 0x42	; 66
     3b0:	89 83       	std	Y+1, r24	; 0x01
     3b2:	9a 83       	std	Y+2, r25	; 0x02
     3b4:	ab 83       	std	Y+3, r26	; 0x03
     3b6:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     3b8:	2b ea       	ldi	r18, 0xAB	; 171
     3ba:	3a ea       	ldi	r19, 0xAA	; 170
     3bc:	4a ea       	ldi	r20, 0xAA	; 170
     3be:	50 e4       	ldi	r21, 0x40	; 64
     3c0:	69 81       	ldd	r22, Y+1	; 0x01
     3c2:	7a 81       	ldd	r23, Y+2	; 0x02
     3c4:	8b 81       	ldd	r24, Y+3	; 0x03
     3c6:	9c 81       	ldd	r25, Y+4	; 0x04
     3c8:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
     3cc:	dc 01       	movw	r26, r24
     3ce:	cb 01       	movw	r24, r22
     3d0:	8d 83       	std	Y+5, r24	; 0x05
     3d2:	9e 83       	std	Y+6, r25	; 0x06
     3d4:	af 83       	std	Y+7, r26	; 0x07
     3d6:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e8       	ldi	r20, 0x80	; 128
     3de:	5f e3       	ldi	r21, 0x3F	; 63
     3e0:	6d 81       	ldd	r22, Y+5	; 0x05
     3e2:	7e 81       	ldd	r23, Y+6	; 0x06
     3e4:	8f 81       	ldd	r24, Y+7	; 0x07
     3e6:	98 85       	ldd	r25, Y+8	; 0x08
     3e8:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__cmpsf2>
     3ec:	88 23       	and	r24, r24
     3ee:	1c f4       	brge	.+6      	; 0x3f6 <refresh_lcd+0xc0>
		__ticks = 1;
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	89 87       	std	Y+9, r24	; 0x09
     3f4:	91 c0       	rjmp	.+290    	; 0x518 <refresh_lcd+0x1e2>
	else if (__tmp > 255)
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	4f e7       	ldi	r20, 0x7F	; 127
     3fc:	53 e4       	ldi	r21, 0x43	; 67
     3fe:	6d 81       	ldd	r22, Y+5	; 0x05
     400:	7e 81       	ldd	r23, Y+6	; 0x06
     402:	8f 81       	ldd	r24, Y+7	; 0x07
     404:	98 85       	ldd	r25, Y+8	; 0x08
     406:	0e 94 46 12 	call	0x248c	; 0x248c <__gesf2>
     40a:	18 16       	cp	r1, r24
     40c:	0c f0       	brlt	.+2      	; 0x410 <refresh_lcd+0xda>
     40e:	7b c0       	rjmp	.+246    	; 0x506 <refresh_lcd+0x1d0>
	{
		_delay_ms(__us / 1000.0);
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	4a e7       	ldi	r20, 0x7A	; 122
     416:	54 e4       	ldi	r21, 0x44	; 68
     418:	69 81       	ldd	r22, Y+1	; 0x01
     41a:	7a 81       	ldd	r23, Y+2	; 0x02
     41c:	8b 81       	ldd	r24, Y+3	; 0x03
     41e:	9c 81       	ldd	r25, Y+4	; 0x04
     420:	0e 94 00 11 	call	0x2200	; 0x2200 <__divsf3>
     424:	dc 01       	movw	r26, r24
     426:	cb 01       	movw	r24, r22
     428:	8a 87       	std	Y+10, r24	; 0x0a
     42a:	9b 87       	std	Y+11, r25	; 0x0b
     42c:	ac 87       	std	Y+12, r26	; 0x0c
     42e:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	4a e7       	ldi	r20, 0x7A	; 122
     436:	55 e4       	ldi	r21, 0x45	; 69
     438:	6a 85       	ldd	r22, Y+10	; 0x0a
     43a:	7b 85       	ldd	r23, Y+11	; 0x0b
     43c:	8c 85       	ldd	r24, Y+12	; 0x0c
     43e:	9d 85       	ldd	r25, Y+13	; 0x0d
     440:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
     444:	dc 01       	movw	r26, r24
     446:	cb 01       	movw	r24, r22
     448:	8e 87       	std	Y+14, r24	; 0x0e
     44a:	9f 87       	std	Y+15, r25	; 0x0f
     44c:	a8 8b       	std	Y+16, r26	; 0x10
     44e:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     450:	20 e0       	ldi	r18, 0x00	; 0
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e8       	ldi	r20, 0x80	; 128
     456:	5f e3       	ldi	r21, 0x3F	; 63
     458:	6e 85       	ldd	r22, Y+14	; 0x0e
     45a:	7f 85       	ldd	r23, Y+15	; 0x0f
     45c:	88 89       	ldd	r24, Y+16	; 0x10
     45e:	99 89       	ldd	r25, Y+17	; 0x11
     460:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__cmpsf2>
     464:	88 23       	and	r24, r24
     466:	2c f4       	brge	.+10     	; 0x472 <refresh_lcd+0x13c>
		__ticks = 1;
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	9b 8b       	std	Y+19, r25	; 0x13
     46e:	8a 8b       	std	Y+18, r24	; 0x12
     470:	3f c0       	rjmp	.+126    	; 0x4f0 <refresh_lcd+0x1ba>
	else if (__tmp > 65535)
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	3f ef       	ldi	r19, 0xFF	; 255
     476:	4f e7       	ldi	r20, 0x7F	; 127
     478:	57 e4       	ldi	r21, 0x47	; 71
     47a:	6e 85       	ldd	r22, Y+14	; 0x0e
     47c:	7f 85       	ldd	r23, Y+15	; 0x0f
     47e:	88 89       	ldd	r24, Y+16	; 0x10
     480:	99 89       	ldd	r25, Y+17	; 0x11
     482:	0e 94 46 12 	call	0x248c	; 0x248c <__gesf2>
     486:	18 16       	cp	r1, r24
     488:	4c f5       	brge	.+82     	; 0x4dc <refresh_lcd+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	40 e2       	ldi	r20, 0x20	; 32
     490:	51 e4       	ldi	r21, 0x41	; 65
     492:	6a 85       	ldd	r22, Y+10	; 0x0a
     494:	7b 85       	ldd	r23, Y+11	; 0x0b
     496:	8c 85       	ldd	r24, Y+12	; 0x0c
     498:	9d 85       	ldd	r25, Y+13	; 0x0d
     49a:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
     49e:	dc 01       	movw	r26, r24
     4a0:	cb 01       	movw	r24, r22
     4a2:	bc 01       	movw	r22, r24
     4a4:	cd 01       	movw	r24, r26
     4a6:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
     4aa:	dc 01       	movw	r26, r24
     4ac:	cb 01       	movw	r24, r22
     4ae:	9b 8b       	std	Y+19, r25	; 0x13
     4b0:	8a 8b       	std	Y+18, r24	; 0x12
     4b2:	0f c0       	rjmp	.+30     	; 0x4d2 <refresh_lcd+0x19c>
     4b4:	80 e9       	ldi	r24, 0x90	; 144
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	9d 8b       	std	Y+21, r25	; 0x15
     4ba:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4bc:	8c 89       	ldd	r24, Y+20	; 0x14
     4be:	9d 89       	ldd	r25, Y+21	; 0x15
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <refresh_lcd+0x18a>
     4c4:	9d 8b       	std	Y+21, r25	; 0x15
     4c6:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4c8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ca:	9b 89       	ldd	r25, Y+19	; 0x13
     4cc:	01 97       	sbiw	r24, 0x01	; 1
     4ce:	9b 8b       	std	Y+19, r25	; 0x13
     4d0:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4d2:	8a 89       	ldd	r24, Y+18	; 0x12
     4d4:	9b 89       	ldd	r25, Y+19	; 0x13
     4d6:	00 97       	sbiw	r24, 0x00	; 0
     4d8:	69 f7       	brne	.-38     	; 0x4b4 <refresh_lcd+0x17e>
     4da:	24 c0       	rjmp	.+72     	; 0x524 <refresh_lcd+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     4dc:	6e 85       	ldd	r22, Y+14	; 0x0e
     4de:	7f 85       	ldd	r23, Y+15	; 0x0f
     4e0:	88 89       	ldd	r24, Y+16	; 0x10
     4e2:	99 89       	ldd	r25, Y+17	; 0x11
     4e4:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
     4e8:	dc 01       	movw	r26, r24
     4ea:	cb 01       	movw	r24, r22
     4ec:	9b 8b       	std	Y+19, r25	; 0x13
     4ee:	8a 8b       	std	Y+18, r24	; 0x12
     4f0:	8a 89       	ldd	r24, Y+18	; 0x12
     4f2:	9b 89       	ldd	r25, Y+19	; 0x13
     4f4:	9f 8b       	std	Y+23, r25	; 0x17
     4f6:	8e 8b       	std	Y+22, r24	; 0x16
     4f8:	8e 89       	ldd	r24, Y+22	; 0x16
     4fa:	9f 89       	ldd	r25, Y+23	; 0x17
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <refresh_lcd+0x1c6>
     500:	9f 8b       	std	Y+23, r25	; 0x17
     502:	8e 8b       	std	Y+22, r24	; 0x16
     504:	0f c0       	rjmp	.+30     	; 0x524 <refresh_lcd+0x1ee>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     506:	6d 81       	ldd	r22, Y+5	; 0x05
     508:	7e 81       	ldd	r23, Y+6	; 0x06
     50a:	8f 81       	ldd	r24, Y+7	; 0x07
     50c:	98 85       	ldd	r25, Y+8	; 0x08
     50e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	89 87       	std	Y+9, r24	; 0x09
     518:	89 85       	ldd	r24, Y+9	; 0x09
     51a:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     51c:	88 8d       	ldd	r24, Y+24	; 0x18
     51e:	8a 95       	dec	r24
     520:	f1 f7       	brne	.-4      	; 0x51e <refresh_lcd+0x1e8>
     522:	88 8f       	std	Y+24, r24	; 0x18
     524:	0e 94 94 04 	call	0x928	; 0x928 <home_line2>
    if(index == 32) {_delay_us(40); cursor_home(); index=0;} //back to 1st line, 1st position
     528:	80 91 2b 01 	lds	r24, 0x012B
     52c:	80 32       	cpi	r24, 0x20	; 32
     52e:	09 f0       	breq	.+2      	; 0x532 <refresh_lcd+0x1fc>
     530:	c2 c0       	rjmp	.+388    	; 0x6b6 <refresh_lcd+0x380>
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	a0 e2       	ldi	r26, 0x20	; 32
     538:	b2 e4       	ldi	r27, 0x42	; 66
     53a:	89 8f       	std	Y+25, r24	; 0x19
     53c:	9a 8f       	std	Y+26, r25	; 0x1a
     53e:	ab 8f       	std	Y+27, r26	; 0x1b
     540:	bc 8f       	std	Y+28, r27	; 0x1c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     542:	2b ea       	ldi	r18, 0xAB	; 171
     544:	3a ea       	ldi	r19, 0xAA	; 170
     546:	4a ea       	ldi	r20, 0xAA	; 170
     548:	50 e4       	ldi	r21, 0x40	; 64
     54a:	69 8d       	ldd	r22, Y+25	; 0x19
     54c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     54e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     550:	9c 8d       	ldd	r25, Y+28	; 0x1c
     552:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
     556:	dc 01       	movw	r26, r24
     558:	cb 01       	movw	r24, r22
     55a:	8d 8f       	std	Y+29, r24	; 0x1d
     55c:	9e 8f       	std	Y+30, r25	; 0x1e
     55e:	af 8f       	std	Y+31, r26	; 0x1f
     560:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	40 e8       	ldi	r20, 0x80	; 128
     568:	5f e3       	ldi	r21, 0x3F	; 63
     56a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     56c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     56e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     570:	98 a1       	ldd	r25, Y+32	; 0x20
     572:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__cmpsf2>
     576:	88 23       	and	r24, r24
     578:	1c f4       	brge	.+6      	; 0x580 <refresh_lcd+0x24a>
		__ticks = 1;
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	89 a3       	std	Y+33, r24	; 0x21
     57e:	91 c0       	rjmp	.+290    	; 0x6a2 <refresh_lcd+0x36c>
	else if (__tmp > 255)
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	4f e7       	ldi	r20, 0x7F	; 127
     586:	53 e4       	ldi	r21, 0x43	; 67
     588:	6d 8d       	ldd	r22, Y+29	; 0x1d
     58a:	7e 8d       	ldd	r23, Y+30	; 0x1e
     58c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     58e:	98 a1       	ldd	r25, Y+32	; 0x20
     590:	0e 94 46 12 	call	0x248c	; 0x248c <__gesf2>
     594:	18 16       	cp	r1, r24
     596:	0c f0       	brlt	.+2      	; 0x59a <refresh_lcd+0x264>
     598:	7b c0       	rjmp	.+246    	; 0x690 <refresh_lcd+0x35a>
	{
		_delay_ms(__us / 1000.0);
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	4a e7       	ldi	r20, 0x7A	; 122
     5a0:	54 e4       	ldi	r21, 0x44	; 68
     5a2:	69 8d       	ldd	r22, Y+25	; 0x19
     5a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     5a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     5a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     5aa:	0e 94 00 11 	call	0x2200	; 0x2200 <__divsf3>
     5ae:	dc 01       	movw	r26, r24
     5b0:	cb 01       	movw	r24, r22
     5b2:	8a a3       	std	Y+34, r24	; 0x22
     5b4:	9b a3       	std	Y+35, r25	; 0x23
     5b6:	ac a3       	std	Y+36, r26	; 0x24
     5b8:	bd a3       	std	Y+37, r27	; 0x25
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	4a e7       	ldi	r20, 0x7A	; 122
     5c0:	55 e4       	ldi	r21, 0x45	; 69
     5c2:	6a a1       	ldd	r22, Y+34	; 0x22
     5c4:	7b a1       	ldd	r23, Y+35	; 0x23
     5c6:	8c a1       	ldd	r24, Y+36	; 0x24
     5c8:	9d a1       	ldd	r25, Y+37	; 0x25
     5ca:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
     5ce:	dc 01       	movw	r26, r24
     5d0:	cb 01       	movw	r24, r22
     5d2:	8e a3       	std	Y+38, r24	; 0x26
     5d4:	9f a3       	std	Y+39, r25	; 0x27
     5d6:	a8 a7       	std	Y+40, r26	; 0x28
     5d8:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	40 e8       	ldi	r20, 0x80	; 128
     5e0:	5f e3       	ldi	r21, 0x3F	; 63
     5e2:	6e a1       	ldd	r22, Y+38	; 0x26
     5e4:	7f a1       	ldd	r23, Y+39	; 0x27
     5e6:	88 a5       	ldd	r24, Y+40	; 0x28
     5e8:	99 a5       	ldd	r25, Y+41	; 0x29
     5ea:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__cmpsf2>
     5ee:	88 23       	and	r24, r24
     5f0:	2c f4       	brge	.+10     	; 0x5fc <refresh_lcd+0x2c6>
		__ticks = 1;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	9b a7       	std	Y+43, r25	; 0x2b
     5f8:	8a a7       	std	Y+42, r24	; 0x2a
     5fa:	3f c0       	rjmp	.+126    	; 0x67a <refresh_lcd+0x344>
	else if (__tmp > 65535)
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	3f ef       	ldi	r19, 0xFF	; 255
     600:	4f e7       	ldi	r20, 0x7F	; 127
     602:	57 e4       	ldi	r21, 0x47	; 71
     604:	6e a1       	ldd	r22, Y+38	; 0x26
     606:	7f a1       	ldd	r23, Y+39	; 0x27
     608:	88 a5       	ldd	r24, Y+40	; 0x28
     60a:	99 a5       	ldd	r25, Y+41	; 0x29
     60c:	0e 94 46 12 	call	0x248c	; 0x248c <__gesf2>
     610:	18 16       	cp	r1, r24
     612:	4c f5       	brge	.+82     	; 0x666 <refresh_lcd+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	40 e2       	ldi	r20, 0x20	; 32
     61a:	51 e4       	ldi	r21, 0x41	; 65
     61c:	6a a1       	ldd	r22, Y+34	; 0x22
     61e:	7b a1       	ldd	r23, Y+35	; 0x23
     620:	8c a1       	ldd	r24, Y+36	; 0x24
     622:	9d a1       	ldd	r25, Y+37	; 0x25
     624:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
     628:	dc 01       	movw	r26, r24
     62a:	cb 01       	movw	r24, r22
     62c:	bc 01       	movw	r22, r24
     62e:	cd 01       	movw	r24, r26
     630:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
     634:	dc 01       	movw	r26, r24
     636:	cb 01       	movw	r24, r22
     638:	9b a7       	std	Y+43, r25	; 0x2b
     63a:	8a a7       	std	Y+42, r24	; 0x2a
     63c:	0f c0       	rjmp	.+30     	; 0x65c <refresh_lcd+0x326>
     63e:	80 e9       	ldi	r24, 0x90	; 144
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	9d a7       	std	Y+45, r25	; 0x2d
     644:	8c a7       	std	Y+44, r24	; 0x2c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     646:	8c a5       	ldd	r24, Y+44	; 0x2c
     648:	9d a5       	ldd	r25, Y+45	; 0x2d
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	f1 f7       	brne	.-4      	; 0x64a <refresh_lcd+0x314>
     64e:	9d a7       	std	Y+45, r25	; 0x2d
     650:	8c a7       	std	Y+44, r24	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     652:	8a a5       	ldd	r24, Y+42	; 0x2a
     654:	9b a5       	ldd	r25, Y+43	; 0x2b
     656:	01 97       	sbiw	r24, 0x01	; 1
     658:	9b a7       	std	Y+43, r25	; 0x2b
     65a:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     65c:	8a a5       	ldd	r24, Y+42	; 0x2a
     65e:	9b a5       	ldd	r25, Y+43	; 0x2b
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	69 f7       	brne	.-38     	; 0x63e <refresh_lcd+0x308>
     664:	24 c0       	rjmp	.+72     	; 0x6ae <refresh_lcd+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     666:	6e a1       	ldd	r22, Y+38	; 0x26
     668:	7f a1       	ldd	r23, Y+39	; 0x27
     66a:	88 a5       	ldd	r24, Y+40	; 0x28
     66c:	99 a5       	ldd	r25, Y+41	; 0x29
     66e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
     672:	dc 01       	movw	r26, r24
     674:	cb 01       	movw	r24, r22
     676:	9b a7       	std	Y+43, r25	; 0x2b
     678:	8a a7       	std	Y+42, r24	; 0x2a
     67a:	8a a5       	ldd	r24, Y+42	; 0x2a
     67c:	9b a5       	ldd	r25, Y+43	; 0x2b
     67e:	9f a7       	std	Y+47, r25	; 0x2f
     680:	8e a7       	std	Y+46, r24	; 0x2e
     682:	8e a5       	ldd	r24, Y+46	; 0x2e
     684:	9f a5       	ldd	r25, Y+47	; 0x2f
     686:	01 97       	sbiw	r24, 0x01	; 1
     688:	f1 f7       	brne	.-4      	; 0x686 <refresh_lcd+0x350>
     68a:	9f a7       	std	Y+47, r25	; 0x2f
     68c:	8e a7       	std	Y+46, r24	; 0x2e
     68e:	0f c0       	rjmp	.+30     	; 0x6ae <refresh_lcd+0x378>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     690:	6d 8d       	ldd	r22, Y+29	; 0x1d
     692:	7e 8d       	ldd	r23, Y+30	; 0x1e
     694:	8f 8d       	ldd	r24, Y+31	; 0x1f
     696:	98 a1       	ldd	r25, Y+32	; 0x20
     698:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
     69c:	dc 01       	movw	r26, r24
     69e:	cb 01       	movw	r24, r22
     6a0:	89 a3       	std	Y+33, r24	; 0x21
     6a2:	89 a1       	ldd	r24, Y+33	; 0x21
     6a4:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6a6:	88 a9       	ldd	r24, Y+48	; 0x30
     6a8:	8a 95       	dec	r24
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <refresh_lcd+0x372>
     6ac:	88 ab       	std	Y+48, r24	; 0x30
     6ae:	0e 94 87 04 	call	0x90e	; 0x90e <cursor_home>
     6b2:	10 92 2b 01 	sts	0x012B, r1
}//refresh_lcd
     6b6:	e2 96       	adiw	r28, 0x32	; 50
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <set_custom_character>:
//addresses are 0x00 - 0x07 for a total of 8 custom characters (0x08 - 0x0F 
//map to 0x00 - 0x07) to display a custom character just refer to it's 
//address, such as send_lcd(CHAR_BYTE, 0x01, 1) or it can be insteretd into a string 
//via a forward slash escape as in string2lcd("this is my music note \1")

void set_custom_character(uint8_t data[], uint8_t address){
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	00 d0       	rcall	.+0      	; 0x6ce <set_custom_character+0x6>
     6ce:	00 d0       	rcall	.+0      	; 0x6d0 <set_custom_character+0x8>
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	9b 83       	std	Y+3, r25	; 0x03
     6d6:	8a 83       	std	Y+2, r24	; 0x02
     6d8:	6c 83       	std	Y+4, r22	; 0x04
    uint8_t i;
    send_lcd(CMD_BYTE, 0x40 + (address << 3), 1000);  //only needs 40uS!
     6da:	8c 81       	ldd	r24, Y+4	; 0x04
     6dc:	88 0f       	add	r24, r24
     6de:	88 0f       	add	r24, r24
     6e0:	88 0f       	add	r24, r24
     6e2:	80 5c       	subi	r24, 0xC0	; 192
     6e4:	48 ee       	ldi	r20, 0xE8	; 232
     6e6:	53 e0       	ldi	r21, 0x03	; 3
     6e8:	68 2f       	mov	r22, r24
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
    for(i=0; i<8; i++){send_lcd(CHAR_BYTE, data[i], 100);}
     6f0:	19 82       	std	Y+1, r1	; 0x01
     6f2:	12 c0       	rjmp	.+36     	; 0x718 <set_custom_character+0x50>
     6f4:	89 81       	ldd	r24, Y+1	; 0x01
     6f6:	88 2f       	mov	r24, r24
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	2a 81       	ldd	r18, Y+2	; 0x02
     6fc:	3b 81       	ldd	r19, Y+3	; 0x03
     6fe:	82 0f       	add	r24, r18
     700:	93 1f       	adc	r25, r19
     702:	fc 01       	movw	r30, r24
     704:	80 81       	ld	r24, Z
     706:	44 e6       	ldi	r20, 0x64	; 100
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	68 2f       	mov	r22, r24
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	8f 5f       	subi	r24, 0xFF	; 255
     716:	89 83       	std	Y+1, r24	; 0x01
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	88 30       	cpi	r24, 0x08	; 8
     71c:	58 f3       	brcs	.-42     	; 0x6f4 <set_custom_character+0x2c>
}
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	df 91       	pop	r29
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <set_cursor>:
//-----------------------------------------------------------------------------
//                          set_cursor 
//
//Sets the cursor to an arbitrary potition on the screen, row is either 1 or 2
//col is a number form 0-15, counting from left to right
void set_cursor(uint8_t row, uint8_t col){
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	00 d0       	rcall	.+0      	; 0x732 <set_cursor+0x6>
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	89 83       	std	Y+1, r24	; 0x01
     738:	6a 83       	std	Y+2, r22	; 0x02
    send_lcd(CMD_BYTE, 0x80 + col + ((row-1)*0x40), 1000);
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	88 2f       	mov	r24, r24
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	01 97       	sbiw	r24, 0x01	; 1
     742:	98 2f       	mov	r25, r24
     744:	92 95       	swap	r25
     746:	99 0f       	add	r25, r25
     748:	99 0f       	add	r25, r25
     74a:	90 7c       	andi	r25, 0xC0	; 192
     74c:	8a 81       	ldd	r24, Y+2	; 0x02
     74e:	89 0f       	add	r24, r25
     750:	80 58       	subi	r24, 0x80	; 128
     752:	48 ee       	ldi	r20, 0xE8	; 232
     754:	53 e0       	ldi	r21, 0x03	; 3
     756:	68 2f       	mov	r22, r24
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
}
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <uint2lcd>:
//Takes a 8bit unsigned and displays it in base ten on the LCD. Leading 0's are 
//not displayed.  
//TODO: optimize by removing the mod operators
//TODO: does not display the number zero!  (FIXED 8.30.2014)
//
void uint2lcd(uint8_t number){
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	1f 92       	push	r1
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	89 83       	std	Y+1, r24	; 0x01
    if  (number == 0)  {send_lcd(CHAR_BYTE, 0x30                , 100); }
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	88 23       	and	r24, r24
     778:	39 f4       	brne	.+14     	; 0x788 <uint2lcd+0x20>
     77a:	44 e6       	ldi	r20, 0x64	; 100
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	60 e3       	ldi	r22, 0x30	; 48
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
     786:	4a c0       	rjmp	.+148    	; 0x81c <uint2lcd+0xb4>
    else{
      if(number >= 100){send_lcd(CHAR_BYTE, 0x30+number/100     , 100); }
     788:	89 81       	ldd	r24, Y+1	; 0x01
     78a:	84 36       	cpi	r24, 0x64	; 100
     78c:	70 f0       	brcs	.+28     	; 0x7aa <uint2lcd+0x42>
     78e:	99 81       	ldd	r25, Y+1	; 0x01
     790:	89 e2       	ldi	r24, 0x29	; 41
     792:	98 9f       	mul	r25, r24
     794:	81 2d       	mov	r24, r1
     796:	11 24       	eor	r1, r1
     798:	82 95       	swap	r24
     79a:	8f 70       	andi	r24, 0x0F	; 15
     79c:	80 5d       	subi	r24, 0xD0	; 208
     79e:	44 e6       	ldi	r20, 0x64	; 100
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	68 2f       	mov	r22, r24
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
      if(number >= 10) {send_lcd(CHAR_BYTE, 0x30+(number%100)/10, 100); }
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
     7ac:	8a 30       	cpi	r24, 0x0A	; 10
     7ae:	e0 f0       	brcs	.+56     	; 0x7e8 <uint2lcd+0x80>
     7b0:	99 81       	ldd	r25, Y+1	; 0x01
     7b2:	89 e2       	ldi	r24, 0x29	; 41
     7b4:	98 9f       	mul	r25, r24
     7b6:	81 2d       	mov	r24, r1
     7b8:	11 24       	eor	r1, r1
     7ba:	82 95       	swap	r24
     7bc:	8f 70       	andi	r24, 0x0F	; 15
     7be:	24 e6       	ldi	r18, 0x64	; 100
     7c0:	82 9f       	mul	r24, r18
     7c2:	80 2d       	mov	r24, r0
     7c4:	11 24       	eor	r1, r1
     7c6:	29 2f       	mov	r18, r25
     7c8:	28 1b       	sub	r18, r24
     7ca:	82 2f       	mov	r24, r18
     7cc:	9d ec       	ldi	r25, 0xCD	; 205
     7ce:	89 9f       	mul	r24, r25
     7d0:	81 2d       	mov	r24, r1
     7d2:	11 24       	eor	r1, r1
     7d4:	86 95       	lsr	r24
     7d6:	86 95       	lsr	r24
     7d8:	86 95       	lsr	r24
     7da:	80 5d       	subi	r24, 0xD0	; 208
     7dc:	44 e6       	ldi	r20, 0x64	; 100
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	68 2f       	mov	r22, r24
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
      if(number >= 1)  {send_lcd(CHAR_BYTE, 0x30+(number%10)    , 100); }
     7e8:	89 81       	ldd	r24, Y+1	; 0x01
     7ea:	88 23       	and	r24, r24
     7ec:	b9 f0       	breq	.+46     	; 0x81c <uint2lcd+0xb4>
     7ee:	99 81       	ldd	r25, Y+1	; 0x01
     7f0:	8d ec       	ldi	r24, 0xCD	; 205
     7f2:	98 9f       	mul	r25, r24
     7f4:	81 2d       	mov	r24, r1
     7f6:	11 24       	eor	r1, r1
     7f8:	86 95       	lsr	r24
     7fa:	86 95       	lsr	r24
     7fc:	86 95       	lsr	r24
     7fe:	88 0f       	add	r24, r24
     800:	28 2f       	mov	r18, r24
     802:	22 0f       	add	r18, r18
     804:	22 0f       	add	r18, r18
     806:	82 0f       	add	r24, r18
     808:	29 2f       	mov	r18, r25
     80a:	28 1b       	sub	r18, r24
     80c:	82 2f       	mov	r24, r18
     80e:	80 5d       	subi	r24, 0xD0	; 208
     810:	44 e6       	ldi	r20, 0x64	; 100
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	68 2f       	mov	r22, r24
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
    }
}
     81c:	0f 90       	pop	r0
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <int2lcd>:
//                          int2lcd  
//
//Takes a 8bit signed and displays it in base ten on the LCD. Leading 0's are 
//not displayed.
//
void int2lcd(int8_t number){
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	1f 92       	push	r1
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	89 83       	std	Y+1, r24	; 0x01
    if(number < 0){send_lcd(CHAR_BYTE, '-', 100); uint2lcd(~number+1);}    //take 2's complement of number and display
     830:	89 81       	ldd	r24, Y+1	; 0x01
     832:	88 23       	and	r24, r24
     834:	5c f4       	brge	.+22     	; 0x84c <int2lcd+0x28>
     836:	44 e6       	ldi	r20, 0x64	; 100
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	6d e2       	ldi	r22, 0x2D	; 45
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	81 95       	neg	r24
     846:	0e 94 b4 03 	call	0x768	; 0x768 <uint2lcd>
     84a:	03 c0       	rjmp	.+6      	; 0x852 <int2lcd+0x2e>
    else                                    {uint2lcd(number);}
     84c:	89 81       	ldd	r24, Y+1	; 0x01
     84e:	0e 94 b4 03 	call	0x768	; 0x768 <uint2lcd>
}
     852:	0f 90       	pop	r0
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <cursor_on>:

//-----------------------------------------------------------------------------
//                          cursor_on
//
//Sets the cursor to display
void cursor_on(void){send_lcd(CMD_BYTE, 0x0E, 1000);}
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	48 ee       	ldi	r20, 0xE8	; 232
     864:	53 e0       	ldi	r21, 0x03	; 3
     866:	6e e0       	ldi	r22, 0x0E	; 14
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
     86e:	df 91       	pop	r29
     870:	cf 91       	pop	r28
     872:	08 95       	ret

00000874 <cursor_off>:

//-----------------------------------------------------------------------------
//                          cursor_off
//
//Turns the cursor display off
void cursor_off(void){send_lcd(CMD_BYTE, 0x0C, 1000);}
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	48 ee       	ldi	r20, 0xE8	; 232
     87e:	53 e0       	ldi	r21, 0x03	; 3
     880:	6c e0       	ldi	r22, 0x0C	; 12
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <shift_right>:

//-----------------------------------------------------------------------------
//                          shift_right 
//
//shifts the display right one character
void shift_right(void){send_lcd(CMD_BYTE, 0x1E, 1000);}
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	48 ee       	ldi	r20, 0xE8	; 232
     898:	53 e0       	ldi	r21, 0x03	; 3
     89a:	6e e1       	ldi	r22, 0x1E	; 30
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <shift_left>:

//-----------------------------------------------------------------------------
//                          shift_left  
//
//shifts the display left one character
void shift_left(void){send_lcd(CMD_BYTE, 0x18, 1000);}
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	48 ee       	ldi	r20, 0xE8	; 232
     8b2:	53 e0       	ldi	r21, 0x03	; 3
     8b4:	68 e1       	ldi	r22, 0x18	; 24
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	08 95       	ret

000008c2 <strobe_lcd>:

//-----------------------------------------------------------------------------
//                          strobe_lcd  
//
void strobe_lcd(void){ 
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
#if SPI_MODE==1
 PORTF |=  0x08; PORTF &= ~0x08; //toggle port F bit 3, LCD strobe trigger
     8ca:	82 e6       	ldi	r24, 0x62	; 98
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	22 e6       	ldi	r18, 0x62	; 98
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	f9 01       	movw	r30, r18
     8d4:	20 81       	ld	r18, Z
     8d6:	28 60       	ori	r18, 0x08	; 8
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
     8dc:	82 e6       	ldi	r24, 0x62	; 98
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	22 e6       	ldi	r18, 0x62	; 98
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	f9 01       	movw	r30, r18
     8e6:	20 81       	ld	r18, Z
     8e8:	27 7f       	andi	r18, 0xF7	; 247
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
 LCD_PORT |= (1<<LCD_STROBE_BIT);           //set strobe bit
 asm("nop"); asm("nop"); asm("nop"); asm("nop"); //4 cycle wait 
 LCD_PORT &= ~(1<<LCD_STROBE_BIT);          //clear strobe bit
 asm("nop"); asm("nop"); asm("nop"); asm("nop"); //4 cycle wait 
#endif
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <clear_display>:
 
//-----------------------------------------------------------------------------
//                          clear_display  
//
void clear_display(void){send_lcd(CMD_BYTE, 0x01,2000);} //2ms wait for LCD
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	40 ed       	ldi	r20, 0xD0	; 208
     8fe:	57 e0       	ldi	r21, 0x07	; 7
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <cursor_home>:

//-----------------------------------------------------------------------------
//                          cursor_home    
//
//Set cursor to row 0, column 0.
void cursor_home(void){send_lcd(CMD_BYTE, 0x02,1500);} //1.5ms wait for LCD
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	cd b7       	in	r28, 0x3d	; 61
     914:	de b7       	in	r29, 0x3e	; 62
     916:	4c ed       	ldi	r20, 0xDC	; 220
     918:	55 e0       	ldi	r21, 0x05	; 5
     91a:	62 e0       	ldi	r22, 0x02	; 2
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <home_line2>:
  
//-----------------------------------------------------------------------------
//                          home_line2    
//
//Put cursor at row 1, column 0
void home_line2(void){send_lcd(CMD_BYTE, 0xC0,1500);} //1.5ms wait for LCD
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	4c ed       	ldi	r20, 0xDC	; 220
     932:	55 e0       	ldi	r21, 0x05	; 5
     934:	60 ec       	ldi	r22, 0xC0	; 192
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <fill_spaces>:
 
//-----------------------------------------------------------------------------
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	1f 92       	push	r1
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     94c:	19 82       	std	Y+1, r1	; 0x01
     94e:	09 c0       	rjmp	.+18     	; 0x962 <fill_spaces+0x20>
		send_lcd(CHAR_BYTE, ' ',100); //100us wait between characters
     950:	44 e6       	ldi	r20, 0x64	; 100
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	60 e2       	ldi	r22, 0x20	; 32
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
//                          fill_spaces   
//
//Fill an entire line with spaces.
void fill_spaces(void){
	uint8_t i;
	for (i=0; i<=(NUM_LCD_CHARS-1); i++){
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	8f 5f       	subi	r24, 0xFF	; 255
     960:	89 83       	std	Y+1, r24	; 0x01
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	80 31       	cpi	r24, 0x10	; 16
     966:	a0 f3       	brcs	.-24     	; 0x950 <fill_spaces+0xe>
		send_lcd(CHAR_BYTE, ' ',100); //100us wait between characters
	}
}  
     968:	0f 90       	pop	r0
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <char2lcd>:
//----------------------------------------------------------------------------
//                            char2lcd
//                            
//Send a single char to the LCD.
//usage: char2lcd('H');  // send an H to the LCD
void char2lcd(char a_char){send_lcd(CHAR_BYTE, a_char, 100);} //100us wait after char
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	1f 92       	push	r1
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	44 e6       	ldi	r20, 0x64	; 100
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	68 2f       	mov	r22, r24
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
     98a:	0f 90       	pop	r0
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <string2lcd>:

//----------------------------------------------------------------------------
//                            string2lcd
//                            
//Send a ascii string to the LCD.
void string2lcd(char *lcd_str){ 
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	cf 93       	push	r28
     998:	df 93       	push	r29
     99a:	00 d0       	rcall	.+0      	; 0x99c <string2lcd+0xa>
     99c:	1f 92       	push	r1
     99e:	cd b7       	in	r28, 0x3d	; 61
     9a0:	de b7       	in	r29, 0x3e	; 62
     9a2:	9b 83       	std	Y+3, r25	; 0x03
     9a4:	8a 83       	std	Y+2, r24	; 0x02
  uint8_t i;
  for (i=0; i<=(strlen(lcd_str)-1); i++){send_lcd(CHAR_BYTE, lcd_str[i], 100);}                  
     9a6:	19 82       	std	Y+1, r1	; 0x01
     9a8:	12 c0       	rjmp	.+36     	; 0x9ce <string2lcd+0x3c>
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	88 2f       	mov	r24, r24
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	2a 81       	ldd	r18, Y+2	; 0x02
     9b2:	3b 81       	ldd	r19, Y+3	; 0x03
     9b4:	82 0f       	add	r24, r18
     9b6:	93 1f       	adc	r25, r19
     9b8:	fc 01       	movw	r30, r24
     9ba:	80 81       	ld	r24, Z
     9bc:	44 e6       	ldi	r20, 0x64	; 100
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	68 2f       	mov	r22, r24
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
     9c8:	89 81       	ldd	r24, Y+1	; 0x01
     9ca:	8f 5f       	subi	r24, 0xFF	; 255
     9cc:	89 83       	std	Y+1, r24	; 0x01
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	08 2f       	mov	r16, r24
     9d2:	10 e0       	ldi	r17, 0x00	; 0
     9d4:	8a 81       	ldd	r24, Y+2	; 0x02
     9d6:	9b 81       	ldd	r25, Y+3	; 0x03
     9d8:	0e 94 77 14 	call	0x28ee	; 0x28ee <strlen>
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	80 17       	cp	r24, r16
     9e0:	91 07       	cpc	r25, r17
     9e2:	18 f7       	brcc	.-58     	; 0x9aa <string2lcd+0x18>
} 
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	08 95       	ret

000009f4 <lcd_init>:
//----------------------------------------------------------------------------
//                            lcd_int 
//
//Initalize the LCD 
//
void lcd_init(void){
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	cd b7       	in	r28, 0x3d	; 61
     9fa:	de b7       	in	r29, 0x3e	; 62
     9fc:	2e 97       	sbiw	r28, 0x0e	; 14
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	f8 94       	cli
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	cd bf       	out	0x3d, r28	; 61
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e8       	ldi	r26, 0x80	; 128
     a0e:	b1 e4       	ldi	r27, 0x41	; 65
     a10:	89 83       	std	Y+1, r24	; 0x01
     a12:	9a 83       	std	Y+2, r25	; 0x02
     a14:	ab 83       	std	Y+3, r26	; 0x03
     a16:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	4a e7       	ldi	r20, 0x7A	; 122
     a1e:	55 e4       	ldi	r21, 0x45	; 69
     a20:	69 81       	ldd	r22, Y+1	; 0x01
     a22:	7a 81       	ldd	r23, Y+2	; 0x02
     a24:	8b 81       	ldd	r24, Y+3	; 0x03
     a26:	9c 81       	ldd	r25, Y+4	; 0x04
     a28:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
     a2c:	dc 01       	movw	r26, r24
     a2e:	cb 01       	movw	r24, r22
     a30:	8d 83       	std	Y+5, r24	; 0x05
     a32:	9e 83       	std	Y+6, r25	; 0x06
     a34:	af 83       	std	Y+7, r26	; 0x07
     a36:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e8       	ldi	r20, 0x80	; 128
     a3e:	5f e3       	ldi	r21, 0x3F	; 63
     a40:	6d 81       	ldd	r22, Y+5	; 0x05
     a42:	7e 81       	ldd	r23, Y+6	; 0x06
     a44:	8f 81       	ldd	r24, Y+7	; 0x07
     a46:	98 85       	ldd	r25, Y+8	; 0x08
     a48:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__cmpsf2>
     a4c:	88 23       	and	r24, r24
     a4e:	2c f4       	brge	.+10     	; 0xa5a <lcd_init+0x66>
		__ticks = 1;
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	9a 87       	std	Y+10, r25	; 0x0a
     a56:	89 87       	std	Y+9, r24	; 0x09
     a58:	3f c0       	rjmp	.+126    	; 0xad8 <lcd_init+0xe4>
	else if (__tmp > 65535)
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	3f ef       	ldi	r19, 0xFF	; 255
     a5e:	4f e7       	ldi	r20, 0x7F	; 127
     a60:	57 e4       	ldi	r21, 0x47	; 71
     a62:	6d 81       	ldd	r22, Y+5	; 0x05
     a64:	7e 81       	ldd	r23, Y+6	; 0x06
     a66:	8f 81       	ldd	r24, Y+7	; 0x07
     a68:	98 85       	ldd	r25, Y+8	; 0x08
     a6a:	0e 94 46 12 	call	0x248c	; 0x248c <__gesf2>
     a6e:	18 16       	cp	r1, r24
     a70:	4c f5       	brge	.+82     	; 0xac4 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e2       	ldi	r20, 0x20	; 32
     a78:	51 e4       	ldi	r21, 0x41	; 65
     a7a:	69 81       	ldd	r22, Y+1	; 0x01
     a7c:	7a 81       	ldd	r23, Y+2	; 0x02
     a7e:	8b 81       	ldd	r24, Y+3	; 0x03
     a80:	9c 81       	ldd	r25, Y+4	; 0x04
     a82:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
     a86:	dc 01       	movw	r26, r24
     a88:	cb 01       	movw	r24, r22
     a8a:	bc 01       	movw	r22, r24
     a8c:	cd 01       	movw	r24, r26
     a8e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
     a92:	dc 01       	movw	r26, r24
     a94:	cb 01       	movw	r24, r22
     a96:	9a 87       	std	Y+10, r25	; 0x0a
     a98:	89 87       	std	Y+9, r24	; 0x09
     a9a:	0f c0       	rjmp	.+30     	; 0xaba <lcd_init+0xc6>
     a9c:	80 e9       	ldi	r24, 0x90	; 144
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	9c 87       	std	Y+12, r25	; 0x0c
     aa2:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     aa4:	8b 85       	ldd	r24, Y+11	; 0x0b
     aa6:	9c 85       	ldd	r25, Y+12	; 0x0c
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <lcd_init+0xb4>
     aac:	9c 87       	std	Y+12, r25	; 0x0c
     aae:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ab0:	89 85       	ldd	r24, Y+9	; 0x09
     ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	9a 87       	std	Y+10, r25	; 0x0a
     ab8:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aba:	89 85       	ldd	r24, Y+9	; 0x09
     abc:	9a 85       	ldd	r25, Y+10	; 0x0a
     abe:	00 97       	sbiw	r24, 0x00	; 0
     ac0:	69 f7       	brne	.-38     	; 0xa9c <lcd_init+0xa8>
     ac2:	14 c0       	rjmp	.+40     	; 0xaec <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ac4:	6d 81       	ldd	r22, Y+5	; 0x05
     ac6:	7e 81       	ldd	r23, Y+6	; 0x06
     ac8:	8f 81       	ldd	r24, Y+7	; 0x07
     aca:	98 85       	ldd	r25, Y+8	; 0x08
     acc:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	9a 87       	std	Y+10, r25	; 0x0a
     ad6:	89 87       	std	Y+9, r24	; 0x09
     ad8:	89 85       	ldd	r24, Y+9	; 0x09
     ada:	9a 85       	ldd	r25, Y+10	; 0x0a
     adc:	9e 87       	std	Y+14, r25	; 0x0e
     ade:	8d 87       	std	Y+13, r24	; 0x0d
     ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	f1 f7       	brne	.-4      	; 0xae4 <lcd_init+0xf0>
     ae8:	9e 87       	std	Y+14, r25	; 0x0e
     aea:	8d 87       	std	Y+13, r24	; 0x0d
  _delay_ms(16);      //power up delay
#if SPI_MODE==1       //assumption is that the SPI port is intialized
  //TODO: kludge alert! should not be here.
  DDRF=0x08;          //port F bit 3 is enable for LCD in SPI mode
     aec:	81 e6       	ldi	r24, 0x61	; 97
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	28 e0       	ldi	r18, 0x08	; 8
     af2:	fc 01       	movw	r30, r24
     af4:	20 83       	st	Z, r18
  send_lcd(CMD_BYTE, 0x30, 7000); //send cmd sequence 3 times 
     af6:	48 e5       	ldi	r20, 0x58	; 88
     af8:	5b e1       	ldi	r21, 0x1B	; 27
     afa:	60 e3       	ldi	r22, 0x30	; 48
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
  send_lcd(CMD_BYTE, 0x30, 7000);
     b02:	48 e5       	ldi	r20, 0x58	; 88
     b04:	5b e1       	ldi	r21, 0x1B	; 27
     b06:	60 e3       	ldi	r22, 0x30	; 48
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
  send_lcd(CMD_BYTE, 0x30, 7000);
     b0e:	48 e5       	ldi	r20, 0x58	; 88
     b10:	5b e1       	ldi	r21, 0x1B	; 27
     b12:	60 e3       	ldi	r22, 0x30	; 48
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
  send_lcd(CMD_BYTE, 0x38, 5000);
     b1a:	48 e8       	ldi	r20, 0x88	; 136
     b1c:	53 e1       	ldi	r21, 0x13	; 19
     b1e:	68 e3       	ldi	r22, 0x38	; 56
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
  send_lcd(CMD_BYTE, 0x08, 5000);
     b26:	48 e8       	ldi	r20, 0x88	; 136
     b28:	53 e1       	ldi	r21, 0x13	; 19
     b2a:	68 e0       	ldi	r22, 0x08	; 8
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
  send_lcd(CMD_BYTE, 0x01, 5000);
     b32:	48 e8       	ldi	r20, 0x88	; 136
     b34:	53 e1       	ldi	r21, 0x13	; 19
     b36:	61 e0       	ldi	r22, 0x01	; 1
     b38:	80 e0       	ldi	r24, 0x00	; 0
     b3a:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
  send_lcd(CMD_BYTE, 0x06, 5000);
     b3e:	48 e8       	ldi	r20, 0x88	; 136
     b40:	53 e1       	ldi	r21, 0x13	; 19
     b42:	66 e0       	ldi	r22, 0x06	; 6
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
  send_lcd(CMD_BYTE, 0x0C + (CURSOR_VISIBLE<<1) + CURSOR_BLINK, 5);
     b4a:	45 e0       	ldi	r20, 0x05	; 5
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	6c e0       	ldi	r22, 0x0C	; 12
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
  //send_lcd(CMD_BYTE, 0x08, 5000);
  send_lcd(CMD_BYTE, 0x01, 5000);  //clear display
  send_lcd(CMD_BYTE, 0x06, 5000);  //cursor moves to right, don't shift display
  send_lcd(CMD_BYTE, 0x0C | (CURSOR_VISIBLE<<1) | CURSOR_BLINK, 5);
#endif
}
     b56:	2e 96       	adiw	r28, 0x0e	; 14
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <lcd_int32>:
void  lcd_int32(int32_t l,          //number to display
                uint8_t fieldwidth, //width of the field for display
                uint8_t decpos,     //0 if no decimal point, otherwise
                uint8_t bSigned,    //non-zero if the number should be treated as signed 
                uint8_t bZeroFill)  //non-zero if a specified fieldwidth is to be zero filled
{
     b68:	af 92       	push	r10
     b6a:	bf 92       	push	r11
     b6c:	cf 92       	push	r12
     b6e:	df 92       	push	r13
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	cd b7       	in	r28, 0x3d	; 61
     b7e:	de b7       	in	r29, 0x3e	; 62
     b80:	a3 97       	sbiw	r28, 0x23	; 35
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	6c 8f       	std	Y+28, r22	; 0x1c
     b8e:	7d 8f       	std	Y+29, r23	; 0x1d
     b90:	8e 8f       	std	Y+30, r24	; 0x1e
     b92:	9f 8f       	std	Y+31, r25	; 0x1f
     b94:	48 a3       	std	Y+32, r20	; 0x20
     b96:	29 a3       	std	Y+33, r18	; 0x21
     b98:	0a a3       	std	Y+34, r16	; 0x22
     b9a:	eb a2       	std	Y+35, r14	; 0x23
      char    sline[NUM_LCD_CHARS+1];
      uint8_t i=0;
     b9c:	19 82       	std	Y+1, r1	; 0x01
      char    fillch;
      ldiv_t  qr;

      qr.quot = l; // initialize the quotient 
     b9e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ba0:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ba2:	ae 8d       	ldd	r26, Y+30	; 0x1e
     ba4:	bf 8d       	ldd	r27, Y+31	; 0x1f
     ba6:	8c 8b       	std	Y+20, r24	; 0x14
     ba8:	9d 8b       	std	Y+21, r25	; 0x15
     baa:	ae 8b       	std	Y+22, r26	; 0x16
     bac:	bf 8b       	std	Y+23, r27	; 0x17

      if (bSigned){
     bae:	8a a1       	ldd	r24, Y+34	; 0x22
     bb0:	88 23       	and	r24, r24
     bb2:	e1 f0       	breq	.+56     	; 0xbec <lcd_int32+0x84>
        bSigned = (qr.quot<0);
     bb4:	8c 89       	ldd	r24, Y+20	; 0x14
     bb6:	9d 89       	ldd	r25, Y+21	; 0x15
     bb8:	ae 89       	ldd	r26, Y+22	; 0x16
     bba:	bf 89       	ldd	r27, Y+23	; 0x17
     bbc:	88 27       	eor	r24, r24
     bbe:	b7 fd       	sbrc	r27, 7
     bc0:	83 95       	inc	r24
     bc2:	99 27       	eor	r25, r25
     bc4:	aa 27       	eor	r26, r26
     bc6:	bb 27       	eor	r27, r27
     bc8:	8a a3       	std	Y+34, r24	; 0x22
        qr.quot = labs(qr.quot);
     bca:	8c 89       	ldd	r24, Y+20	; 0x14
     bcc:	9d 89       	ldd	r25, Y+21	; 0x15
     bce:	ae 89       	ldd	r26, Y+22	; 0x16
     bd0:	bf 89       	ldd	r27, Y+23	; 0x17
     bd2:	bb 23       	and	r27, r27
     bd4:	3c f4       	brge	.+14     	; 0xbe4 <lcd_int32+0x7c>
     bd6:	b0 95       	com	r27
     bd8:	a0 95       	com	r26
     bda:	90 95       	com	r25
     bdc:	81 95       	neg	r24
     bde:	9f 4f       	sbci	r25, 0xFF	; 255
     be0:	af 4f       	sbci	r26, 0xFF	; 255
     be2:	bf 4f       	sbci	r27, 0xFF	; 255
     be4:	8c 8b       	std	Y+20, r24	; 0x14
     be6:	9d 8b       	std	Y+21, r25	; 0x15
     be8:	ae 8b       	std	Y+22, r26	; 0x16
     bea:	bf 8b       	std	Y+23, r27	; 0x17
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
     bec:	89 a1       	ldd	r24, Y+33	; 0x21
     bee:	88 23       	and	r24, r24
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <lcd_int32+0x8c>
     bf2:	4b c0       	rjmp	.+150    	; 0xc8a <lcd_int32+0x122>
        for (; decpos ; decpos--){
     bf4:	39 c0       	rjmp	.+114    	; 0xc68 <lcd_int32+0x100>
          qr = ldiv(qr.quot, 10);
     bf6:	8c 89       	ldd	r24, Y+20	; 0x14
     bf8:	9d 89       	ldd	r25, Y+21	; 0x15
     bfa:	ae 89       	ldd	r26, Y+22	; 0x16
     bfc:	bf 89       	ldd	r27, Y+23	; 0x17
     bfe:	2a e0       	ldi	r18, 0x0A	; 10
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	bc 01       	movw	r22, r24
     c08:	cd 01       	movw	r24, r26
     c0a:	0e 94 c9 10 	call	0x2192	; 0x2192 <__divmodsi4>
     c0e:	a2 2e       	mov	r10, r18
     c10:	b3 2e       	mov	r11, r19
     c12:	c4 2e       	mov	r12, r20
     c14:	d5 2e       	mov	r13, r21
     c16:	e6 2e       	mov	r14, r22
     c18:	f7 2e       	mov	r15, r23
     c1a:	08 2f       	mov	r16, r24
     c1c:	19 2f       	mov	r17, r25
     c1e:	2a 2d       	mov	r18, r10
     c20:	3b 2d       	mov	r19, r11
     c22:	4c 2d       	mov	r20, r12
     c24:	5d 2d       	mov	r21, r13
     c26:	6e 2d       	mov	r22, r14
     c28:	7f 2d       	mov	r23, r15
     c2a:	80 2f       	mov	r24, r16
     c2c:	91 2f       	mov	r25, r17
     c2e:	2c 8b       	std	Y+20, r18	; 0x14
     c30:	3d 8b       	std	Y+21, r19	; 0x15
     c32:	4e 8b       	std	Y+22, r20	; 0x16
     c34:	5f 8b       	std	Y+23, r21	; 0x17
     c36:	68 8f       	std	Y+24, r22	; 0x18
     c38:	79 8f       	std	Y+25, r23	; 0x19
     c3a:	8a 8f       	std	Y+26, r24	; 0x1a
     c3c:	9b 8f       	std	Y+27, r25	; 0x1b
          sline[i++] = qr.rem + '0';
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	98 0f       	add	r25, r24
     c44:	99 83       	std	Y+1, r25	; 0x01
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	88 8d       	ldd	r24, Y+24	; 0x18
     c4c:	99 8d       	ldd	r25, Y+25	; 0x19
     c4e:	aa 8d       	ldd	r26, Y+26	; 0x1a
     c50:	bb 8d       	ldd	r27, Y+27	; 0x1b
     c52:	80 5d       	subi	r24, 0xD0	; 208
     c54:	48 2f       	mov	r20, r24
     c56:	ce 01       	movw	r24, r28
     c58:	03 96       	adiw	r24, 0x03	; 3
     c5a:	82 0f       	add	r24, r18
     c5c:	93 1f       	adc	r25, r19
     c5e:	fc 01       	movw	r30, r24
     c60:	40 83       	st	Z, r20
        qr.quot = labs(qr.quot);
      }

      // convert the digits to the right of the decimal point 
      if (decpos){
        for (; decpos ; decpos--){
     c62:	89 a1       	ldd	r24, Y+33	; 0x21
     c64:	81 50       	subi	r24, 0x01	; 1
     c66:	89 a3       	std	Y+33, r24	; 0x21
     c68:	89 a1       	ldd	r24, Y+33	; 0x21
     c6a:	88 23       	and	r24, r24
     c6c:	21 f6       	brne	.-120    	; 0xbf6 <lcd_int32+0x8e>
          qr = ldiv(qr.quot, 10);
          sline[i++] = qr.rem + '0';
        }
        sline[i++] = '.';
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	98 0f       	add	r25, r24
     c74:	99 83       	std	Y+1, r25	; 0x01
     c76:	88 2f       	mov	r24, r24
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	9e 01       	movw	r18, r28
     c7c:	2d 5f       	subi	r18, 0xFD	; 253
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	82 0f       	add	r24, r18
     c82:	93 1f       	adc	r25, r19
     c84:	2e e2       	ldi	r18, 0x2E	; 46
     c86:	fc 01       	movw	r30, r24
     c88:	20 83       	st	Z, r18
      }

      // convert the digits to the left of the decimal point 
      do{
          qr = ldiv(qr.quot, 10);
     c8a:	8c 89       	ldd	r24, Y+20	; 0x14
     c8c:	9d 89       	ldd	r25, Y+21	; 0x15
     c8e:	ae 89       	ldd	r26, Y+22	; 0x16
     c90:	bf 89       	ldd	r27, Y+23	; 0x17
     c92:	2a e0       	ldi	r18, 0x0A	; 10
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	bc 01       	movw	r22, r24
     c9c:	cd 01       	movw	r24, r26
     c9e:	0e 94 c9 10 	call	0x2192	; 0x2192 <__divmodsi4>
     ca2:	a2 2e       	mov	r10, r18
     ca4:	b3 2e       	mov	r11, r19
     ca6:	c4 2e       	mov	r12, r20
     ca8:	d5 2e       	mov	r13, r21
     caa:	e6 2e       	mov	r14, r22
     cac:	f7 2e       	mov	r15, r23
     cae:	08 2f       	mov	r16, r24
     cb0:	19 2f       	mov	r17, r25
     cb2:	2a 2d       	mov	r18, r10
     cb4:	3b 2d       	mov	r19, r11
     cb6:	4c 2d       	mov	r20, r12
     cb8:	5d 2d       	mov	r21, r13
     cba:	6e 2d       	mov	r22, r14
     cbc:	7f 2d       	mov	r23, r15
     cbe:	80 2f       	mov	r24, r16
     cc0:	91 2f       	mov	r25, r17
     cc2:	2c 8b       	std	Y+20, r18	; 0x14
     cc4:	3d 8b       	std	Y+21, r19	; 0x15
     cc6:	4e 8b       	std	Y+22, r20	; 0x16
     cc8:	5f 8b       	std	Y+23, r21	; 0x17
     cca:	68 8f       	std	Y+24, r22	; 0x18
     ccc:	79 8f       	std	Y+25, r23	; 0x19
     cce:	8a 8f       	std	Y+26, r24	; 0x1a
     cd0:	9b 8f       	std	Y+27, r25	; 0x1b
          sline[i++] = qr.rem + '0';
     cd2:	89 81       	ldd	r24, Y+1	; 0x01
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	98 0f       	add	r25, r24
     cd8:	99 83       	std	Y+1, r25	; 0x01
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	88 8d       	ldd	r24, Y+24	; 0x18
     ce0:	99 8d       	ldd	r25, Y+25	; 0x19
     ce2:	aa 8d       	ldd	r26, Y+26	; 0x1a
     ce4:	bb 8d       	ldd	r27, Y+27	; 0x1b
     ce6:	80 5d       	subi	r24, 0xD0	; 208
     ce8:	48 2f       	mov	r20, r24
     cea:	ce 01       	movw	r24, r28
     cec:	03 96       	adiw	r24, 0x03	; 3
     cee:	82 0f       	add	r24, r18
     cf0:	93 1f       	adc	r25, r19
     cf2:	fc 01       	movw	r30, r24
     cf4:	40 83       	st	Z, r20
        }while(qr.quot);
     cf6:	8c 89       	ldd	r24, Y+20	; 0x14
     cf8:	9d 89       	ldd	r25, Y+21	; 0x15
     cfa:	ae 89       	ldd	r26, Y+22	; 0x16
     cfc:	bf 89       	ldd	r27, Y+23	; 0x17
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	a1 05       	cpc	r26, r1
     d02:	b1 05       	cpc	r27, r1
     d04:	11 f6       	brne	.-124    	; 0xc8a <lcd_int32+0x122>

      // fill the whole field if a width was specified
      if (fieldwidth){
     d06:	88 a1       	ldd	r24, Y+32	; 0x20
     d08:	88 23       	and	r24, r24
     d0a:	d1 f0       	breq	.+52     	; 0xd40 <lcd_int32+0x1d8>
        fillch = bZeroFill? '0': ' '; // determine the fill character
     d0c:	8b a1       	ldd	r24, Y+35	; 0x23
     d0e:	88 23       	and	r24, r24
     d10:	11 f0       	breq	.+4      	; 0xd16 <lcd_int32+0x1ae>
     d12:	80 e3       	ldi	r24, 0x30	; 48
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <lcd_int32+0x1b0>
     d16:	80 e2       	ldi	r24, 0x20	; 32
     d18:	8a 83       	std	Y+2, r24	; 0x02
        for (; i<fieldwidth ; ){sline[i++] = fillch;}
     d1a:	0e c0       	rjmp	.+28     	; 0xd38 <lcd_int32+0x1d0>
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	98 0f       	add	r25, r24
     d22:	99 83       	std	Y+1, r25	; 0x01
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9e 01       	movw	r18, r28
     d2a:	2d 5f       	subi	r18, 0xFD	; 253
     d2c:	3f 4f       	sbci	r19, 0xFF	; 255
     d2e:	82 0f       	add	r24, r18
     d30:	93 1f       	adc	r25, r19
     d32:	2a 81       	ldd	r18, Y+2	; 0x02
     d34:	fc 01       	movw	r30, r24
     d36:	20 83       	st	Z, r18
     d38:	99 81       	ldd	r25, Y+1	; 0x01
     d3a:	88 a1       	ldd	r24, Y+32	; 0x20
     d3c:	98 17       	cp	r25, r24
     d3e:	70 f3       	brcs	.-36     	; 0xd1c <lcd_int32+0x1b4>
      }

      // output the sign, if we need to
      if (bSigned){sline[i++] = '-';}
     d40:	8a a1       	ldd	r24, Y+34	; 0x22
     d42:	88 23       	and	r24, r24
     d44:	71 f0       	breq	.+28     	; 0xd62 <lcd_int32+0x1fa>
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	91 e0       	ldi	r25, 0x01	; 1
     d4a:	98 0f       	add	r25, r24
     d4c:	99 83       	std	Y+1, r25	; 0x01
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	9e 01       	movw	r18, r28
     d54:	2d 5f       	subi	r18, 0xFD	; 253
     d56:	3f 4f       	sbci	r19, 0xFF	; 255
     d58:	82 0f       	add	r24, r18
     d5a:	93 1f       	adc	r25, r19
     d5c:	2d e2       	ldi	r18, 0x2D	; 45
     d5e:	fc 01       	movw	r30, r24
     d60:	20 83       	st	Z, r18

      // now output the formatted number
      do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	81 50       	subi	r24, 0x01	; 1
     d66:	89 83       	std	Y+1, r24	; 0x01
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	9e 01       	movw	r18, r28
     d70:	2d 5f       	subi	r18, 0xFD	; 253
     d72:	3f 4f       	sbci	r19, 0xFF	; 255
     d74:	82 0f       	add	r24, r18
     d76:	93 1f       	adc	r25, r19
     d78:	fc 01       	movw	r30, r24
     d7a:	80 81       	ld	r24, Z
     d7c:	48 ee       	ldi	r20, 0xE8	; 232
     d7e:	53 e0       	ldi	r21, 0x03	; 3
     d80:	68 2f       	mov	r22, r24
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	88 23       	and	r24, r24
     d8c:	51 f7       	brne	.-44     	; 0xd62 <lcd_int32+0x1fa>

}
     d8e:	a3 96       	adiw	r28, 0x23	; 35
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	df 91       	pop	r29
     d9c:	cf 91       	pop	r28
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	ff 90       	pop	r15
     da4:	ef 90       	pop	r14
     da6:	df 90       	pop	r13
     da8:	cf 90       	pop	r12
     daa:	bf 90       	pop	r11
     dac:	af 90       	pop	r10
     dae:	08 95       	ret

00000db0 <lcd_int16>:
//**************************************************************************************
void    lcd_int16(int16_t l, 
                  uint8_t fieldwidth, 
                  uint8_t decpos, 
                  uint8_t bZeroFill)
{
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	6d 97       	sbiw	r28, 0x1d	; 29
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	9a 8f       	std	Y+26, r25	; 0x1a
     dc6:	89 8f       	std	Y+25, r24	; 0x19
     dc8:	6b 8f       	std	Y+27, r22	; 0x1b
     dca:	4c 8f       	std	Y+28, r20	; 0x1c
     dcc:	2d 8f       	std	Y+29, r18	; 0x1d
        char    sline[NUM_LCD_CHARS+1];
        uint8_t i=0;
     dce:	19 82       	std	Y+1, r1	; 0x01
        char    fillch;
        div_t   qr;
        uint8_t bSigned;

        // initialize the quotient 
        qr.quot = l;
     dd0:	89 8d       	ldd	r24, Y+25	; 0x19
     dd2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     dd4:	9e 8b       	std	Y+22, r25	; 0x16
     dd6:	8d 8b       	std	Y+21, r24	; 0x15

        if ( (bSigned=(qr.quot<0)) )
     dd8:	8d 89       	ldd	r24, Y+21	; 0x15
     dda:	9e 89       	ldd	r25, Y+22	; 0x16
     ddc:	89 2f       	mov	r24, r25
     dde:	88 1f       	adc	r24, r24
     de0:	88 27       	eor	r24, r24
     de2:	88 1f       	adc	r24, r24
     de4:	8a 83       	std	Y+2, r24	; 0x02
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	88 23       	and	r24, r24
     dea:	39 f0       	breq	.+14     	; 0xdfa <lcd_int16+0x4a>
                qr.quot = -qr.quot;
     dec:	8d 89       	ldd	r24, Y+21	; 0x15
     dee:	9e 89       	ldd	r25, Y+22	; 0x16
     df0:	91 95       	neg	r25
     df2:	81 95       	neg	r24
     df4:	91 09       	sbc	r25, r1
     df6:	9e 8b       	std	Y+22, r25	; 0x16
     df8:	8d 8b       	std	Y+21, r24	; 0x15

        // convert the digits to the right of the decimal point 
        if (decpos){
     dfa:	8c 8d       	ldd	r24, Y+28	; 0x1c
     dfc:	88 23       	and	r24, r24
     dfe:	91 f1       	breq	.+100    	; 0xe64 <lcd_int16+0xb4>
          for (; decpos ; decpos--){
     e00:	20 c0       	rjmp	.+64     	; 0xe42 <lcd_int16+0x92>
            qr = div(qr.quot, 10);
     e02:	8d 89       	ldd	r24, Y+21	; 0x15
     e04:	9e 89       	ldd	r25, Y+22	; 0x16
     e06:	6a e0       	ldi	r22, 0x0A	; 10
     e08:	70 e0       	ldi	r23, 0x00	; 0
     e0a:	0e 94 93 10 	call	0x2126	; 0x2126 <__divmodhi4>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	8d 8b       	std	Y+21, r24	; 0x15
     e14:	9e 8b       	std	Y+22, r25	; 0x16
     e16:	af 8b       	std	Y+23, r26	; 0x17
     e18:	b8 8f       	std	Y+24, r27	; 0x18
            sline[i++] = qr.rem + '0';
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	98 0f       	add	r25, r24
     e20:	99 83       	std	Y+1, r25	; 0x01
     e22:	88 2f       	mov	r24, r24
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	2f 89       	ldd	r18, Y+23	; 0x17
     e28:	38 8d       	ldd	r19, Y+24	; 0x18
     e2a:	20 5d       	subi	r18, 0xD0	; 208
     e2c:	42 2f       	mov	r20, r18
     e2e:	9e 01       	movw	r18, r28
     e30:	2c 5f       	subi	r18, 0xFC	; 252
     e32:	3f 4f       	sbci	r19, 0xFF	; 255
     e34:	82 0f       	add	r24, r18
     e36:	93 1f       	adc	r25, r19
     e38:	fc 01       	movw	r30, r24
     e3a:	40 83       	st	Z, r20
        if ( (bSigned=(qr.quot<0)) )
                qr.quot = -qr.quot;

        // convert the digits to the right of the decimal point 
        if (decpos){
          for (; decpos ; decpos--){
     e3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e3e:	81 50       	subi	r24, 0x01	; 1
     e40:	8c 8f       	std	Y+28, r24	; 0x1c
     e42:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e44:	88 23       	and	r24, r24
     e46:	e9 f6       	brne	.-70     	; 0xe02 <lcd_int16+0x52>
            qr = div(qr.quot, 10);
            sline[i++] = qr.rem + '0';
          }
          sline[i++] = '.';
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	98 0f       	add	r25, r24
     e4e:	99 83       	std	Y+1, r25	; 0x01
     e50:	88 2f       	mov	r24, r24
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9e 01       	movw	r18, r28
     e56:	2c 5f       	subi	r18, 0xFC	; 252
     e58:	3f 4f       	sbci	r19, 0xFF	; 255
     e5a:	82 0f       	add	r24, r18
     e5c:	93 1f       	adc	r25, r19
     e5e:	2e e2       	ldi	r18, 0x2E	; 46
     e60:	fc 01       	movw	r30, r24
     e62:	20 83       	st	Z, r18
        }

        // convert the digits to the left of the decimal point 
        do
        {
                qr = div(qr.quot, 10);
     e64:	8d 89       	ldd	r24, Y+21	; 0x15
     e66:	9e 89       	ldd	r25, Y+22	; 0x16
     e68:	6a e0       	ldi	r22, 0x0A	; 10
     e6a:	70 e0       	ldi	r23, 0x00	; 0
     e6c:	0e 94 93 10 	call	0x2126	; 0x2126 <__divmodhi4>
     e70:	dc 01       	movw	r26, r24
     e72:	cb 01       	movw	r24, r22
     e74:	8d 8b       	std	Y+21, r24	; 0x15
     e76:	9e 8b       	std	Y+22, r25	; 0x16
     e78:	af 8b       	std	Y+23, r26	; 0x17
     e7a:	b8 8f       	std	Y+24, r27	; 0x18
                sline[i++] = qr.rem + '0';
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	98 0f       	add	r25, r24
     e82:	99 83       	std	Y+1, r25	; 0x01
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	2f 89       	ldd	r18, Y+23	; 0x17
     e8a:	38 8d       	ldd	r19, Y+24	; 0x18
     e8c:	20 5d       	subi	r18, 0xD0	; 208
     e8e:	42 2f       	mov	r20, r18
     e90:	9e 01       	movw	r18, r28
     e92:	2c 5f       	subi	r18, 0xFC	; 252
     e94:	3f 4f       	sbci	r19, 0xFF	; 255
     e96:	82 0f       	add	r24, r18
     e98:	93 1f       	adc	r25, r19
     e9a:	fc 01       	movw	r30, r24
     e9c:	40 83       	st	Z, r20
        }
        while(qr.quot);
     e9e:	8d 89       	ldd	r24, Y+21	; 0x15
     ea0:	9e 89       	ldd	r25, Y+22	; 0x16
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	f9 f6       	brne	.-66     	; 0xe64 <lcd_int16+0xb4>

        // add the sign now if we don't pad the number with zeros 
        if (!bZeroFill && bSigned)
     ea6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ea8:	88 23       	and	r24, r24
     eaa:	91 f4       	brne	.+36     	; 0xed0 <lcd_int16+0x120>
     eac:	8a 81       	ldd	r24, Y+2	; 0x02
     eae:	88 23       	and	r24, r24
     eb0:	79 f0       	breq	.+30     	; 0xed0 <lcd_int16+0x120>
        {
                sline[i++] = '-';
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	98 0f       	add	r25, r24
     eb8:	99 83       	std	Y+1, r25	; 0x01
     eba:	88 2f       	mov	r24, r24
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	9e 01       	movw	r18, r28
     ec0:	2c 5f       	subi	r18, 0xFC	; 252
     ec2:	3f 4f       	sbci	r19, 0xFF	; 255
     ec4:	82 0f       	add	r24, r18
     ec6:	93 1f       	adc	r25, r19
     ec8:	2d e2       	ldi	r18, 0x2D	; 45
     eca:	fc 01       	movw	r30, r24
     ecc:	20 83       	st	Z, r18
                bSigned = 0;
     ece:	1a 82       	std	Y+2, r1	; 0x02
        }

        // fill the whole field if a width was specified 
        if (fieldwidth){
     ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ed2:	88 23       	and	r24, r24
     ed4:	31 f1       	breq	.+76     	; 0xf22 <lcd_int16+0x172>
          // determine the fill character 
          fillch = bZeroFill? '0': ' ';
     ed6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ed8:	88 23       	and	r24, r24
     eda:	11 f0       	breq	.+4      	; 0xee0 <lcd_int16+0x130>
     edc:	80 e3       	ldi	r24, 0x30	; 48
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <lcd_int16+0x132>
     ee0:	80 e2       	ldi	r24, 0x20	; 32
     ee2:	8b 83       	std	Y+3, r24	; 0x03
          for (; i<(fieldwidth-bSigned) ; ){ sline[i++] = fillch;}
     ee4:	0e c0       	rjmp	.+28     	; 0xf02 <lcd_int16+0x152>
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	98 0f       	add	r25, r24
     eec:	99 83       	std	Y+1, r25	; 0x01
     eee:	88 2f       	mov	r24, r24
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	9e 01       	movw	r18, r28
     ef4:	2c 5f       	subi	r18, 0xFC	; 252
     ef6:	3f 4f       	sbci	r19, 0xFF	; 255
     ef8:	82 0f       	add	r24, r18
     efa:	93 1f       	adc	r25, r19
     efc:	2b 81       	ldd	r18, Y+3	; 0x03
     efe:	fc 01       	movw	r30, r24
     f00:	20 83       	st	Z, r18
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	28 2f       	mov	r18, r24
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f0a:	48 2f       	mov	r20, r24
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	88 2f       	mov	r24, r24
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	ba 01       	movw	r22, r20
     f16:	68 1b       	sub	r22, r24
     f18:	79 0b       	sbc	r23, r25
     f1a:	cb 01       	movw	r24, r22
     f1c:	28 17       	cp	r18, r24
     f1e:	39 07       	cpc	r19, r25
     f20:	14 f3       	brlt	.-60     	; 0xee6 <lcd_int16+0x136>
        }

        // output the sign, if we need to 
        if (bSigned){sline[i++] = '-';}
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	88 23       	and	r24, r24
     f26:	71 f0       	breq	.+28     	; 0xf44 <lcd_int16+0x194>
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	98 0f       	add	r25, r24
     f2e:	99 83       	std	Y+1, r25	; 0x01
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9e 01       	movw	r18, r28
     f36:	2c 5f       	subi	r18, 0xFC	; 252
     f38:	3f 4f       	sbci	r19, 0xFF	; 255
     f3a:	82 0f       	add	r24, r18
     f3c:	93 1f       	adc	r25, r19
     f3e:	2d e2       	ldi	r18, 0x2D	; 45
     f40:	fc 01       	movw	r30, r24
     f42:	20 83       	st	Z, r18

        // now output the formatted number 
            do{send_lcd(CHAR_BYTE, sline[--i] , 1000);} while(i);
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	81 50       	subi	r24, 0x01	; 1
     f48:	89 83       	std	Y+1, r24	; 0x01
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	88 2f       	mov	r24, r24
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9e 01       	movw	r18, r28
     f52:	2c 5f       	subi	r18, 0xFC	; 252
     f54:	3f 4f       	sbci	r19, 0xFF	; 255
     f56:	82 0f       	add	r24, r18
     f58:	93 1f       	adc	r25, r19
     f5a:	fc 01       	movw	r30, r24
     f5c:	80 81       	ld	r24, Z
     f5e:	48 ee       	ldi	r20, 0xE8	; 232
     f60:	53 e0       	ldi	r21, 0x03	; 3
     f62:	68 2f       	mov	r22, r24
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	0e 94 a8 00 	call	0x150	; 0x150 <send_lcd>
     f6a:	89 81       	ldd	r24, Y+1	; 0x01
     f6c:	88 23       	and	r24, r24
     f6e:	51 f7       	brne	.-44     	; 0xf44 <lcd_int16+0x194>
}
     f70:	6d 96       	adiw	r28, 0x1d	; 29
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <spi_init>:
	0b10011000, //9
	0b11111111, //1
	0b10011000 //9
}; 
//initialize SPI mode
void spi_init(void){
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	DDRB  |=   0xff;          //Turn on SS, MOSI, SCLK
     f8a:	87 e3       	ldi	r24, 0x37	; 55
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	fc 01       	movw	r30, r24
     f90:	80 81       	ld	r24, Z
     f92:	87 e3       	ldi	r24, 0x37	; 55
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	2f ef       	ldi	r18, 0xFF	; 255
     f98:	fc 01       	movw	r30, r24
     f9a:	20 83       	st	Z, r18
	SPCR  |=   (1 << SPE) | (1 << MSTR);     //set up SPI mode
     f9c:	8d e2       	ldi	r24, 0x2D	; 45
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	2d e2       	ldi	r18, 0x2D	; 45
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	f9 01       	movw	r30, r18
     fa6:	20 81       	ld	r18, Z
     fa8:	20 65       	ori	r18, 0x50	; 80
     faa:	fc 01       	movw	r30, r24
     fac:	20 83       	st	Z, r18
	SPSR  |=   (1 << SPI2X);           // double speed operation
     fae:	8e e2       	ldi	r24, 0x2E	; 46
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	2e e2       	ldi	r18, 0x2E	; 46
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	f9 01       	movw	r30, r18
     fb8:	20 81       	ld	r18, Z
     fba:	21 60       	ori	r18, 0x01	; 1
     fbc:	fc 01       	movw	r30, r24
     fbe:	20 83       	st	Z, r18
}//spi_init
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	08 95       	ret

00000fc6 <read_enc>:

//read values from the encoder and increment count as appropriate
void read_enc(knob){
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	27 97       	sbiw	r28, 0x07	; 7
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	9d 83       	std	Y+5, r25	; 0x05
     fdc:	8c 83       	std	Y+4, r24	; 0x04

	static uint8_t enc_state1=0, enc_state2=0, enc_state;
	uint8_t temp = (enc/knob)%4;
     fde:	80 91 2a 01 	lds	r24, 0x012A
     fe2:	88 2f       	mov	r24, r24
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	2c 81       	ldd	r18, Y+4	; 0x04
     fe8:	3d 81       	ldd	r19, Y+5	; 0x05
     fea:	b9 01       	movw	r22, r18
     fec:	0e 94 93 10 	call	0x2126	; 0x2126 <__divmodhi4>
     ff0:	cb 01       	movw	r24, r22
     ff2:	83 70       	andi	r24, 0x03	; 3
     ff4:	90 78       	andi	r25, 0x80	; 128
     ff6:	99 23       	and	r25, r25
     ff8:	24 f4       	brge	.+8      	; 0x1002 <read_enc+0x3c>
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	8c 6f       	ori	r24, 0xFC	; 252
     ffe:	9f 6f       	ori	r25, 0xFF	; 255
    1000:	01 96       	adiw	r24, 0x01	; 1
    1002:	8b 83       	std	Y+3, r24	; 0x03
	int16_t *target;//isolates 2 digits relevant to encoder


	if(show_alarm) 	target = &alarm;
    1004:	80 91 1e 01 	lds	r24, 0x011E
    1008:	90 91 1f 01 	lds	r25, 0x011F
    100c:	00 97       	sbiw	r24, 0x00	; 0
    100e:	29 f0       	breq	.+10     	; 0x101a <read_enc+0x54>
    1010:	88 e2       	ldi	r24, 0x28	; 40
    1012:	91 e0       	ldi	r25, 0x01	; 1
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <read_enc+0x5c>
	else		target = &count;	
    101a:	86 e2       	ldi	r24, 0x26	; 38
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	9a 83       	std	Y+2, r25	; 0x02
    1020:	89 83       	std	Y+1, r24	; 0x01

	if(knob == KNOB1) enc_state = enc_state1;
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	84 30       	cpi	r24, 0x04	; 4
    1028:	91 05       	cpc	r25, r1
    102a:	21 f4       	brne	.+8      	; 0x1034 <read_enc+0x6e>
    102c:	80 91 2c 01 	lds	r24, 0x012C
    1030:	80 93 2d 01 	sts	0x012D, r24
	if(knob == KNOB2) enc_state = enc_state2;
    1034:	8c 81       	ldd	r24, Y+4	; 0x04
    1036:	9d 81       	ldd	r25, Y+5	; 0x05
    1038:	81 30       	cpi	r24, 0x01	; 1
    103a:	91 05       	cpc	r25, r1
    103c:	21 f4       	brne	.+8      	; 0x1046 <read_enc+0x80>
    103e:	80 91 2e 01 	lds	r24, 0x012E
    1042:	80 93 2d 01 	sts	0x012D, r24

	enc_state=enc_state%4;
    1046:	80 91 2d 01 	lds	r24, 0x012D
    104a:	83 70       	andi	r24, 0x03	; 3
    104c:	80 93 2d 01 	sts	0x012D, r24

	switch(enc_state){
    1050:	80 91 2d 01 	lds	r24, 0x012D
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	81 30       	cpi	r24, 0x01	; 1
    105a:	91 05       	cpc	r25, r1
    105c:	09 f1       	breq	.+66     	; 0x10a0 <read_enc+0xda>
    105e:	82 30       	cpi	r24, 0x02	; 2
    1060:	91 05       	cpc	r25, r1
    1062:	1c f4       	brge	.+6      	; 0x106a <read_enc+0xa4>
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	51 f0       	breq	.+20     	; 0x107c <read_enc+0xb6>
    1068:	94 c0       	rjmp	.+296    	; 0x1192 <__stack+0x93>
    106a:	82 30       	cpi	r24, 0x02	; 2
    106c:	91 05       	cpc	r25, r1
    106e:	09 f4       	brne	.+2      	; 0x1072 <read_enc+0xac>
    1070:	5c c0       	rjmp	.+184    	; 0x112a <__stack+0x2b>
    1072:	83 30       	cpi	r24, 0x03	; 3
    1074:	91 05       	cpc	r25, r1
    1076:	09 f4       	brne	.+2      	; 0x107a <read_enc+0xb4>
    1078:	6a c0       	rjmp	.+212    	; 0x114e <__stack+0x4f>
    107a:	8b c0       	rjmp	.+278    	; 0x1192 <__stack+0x93>
		case 0://neutral position
			if (temp == 1) enc_state++; //indicating we clicked encoder right from neutral position
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	29 f4       	brne	.+10     	; 0x108c <read_enc+0xc6>
    1082:	80 91 2d 01 	lds	r24, 0x012D
    1086:	8f 5f       	subi	r24, 0xFF	; 255
    1088:	80 93 2d 01 	sts	0x012D, r24
			if (temp == 2) enc_state --;//indicating we clicked encoder left from neutral position
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	82 30       	cpi	r24, 0x02	; 2
    1090:	31 f4       	brne	.+12     	; 0x109e <read_enc+0xd8>
    1092:	80 91 2d 01 	lds	r24, 0x012D
    1096:	81 50       	subi	r24, 0x01	; 1
    1098:	80 93 2d 01 	sts	0x012D, r24
			break;
    109c:	7a c0       	rjmp	.+244    	; 0x1192 <__stack+0x93>
    109e:	79 c0       	rjmp	.+242    	; 0x1192 <__stack+0x93>
		case 1://one click right, three clicks left
			if(temp == 0) enc_state++;
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	88 23       	and	r24, r24
    10a4:	29 f4       	brne	.+10     	; 0x10b0 <read_enc+0xea>
    10a6:	80 91 2d 01 	lds	r24, 0x012D
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	80 93 2d 01 	sts	0x012D, r24
			if(temp == 3){
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	c9 f5       	brne	.+114    	; 0x1128 <__stack+0x29>
				enc_state++;
    10b6:	80 91 2d 01 	lds	r24, 0x012D
    10ba:	8f 5f       	subi	r24, 0xFF	; 255
    10bc:	80 93 2d 01 	sts	0x012D, r24
				if(((*target) - count_add)<0) *target = MODCAP + (*target) - count_add;			
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
    10c4:	fc 01       	movw	r30, r24
    10c6:	20 81       	ld	r18, Z
    10c8:	31 81       	ldd	r19, Z+1	; 0x01
    10ca:	80 91 00 01 	lds	r24, 0x0100
    10ce:	90 91 01 01 	lds	r25, 0x0101
    10d2:	a9 01       	movw	r20, r18
    10d4:	48 1b       	sub	r20, r24
    10d6:	59 0b       	sbc	r21, r25
    10d8:	ca 01       	movw	r24, r20
    10da:	99 23       	and	r25, r25
    10dc:	a4 f4       	brge	.+40     	; 0x1106 <__stack+0x7>
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	fc 01       	movw	r30, r24
    10e4:	80 81       	ld	r24, Z
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	9c 01       	movw	r18, r24
    10ea:	20 53       	subi	r18, 0x30	; 48
    10ec:	3d 4f       	sbci	r19, 0xFD	; 253
    10ee:	80 91 00 01 	lds	r24, 0x0100
    10f2:	90 91 01 01 	lds	r25, 0x0101
    10f6:	28 1b       	sub	r18, r24
    10f8:	39 0b       	sbc	r19, r25
    10fa:	89 81       	ldd	r24, Y+1	; 0x01
    10fc:	9a 81       	ldd	r25, Y+2	; 0x02
    10fe:	fc 01       	movw	r30, r24
    1100:	31 83       	std	Z+1, r19	; 0x01
    1102:	20 83       	st	Z, r18
    1104:	11 c0       	rjmp	.+34     	; 0x1128 <__stack+0x29>
				else *target -= count_add;
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	fc 01       	movw	r30, r24
    110c:	20 81       	ld	r18, Z
    110e:	31 81       	ldd	r19, Z+1	; 0x01
    1110:	80 91 00 01 	lds	r24, 0x0100
    1114:	90 91 01 01 	lds	r25, 0x0101
    1118:	28 1b       	sub	r18, r24
    111a:	39 0b       	sbc	r19, r25
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	9a 81       	ldd	r25, Y+2	; 0x02
    1120:	fc 01       	movw	r30, r24
    1122:	31 83       	std	Z+1, r19	; 0x01
    1124:	20 83       	st	Z, r18
			}
			break;
    1126:	35 c0       	rjmp	.+106    	; 0x1192 <__stack+0x93>
    1128:	34 c0       	rjmp	.+104    	; 0x1192 <__stack+0x93>
		case 2://two clicks right, two click left
			if(temp == 2) enc_state++;
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	82 30       	cpi	r24, 0x02	; 2
    112e:	29 f4       	brne	.+10     	; 0x113a <__stack+0x3b>
    1130:	80 91 2d 01 	lds	r24, 0x012D
    1134:	8f 5f       	subi	r24, 0xFF	; 255
    1136:	80 93 2d 01 	sts	0x012D, r24
			if(temp == 1) enc_state--;
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	31 f4       	brne	.+12     	; 0x114c <__stack+0x4d>
    1140:	80 91 2d 01 	lds	r24, 0x012D
    1144:	81 50       	subi	r24, 0x01	; 1
    1146:	80 93 2d 01 	sts	0x012D, r24
			break;
    114a:	23 c0       	rjmp	.+70     	; 0x1192 <__stack+0x93>
    114c:	22 c0       	rjmp	.+68     	; 0x1192 <__stack+0x93>
		case 3://three clicks right, one click left
			if(temp == 3){
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	83 30       	cpi	r24, 0x03	; 3
    1152:	a9 f4       	brne	.+42     	; 0x117e <__stack+0x7f>
				enc_state++;
    1154:	80 91 2d 01 	lds	r24, 0x012D
    1158:	8f 5f       	subi	r24, 0xFF	; 255
    115a:	80 93 2d 01 	sts	0x012D, r24
				*target = (*target + count_add);			
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	fc 01       	movw	r30, r24
    1164:	20 81       	ld	r18, Z
    1166:	31 81       	ldd	r19, Z+1	; 0x01
    1168:	80 91 00 01 	lds	r24, 0x0100
    116c:	90 91 01 01 	lds	r25, 0x0101
    1170:	28 0f       	add	r18, r24
    1172:	39 1f       	adc	r19, r25
    1174:	89 81       	ldd	r24, Y+1	; 0x01
    1176:	9a 81       	ldd	r25, Y+2	; 0x02
    1178:	fc 01       	movw	r30, r24
    117a:	31 83       	std	Z+1, r19	; 0x01
    117c:	20 83       	st	Z, r18
			}
			if(temp == 0) enc_state--;
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	88 23       	and	r24, r24
    1182:	31 f4       	brne	.+12     	; 0x1190 <__stack+0x91>
    1184:	80 91 2d 01 	lds	r24, 0x012D
    1188:	81 50       	subi	r24, 0x01	; 1
    118a:	80 93 2d 01 	sts	0x012D, r24
			break;
    118e:	00 c0       	rjmp	.+0      	; 0x1190 <__stack+0x91>
    1190:	00 00       	nop

	}
	if(knob == KNOB1) enc_state1 = enc_state;
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	9d 81       	ldd	r25, Y+5	; 0x05
    1196:	84 30       	cpi	r24, 0x04	; 4
    1198:	91 05       	cpc	r25, r1
    119a:	21 f4       	brne	.+8      	; 0x11a4 <__stack+0xa5>
    119c:	80 91 2d 01 	lds	r24, 0x012D
    11a0:	80 93 2c 01 	sts	0x012C, r24
	if(knob == KNOB2) enc_state2 = enc_state;
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	9d 81       	ldd	r25, Y+5	; 0x05
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	91 05       	cpc	r25, r1
    11ac:	21 f4       	brne	.+8      	; 0x11b6 <__stack+0xb7>
    11ae:	80 91 2d 01 	lds	r24, 0x012D
    11b2:	80 93 2e 01 	sts	0x012E, r24

}
    11b6:	27 96       	adiw	r28, 0x07	; 7
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	df 91       	pop	r29
    11c4:	cf 91       	pop	r28
    11c6:	08 95       	ret

000011c8 <__vector_16>:


//interupt service routine for timercounter0. Used to scan for button presses and data from the ecoder. I have added functions create a delay between presing a button
//and having the controller take action to prevent action from happening when trying to press two buttons at once.  
ISR(TIMER0_OVF_vect){
    11c8:	1f 92       	push	r1
    11ca:	0f 92       	push	r0
    11cc:	00 90 5f 00 	lds	r0, 0x005F
    11d0:	0f 92       	push	r0
    11d2:	11 24       	eor	r1, r1
    11d4:	00 90 5b 00 	lds	r0, 0x005B
    11d8:	0f 92       	push	r0
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <__vector_16+0x30>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <__vector_16+0x32>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
	static uint16_t count_7ms = 0;
	static uint8_t  button_delay=0, button_release_delay=0;       	//delay counters to create a gap between pressing or releaseing a button and 

	uint16_t am_change=count, aam_change=alarm;
    11fe:	80 91 26 01 	lds	r24, 0x0126
    1202:	90 91 27 01 	lds	r25, 0x0127
    1206:	9a 83       	std	Y+2, r25	; 0x02
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	80 91 28 01 	lds	r24, 0x0128
    120e:	90 91 29 01 	lds	r25, 0x0129
    1212:	9c 83       	std	Y+4, r25	; 0x04
    1214:	8b 83       	std	Y+3, r24	; 0x03

	//and controller taking input from buttons
	count_7ms++;
    1216:	80 91 2f 01 	lds	r24, 0x012F
    121a:	90 91 30 01 	lds	r25, 0x0130
    121e:	01 96       	adiw	r24, 0x01	; 1
    1220:	90 93 30 01 	sts	0x0130, r25
    1224:	80 93 2f 01 	sts	0x012F, r24
	PORTA = 0xff;//make PORTA an input port with pullups 
    1228:	8b e3       	ldi	r24, 0x3B	; 59
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	2f ef       	ldi	r18, 0xFF	; 255
    122e:	fc 01       	movw	r30, r24
    1230:	20 83       	st	Z, r18
	DDRA = 0x00;
    1232:	8a e3       	ldi	r24, 0x3A	; 58
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	fc 01       	movw	r30, r24
    1238:	10 82       	st	Z, r1

	PORTB |= 0b01110000;//enable tristate buffer for pushbutton switches
    123a:	88 e3       	ldi	r24, 0x38	; 56
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	28 e3       	ldi	r18, 0x38	; 56
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	f9 01       	movw	r30, r18
    1244:	20 81       	ld	r18, Z
    1246:	20 67       	ori	r18, 0x70	; 112
    1248:	fc 01       	movw	r30, r24
    124a:	20 83       	st	Z, r18

	DebounceSwitch();//detect button state
    124c:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <DebounceSwitch>

	if(debounced_state && button==-1){				//if button is pressed and was not pressed on last check
    1250:	80 91 18 01 	lds	r24, 0x0118
    1254:	88 23       	and	r24, r24
    1256:	09 f1       	breq	.+66     	; 0x129a <__vector_16+0xd2>
    1258:	80 91 24 01 	lds	r24, 0x0124
    125c:	90 91 25 01 	lds	r25, 0x0125
    1260:	8f 3f       	cpi	r24, 0xFF	; 255
    1262:	ff ef       	ldi	r31, 0xFF	; 255
    1264:	9f 07       	cpc	r25, r31
    1266:	c9 f4       	brne	.+50     	; 0x129a <__vector_16+0xd2>
		button_delay++;						//wait before taking action. This Allows me to create two button presses
    1268:	80 91 31 01 	lds	r24, 0x0131
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	80 93 31 01 	sts	0x0131, r24
		//that behave differently than one button. No action taken before user can press
		//second button down.

		if ((button_delay > 16) && (button_release_delay > 32)){
    1272:	80 91 31 01 	lds	r24, 0x0131
    1276:	81 31       	cpi	r24, 0x11	; 17
    1278:	78 f0       	brcs	.+30     	; 0x1298 <__vector_16+0xd0>
    127a:	80 91 32 01 	lds	r24, 0x0132
    127e:	81 32       	cpi	r24, 0x21	; 33
    1280:	58 f0       	brcs	.+22     	; 0x1298 <__vector_16+0xd0>
			button = debounced_state;
    1282:	80 91 18 01 	lds	r24, 0x0118
    1286:	88 2f       	mov	r24, r24
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	90 93 25 01 	sts	0x0125, r25
    128e:	80 93 24 01 	sts	0x0124, r24
			button_release_delay=0;			//set release to 0 and it will start counting once button is released
    1292:	10 92 32 01 	sts	0x0132, r1
	if(debounced_state && button==-1){				//if button is pressed and was not pressed on last check
		button_delay++;						//wait before taking action. This Allows me to create two button presses
		//that behave differently than one button. No action taken before user can press
		//second button down.

		if ((button_delay > 16) && (button_release_delay > 32)){
    1296:	08 c0       	rjmp	.+16     	; 0x12a8 <__vector_16+0xe0>
    1298:	07 c0       	rjmp	.+14     	; 0x12a8 <__vector_16+0xe0>
			button = debounced_state;
			button_release_delay=0;			//set release to 0 and it will start counting once button is released
		}
	}else{
		button_release_delay++;					//count time since button was released
    129a:	80 91 32 01 	lds	r24, 0x0132
    129e:	8f 5f       	subi	r24, 0xFF	; 255
    12a0:	80 93 32 01 	sts	0x0132, r24
		button_delay=0;						//button has not been pressed
    12a4:	10 92 31 01 	sts	0x0131, r1

	//This increments count approximately every 1 second. 
	//	if ((count_7ms % 512)==0) //?? interrupts equals one half second 
	//		count = (count + 1);//bound the count to 0 - 1023

	if(mode & (1 << 7)) SPDR = mode | (aam << 1);//display current mode on bar graph
    12a8:	80 91 19 01 	lds	r24, 0x0119
    12ac:	88 23       	and	r24, r24
    12ae:	7c f4       	brge	.+30     	; 0x12ce <__vector_16+0x106>
    12b0:	8f e2       	ldi	r24, 0x2F	; 47
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	20 91 1c 01 	lds	r18, 0x011C
    12b8:	30 91 1d 01 	lds	r19, 0x011D
    12bc:	22 0f       	add	r18, r18
    12be:	33 1f       	adc	r19, r19
    12c0:	32 2f       	mov	r19, r18
    12c2:	20 91 19 01 	lds	r18, 0x0119
    12c6:	23 2b       	or	r18, r19
    12c8:	fc 01       	movw	r30, r24
    12ca:	20 83       	st	Z, r18
	else SPDR = mode | (am << 1);

	while(bit_is_clear(SPSR, SPIF));	//wait until mode is sent to bar graph
    12cc:	0e c0       	rjmp	.+28     	; 0x12ea <__vector_16+0x122>
	//This increments count approximately every 1 second. 
	//	if ((count_7ms % 512)==0) //?? interrupts equals one half second 
	//		count = (count + 1);//bound the count to 0 - 1023

	if(mode & (1 << 7)) SPDR = mode | (aam << 1);//display current mode on bar graph
	else SPDR = mode | (am << 1);
    12ce:	8f e2       	ldi	r24, 0x2F	; 47
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	20 91 1a 01 	lds	r18, 0x011A
    12d6:	30 91 1b 01 	lds	r19, 0x011B
    12da:	22 0f       	add	r18, r18
    12dc:	33 1f       	adc	r19, r19
    12de:	32 2f       	mov	r19, r18
    12e0:	20 91 19 01 	lds	r18, 0x0119
    12e4:	23 2b       	or	r18, r19
    12e6:	fc 01       	movw	r30, r24
    12e8:	20 83       	st	Z, r18

	while(bit_is_clear(SPSR, SPIF));	//wait until mode is sent to bar graph
    12ea:	00 00       	nop
    12ec:	8e e2       	ldi	r24, 0x2E	; 46
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	fc 01       	movw	r30, r24
    12f2:	80 81       	ld	r24, Z
    12f4:	88 23       	and	r24, r24
    12f6:	d4 f7       	brge	.-12     	; 0x12ec <__vector_16+0x124>
	PORTB |=  0x01;        			//strobe output data reg in HC595 - rising edge
    12f8:	88 e3       	ldi	r24, 0x38	; 56
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	28 e3       	ldi	r18, 0x38	; 56
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	f9 01       	movw	r30, r18
    1302:	20 81       	ld	r18, Z
    1304:	21 60       	ori	r18, 0x01	; 1
    1306:	fc 01       	movw	r30, r24
    1308:	20 83       	st	Z, r18
	PORTB &=  0xfe;        			//falling edge
    130a:	88 e3       	ldi	r24, 0x38	; 56
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	28 e3       	ldi	r18, 0x38	; 56
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	f9 01       	movw	r30, r18
    1314:	20 81       	ld	r18, Z
    1316:	2e 7f       	andi	r18, 0xFE	; 254
    1318:	fc 01       	movw	r30, r24
    131a:	20 83       	st	Z, r18

	PORTE = 0x00;				//record encoder data
    131c:	83 e2       	ldi	r24, 0x23	; 35
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	fc 01       	movw	r30, r24
    1322:	10 82       	st	Z, r1
	PORTE = 0x40;				//protect encoder data
    1324:	83 e2       	ldi	r24, 0x23	; 35
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	20 e4       	ldi	r18, 0x40	; 64
    132a:	fc 01       	movw	r30, r24
    132c:	20 83       	st	Z, r18
	enc = SPDR;				//read encoder data
    132e:	8f e2       	ldi	r24, 0x2F	; 47
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	fc 01       	movw	r30, r24
    1334:	80 81       	ld	r24, Z
    1336:	80 93 2a 01 	sts	0x012A, r24

	read_enc(KNOB1);				//interpreate encoder data and increment/decrement count
    133a:	84 e0       	ldi	r24, 0x04	; 4
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <read_enc>
	read_enc(KNOB2);				//interpreate encoder data and increment/decrement count
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <read_enc>
	count = count % MODCAP; 
    134a:	40 91 26 01 	lds	r20, 0x0126
    134e:	50 91 27 01 	lds	r21, 0x0127
    1352:	9a 01       	movw	r18, r20
    1354:	a3 e8       	ldi	r26, 0x83	; 131
    1356:	bd e2       	ldi	r27, 0x2D	; 45
    1358:	0e 94 84 10 	call	0x2108	; 0x2108 <__umulhisi3>
    135c:	88 0f       	add	r24, r24
    135e:	89 2f       	mov	r24, r25
    1360:	88 1f       	adc	r24, r24
    1362:	99 0b       	sbc	r25, r25
    1364:	91 95       	neg	r25
    1366:	60 ed       	ldi	r22, 0xD0	; 208
    1368:	72 e0       	ldi	r23, 0x02	; 2
    136a:	86 9f       	mul	r24, r22
    136c:	90 01       	movw	r18, r0
    136e:	87 9f       	mul	r24, r23
    1370:	30 0d       	add	r19, r0
    1372:	96 9f       	mul	r25, r22
    1374:	30 0d       	add	r19, r0
    1376:	11 24       	eor	r1, r1
    1378:	ca 01       	movw	r24, r20
    137a:	82 1b       	sub	r24, r18
    137c:	93 0b       	sbc	r25, r19
    137e:	90 93 27 01 	sts	0x0127, r25
    1382:	80 93 26 01 	sts	0x0126, r24
	alarm = alarm % MODCAP;
    1386:	40 91 28 01 	lds	r20, 0x0128
    138a:	50 91 29 01 	lds	r21, 0x0129
    138e:	9a 01       	movw	r18, r20
    1390:	a3 e8       	ldi	r26, 0x83	; 131
    1392:	bd e2       	ldi	r27, 0x2D	; 45
    1394:	0e 94 84 10 	call	0x2108	; 0x2108 <__umulhisi3>
    1398:	88 0f       	add	r24, r24
    139a:	89 2f       	mov	r24, r25
    139c:	88 1f       	adc	r24, r24
    139e:	99 0b       	sbc	r25, r25
    13a0:	91 95       	neg	r25
    13a2:	60 ed       	ldi	r22, 0xD0	; 208
    13a4:	72 e0       	ldi	r23, 0x02	; 2
    13a6:	86 9f       	mul	r24, r22
    13a8:	90 01       	movw	r18, r0
    13aa:	87 9f       	mul	r24, r23
    13ac:	30 0d       	add	r19, r0
    13ae:	96 9f       	mul	r25, r22
    13b0:	30 0d       	add	r19, r0
    13b2:	11 24       	eor	r1, r1
    13b4:	ca 01       	movw	r24, r20
    13b6:	82 1b       	sub	r24, r18
    13b8:	93 0b       	sbc	r25, r19
    13ba:	90 93 29 01 	sts	0x0129, r25
    13be:	80 93 28 01 	sts	0x0128, r24
	if((am_change <= 100 && count >700) || (am_change > 700 && count <= 100)) am = 1-am;
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	9a 81       	ldd	r25, Y+2	; 0x02
    13c6:	85 36       	cpi	r24, 0x65	; 101
    13c8:	91 05       	cpc	r25, r1
    13ca:	40 f4       	brcc	.+16     	; 0x13dc <__vector_16+0x214>
    13cc:	80 91 26 01 	lds	r24, 0x0126
    13d0:	90 91 27 01 	lds	r25, 0x0127
    13d4:	8d 3b       	cpi	r24, 0xBD	; 189
    13d6:	f2 e0       	ldi	r31, 0x02	; 2
    13d8:	9f 07       	cpc	r25, r31
    13da:	68 f4       	brcc	.+26     	; 0x13f6 <__vector_16+0x22e>
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	9a 81       	ldd	r25, Y+2	; 0x02
    13e0:	8d 3b       	cpi	r24, 0xBD	; 189
    13e2:	22 e0       	ldi	r18, 0x02	; 2
    13e4:	92 07       	cpc	r25, r18
    13e6:	a8 f0       	brcs	.+42     	; 0x1412 <__vector_16+0x24a>
    13e8:	80 91 26 01 	lds	r24, 0x0126
    13ec:	90 91 27 01 	lds	r25, 0x0127
    13f0:	85 36       	cpi	r24, 0x65	; 101
    13f2:	91 05       	cpc	r25, r1
    13f4:	70 f4       	brcc	.+28     	; 0x1412 <__vector_16+0x24a>
    13f6:	80 91 1a 01 	lds	r24, 0x011A
    13fa:	90 91 1b 01 	lds	r25, 0x011B
    13fe:	21 e0       	ldi	r18, 0x01	; 1
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	a9 01       	movw	r20, r18
    1404:	48 1b       	sub	r20, r24
    1406:	59 0b       	sbc	r21, r25
    1408:	ca 01       	movw	r24, r20
    140a:	90 93 1b 01 	sts	0x011B, r25
    140e:	80 93 1a 01 	sts	0x011A, r24
	if((aam_change <= 100 && alarm >700) || (aam_change > 700 && alarm <= 100)) aam = 1-aam;
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	9c 81       	ldd	r25, Y+4	; 0x04
    1416:	85 36       	cpi	r24, 0x65	; 101
    1418:	91 05       	cpc	r25, r1
    141a:	40 f4       	brcc	.+16     	; 0x142c <__vector_16+0x264>
    141c:	80 91 28 01 	lds	r24, 0x0128
    1420:	90 91 29 01 	lds	r25, 0x0129
    1424:	8d 3b       	cpi	r24, 0xBD	; 189
    1426:	52 e0       	ldi	r21, 0x02	; 2
    1428:	95 07       	cpc	r25, r21
    142a:	68 f4       	brcc	.+26     	; 0x1446 <__vector_16+0x27e>
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	8d 3b       	cpi	r24, 0xBD	; 189
    1432:	e2 e0       	ldi	r30, 0x02	; 2
    1434:	9e 07       	cpc	r25, r30
    1436:	a8 f0       	brcs	.+42     	; 0x1462 <__vector_16+0x29a>
    1438:	80 91 28 01 	lds	r24, 0x0128
    143c:	90 91 29 01 	lds	r25, 0x0129
    1440:	85 36       	cpi	r24, 0x65	; 101
    1442:	91 05       	cpc	r25, r1
    1444:	70 f4       	brcc	.+28     	; 0x1462 <__vector_16+0x29a>
    1446:	80 91 1c 01 	lds	r24, 0x011C
    144a:	90 91 1d 01 	lds	r25, 0x011D
    144e:	21 e0       	ldi	r18, 0x01	; 1
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	a9 01       	movw	r20, r18
    1454:	48 1b       	sub	r20, r24
    1456:	59 0b       	sbc	r21, r25
    1458:	ca 01       	movw	r24, r20
    145a:	90 93 1d 01 	sts	0x011D, r25
    145e:	80 93 1c 01 	sts	0x011C, r24
}
    1462:	0f 90       	pop	r0
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	ff 91       	pop	r31
    1470:	ef 91       	pop	r30
    1472:	bf 91       	pop	r27
    1474:	af 91       	pop	r26
    1476:	9f 91       	pop	r25
    1478:	8f 91       	pop	r24
    147a:	7f 91       	pop	r23
    147c:	6f 91       	pop	r22
    147e:	5f 91       	pop	r21
    1480:	4f 91       	pop	r20
    1482:	3f 91       	pop	r19
    1484:	2f 91       	pop	r18
    1486:	0f 90       	pop	r0
    1488:	00 92 5b 00 	sts	0x005B, r0
    148c:	0f 90       	pop	r0
    148e:	00 92 5f 00 	sts	0x005F, r0
    1492:	0f 90       	pop	r0
    1494:	1f 90       	pop	r1
    1496:	18 95       	reti

00001498 <__vector_12>:
ISR(TIMER1_COMPA_vect){
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	00 90 5f 00 	lds	r0, 0x005F
    14a0:	0f 92       	push	r0
    14a2:	11 24       	eor	r1, r1
    14a4:	00 90 5b 00 	lds	r0, 0x005B
    14a8:	0f 92       	push	r0
    14aa:	2f 93       	push	r18
    14ac:	3f 93       	push	r19
    14ae:	8f 93       	push	r24
    14b0:	9f 93       	push	r25
    14b2:	ef 93       	push	r30
    14b4:	ff 93       	push	r31
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
	PORTD ^= (1 << 7);
    14be:	82 e3       	ldi	r24, 0x32	; 50
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	22 e3       	ldi	r18, 0x32	; 50
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	f9 01       	movw	r30, r18
    14c8:	30 81       	ld	r19, Z
    14ca:	20 e8       	ldi	r18, 0x80	; 128
    14cc:	23 27       	eor	r18, r19
    14ce:	fc 01       	movw	r30, r24
    14d0:	20 83       	st	Z, r18
}
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	9f 91       	pop	r25
    14dc:	8f 91       	pop	r24
    14de:	3f 91       	pop	r19
    14e0:	2f 91       	pop	r18
    14e2:	0f 90       	pop	r0
    14e4:	00 92 5b 00 	sts	0x005B, r0
    14e8:	0f 90       	pop	r0
    14ea:	00 92 5f 00 	sts	0x005F, r0
    14ee:	0f 90       	pop	r0
    14f0:	1f 90       	pop	r1
    14f2:	18 95       	reti

000014f4 <int0_init>:


//initialize timercounter0
void int0_init(){
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1 << TCNT0);			//enable interrupts
    14fc:	87 e5       	ldi	r24, 0x57	; 87
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	27 e5       	ldi	r18, 0x57	; 87
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	f9 01       	movw	r30, r18
    1506:	20 81       	ld	r18, Z
    1508:	62 2f       	mov	r22, r18
    150a:	22 e5       	ldi	r18, 0x52	; 82
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	f9 01       	movw	r30, r18
    1510:	20 81       	ld	r18, Z
    1512:	42 2f       	mov	r20, r18
    1514:	50 e0       	ldi	r21, 0x00	; 0
    1516:	21 e0       	ldi	r18, 0x01	; 1
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	04 2e       	mov	r0, r20
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <int0_init+0x2e>
    151e:	22 0f       	add	r18, r18
    1520:	33 1f       	adc	r19, r19
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <int0_init+0x2a>
    1526:	26 2b       	or	r18, r22
    1528:	fc 01       	movw	r30, r24
    152a:	20 83       	st	Z, r18
	TCCR0 |= (1 << CS02) | (1 << CS00); 	//normal mode, prescale by 128
    152c:	83 e5       	ldi	r24, 0x53	; 83
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	23 e5       	ldi	r18, 0x53	; 83
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	f9 01       	movw	r30, r18
    1536:	20 81       	ld	r18, Z
    1538:	25 60       	ori	r18, 0x05	; 5
    153a:	fc 01       	movw	r30, r24
    153c:	20 83       	st	Z, r18


}
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	08 95       	ret

00001544 <int1_init>:
void int1_init() {
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1 << OCIE1A);
    154c:	87 e5       	ldi	r24, 0x57	; 87
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	27 e5       	ldi	r18, 0x57	; 87
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	f9 01       	movw	r30, r18
    1556:	20 81       	ld	r18, Z
    1558:	20 61       	ori	r18, 0x10	; 16
    155a:	fc 01       	movw	r30, r24
    155c:	20 83       	st	Z, r18
	TCCR1A = 0x00;
    155e:	8f e4       	ldi	r24, 0x4F	; 79
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	fc 01       	movw	r30, r24
    1564:	10 82       	st	Z, r1
	TCCR1B |= (1 << WGM12) | (1 << CS11) | (1 << CS10);
    1566:	8e e4       	ldi	r24, 0x4E	; 78
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	2e e4       	ldi	r18, 0x4E	; 78
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	f9 01       	movw	r30, r18
    1570:	20 81       	ld	r18, Z
    1572:	2b 60       	ori	r18, 0x0B	; 11
    1574:	fc 01       	movw	r30, r24
    1576:	20 83       	st	Z, r18
	TCCR1C = 0x00;
    1578:	8a e7       	ldi	r24, 0x7A	; 122
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	fc 01       	movw	r30, r24
    157e:	10 82       	st	Z, r1
	OCR1A = 0x0031;
    1580:	8a e4       	ldi	r24, 0x4A	; 74
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	21 e3       	ldi	r18, 0x31	; 49
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	fc 01       	movw	r30, r24
    158a:	31 83       	std	Z+1, r19	; 0x01
    158c:	20 83       	st	Z, r18
	PORTD = 0xff;
    158e:	82 e3       	ldi	r24, 0x32	; 50
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	2f ef       	ldi	r18, 0xFF	; 255
    1594:	fc 01       	movw	r30, r24
    1596:	20 83       	st	Z, r18
	DDRD = 0xff;
    1598:	81 e3       	ldi	r24, 0x31	; 49
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	2f ef       	ldi	r18, 0xFF	; 255
    159e:	fc 01       	movw	r30, r24
    15a0:	20 83       	st	Z, r18
} 
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	08 95       	ret

000015a8 <int2_init>:
/*****************************************************************************
  initialize timer/counter2 to normal mode. Creates the alarm audio signal
 *****************************************************************************/
void int2_init(){
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1 << OCIE2);			//enable interrupts:
    15b0:	87 e5       	ldi	r24, 0x57	; 87
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	27 e5       	ldi	r18, 0x57	; 87
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	f9 01       	movw	r30, r18
    15ba:	20 81       	ld	r18, Z
    15bc:	20 68       	ori	r18, 0x80	; 128
    15be:	fc 01       	movw	r30, r24
    15c0:	20 83       	st	Z, r18
	TCCR2 |= (1 << WGM21) | (1 << WGM20) | (1 << COM21) | (1 << CS20); 	//CTC mode, prescale by 128
    15c2:	85 e4       	ldi	r24, 0x45	; 69
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	25 e4       	ldi	r18, 0x45	; 69
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	f9 01       	movw	r30, r18
    15cc:	20 81       	ld	r18, Z
    15ce:	29 66       	ori	r18, 0x69	; 105
    15d0:	fc 01       	movw	r30, r24
    15d2:	20 83       	st	Z, r18
}
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	08 95       	ret

000015da <int3_init>:

/*****************************************************************************
  initialize timer/counter3 to fast pwm mode. Create a duty cycle to control speaker volume
 *****************************************************************************/
void int3_init(){
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62

	TCCR3A |= (1<<COM3A1) | (1<<COM3A0) | (1 << WGM30);//fast pwm, set on match, clear@bottom, 
    15e2:	8b e8       	ldi	r24, 0x8B	; 139
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	2b e8       	ldi	r18, 0x8B	; 139
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	f9 01       	movw	r30, r18
    15ec:	20 81       	ld	r18, Z
    15ee:	21 6c       	ori	r18, 0xC1	; 193
    15f0:	fc 01       	movw	r30, r24
    15f2:	20 83       	st	Z, r18
	TCCR3B |= (1<< WGM32) | (1<<CS30);// | (1 << CS31);//use ICR1 as source for TOP, use clk/1
    15f4:	8a e8       	ldi	r24, 0x8A	; 138
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	2a e8       	ldi	r18, 0x8A	; 138
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	f9 01       	movw	r30, r18
    15fe:	20 81       	ld	r18, Z
    1600:	29 60       	ori	r18, 0x09	; 9
    1602:	fc 01       	movw	r30, r24
    1604:	20 83       	st	Z, r18
	TCCR3C= 0x00;                            //no forced compare 
    1606:	8c e8       	ldi	r24, 0x8C	; 140
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	fc 01       	movw	r30, r24
    160c:	10 82       	st	Z, r1
	//	ETIMSK |= (1<<OCIE3A);                         //enable timer 3 interrupt on TOV

	OCR3A = 0x0020;
    160e:	86 e8       	ldi	r24, 0x86	; 134
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	20 e2       	ldi	r18, 0x20	; 32
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	fc 01       	movw	r30, r24
    1618:	31 83       	std	Z+1, r19	; 0x01
    161a:	20 83       	st	Z, r18

}
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	08 95       	ret

00001622 <adc_init>:
/*****************************************************************************
  initialize the ADC: freerunning mode, clock 1024 prescale
 *****************************************************************************/
void adc_init(){
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
	PORTF |= (1 << 2);
    162a:	82 e6       	ldi	r24, 0x62	; 98
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	22 e6       	ldi	r18, 0x62	; 98
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	f9 01       	movw	r30, r18
    1634:	20 81       	ld	r18, Z
    1636:	24 60       	ori	r18, 0x04	; 4
    1638:	fc 01       	movw	r30, r24
    163a:	20 83       	st	Z, r18
	DDRF &= ~(1 << 2);
    163c:	81 e6       	ldi	r24, 0x61	; 97
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	21 e6       	ldi	r18, 0x61	; 97
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	f9 01       	movw	r30, r18
    1646:	20 81       	ld	r18, Z
    1648:	2b 7f       	andi	r18, 0xFB	; 251
    164a:	fc 01       	movw	r30, r24
    164c:	20 83       	st	Z, r18
	ADCSR |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
    164e:	86 e2       	ldi	r24, 0x26	; 38
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	26 e2       	ldi	r18, 0x26	; 38
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	f9 01       	movw	r30, r18
    1658:	20 81       	ld	r18, Z
    165a:	27 60       	ori	r18, 0x07	; 7
    165c:	fc 01       	movw	r30, r24
    165e:	20 83       	st	Z, r18
	//	ADCSR |= (1 << ADEN);
	ADCSR |= (1 << ADFR);
    1660:	86 e2       	ldi	r24, 0x26	; 38
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	26 e2       	ldi	r18, 0x26	; 38
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	f9 01       	movw	r30, r18
    166a:	20 81       	ld	r18, Z
    166c:	20 62       	ori	r18, 0x20	; 32
    166e:	fc 01       	movw	r30, r24
    1670:	20 83       	st	Z, r18
	ADMUX = 0x62;
    1672:	87 e2       	ldi	r24, 0x27	; 39
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	22 e6       	ldi	r18, 0x62	; 98
    1678:	fc 01       	movw	r30, r24
    167a:	20 83       	st	Z, r18
	ADCSR |= (1 << ADIE);
    167c:	86 e2       	ldi	r24, 0x26	; 38
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	26 e2       	ldi	r18, 0x26	; 38
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	f9 01       	movw	r30, r18
    1686:	20 81       	ld	r18, Z
    1688:	28 60       	ori	r18, 0x08	; 8
    168a:	fc 01       	movw	r30, r24
    168c:	20 83       	st	Z, r18
	ADCSR |= (1 << ADSC);
    168e:	86 e2       	ldi	r24, 0x26	; 38
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	26 e2       	ldi	r18, 0x26	; 38
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	f9 01       	movw	r30, r18
    1698:	20 81       	ld	r18, Z
    169a:	20 64       	ori	r18, 0x40	; 64
    169c:	fc 01       	movw	r30, r24
    169e:	20 83       	st	Z, r18

}
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	08 95       	ret

000016a6 <DebounceSwitch>:

//debouncing switch checks for 12 consecutive signals from same button before returning 1
void DebounceSwitch(){
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <DebounceSwitch+0x6>
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
	uint8_t i,j;
	state[check_index++%MAX_CHECKS]=0xff - PINA;
    16b0:	80 91 6f 01 	lds	r24, 0x016F
    16b4:	28 2f       	mov	r18, r24
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	82 0f       	add	r24, r18
    16ba:	80 93 6f 01 	sts	0x016F, r24
    16be:	8b ea       	ldi	r24, 0xAB	; 171
    16c0:	28 9f       	mul	r18, r24
    16c2:	81 2d       	mov	r24, r1
    16c4:	11 24       	eor	r1, r1
    16c6:	98 2f       	mov	r25, r24
    16c8:	96 95       	lsr	r25
    16ca:	96 95       	lsr	r25
    16cc:	96 95       	lsr	r25
    16ce:	89 2f       	mov	r24, r25
    16d0:	88 0f       	add	r24, r24
    16d2:	89 0f       	add	r24, r25
    16d4:	88 0f       	add	r24, r24
    16d6:	88 0f       	add	r24, r24
    16d8:	92 2f       	mov	r25, r18
    16da:	98 1b       	sub	r25, r24
    16dc:	89 2f       	mov	r24, r25
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	29 e3       	ldi	r18, 0x39	; 57
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	f9 01       	movw	r30, r18
    16e6:	20 81       	ld	r18, Z
    16e8:	20 95       	com	r18
    16ea:	8d 5a       	subi	r24, 0xAD	; 173
    16ec:	9e 4f       	sbci	r25, 0xFE	; 254
    16ee:	fc 01       	movw	r30, r24
    16f0:	20 83       	st	Z, r18
	j=0xff;
    16f2:	8f ef       	ldi	r24, 0xFF	; 255
    16f4:	8a 83       	std	Y+2, r24	; 0x02
	for(i=0; i<MAX_CHECKS-1;i++)j=j & state[i];
    16f6:	19 82       	std	Y+1, r1	; 0x01
    16f8:	0d c0       	rjmp	.+26     	; 0x1714 <DebounceSwitch+0x6e>
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	88 2f       	mov	r24, r24
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	8d 5a       	subi	r24, 0xAD	; 173
    1702:	9e 4f       	sbci	r25, 0xFE	; 254
    1704:	fc 01       	movw	r30, r24
    1706:	80 81       	ld	r24, Z
    1708:	9a 81       	ldd	r25, Y+2	; 0x02
    170a:	89 23       	and	r24, r25
    170c:	8a 83       	std	Y+2, r24	; 0x02
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	8f 5f       	subi	r24, 0xFF	; 255
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	8b 30       	cpi	r24, 0x0B	; 11
    1718:	80 f3       	brcs	.-32     	; 0x16fa <DebounceSwitch+0x54>
	debounced_state = j;
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	80 93 18 01 	sts	0x0118, r24
}
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	08 95       	ret

0000172a <alarm_on>:
void alarm_on(){
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= (1 << OCIE1A);
    1732:	87 e5       	ldi	r24, 0x57	; 87
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	27 e5       	ldi	r18, 0x57	; 87
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	f9 01       	movw	r30, r18
    173c:	20 81       	ld	r18, Z
    173e:	20 61       	ori	r18, 0x10	; 16
    1740:	fc 01       	movw	r30, r24
    1742:	20 83       	st	Z, r18
}
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	08 95       	ret

0000174a <alarm_off>:

void alarm_off(){
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
	TIMSK &= ~(1 << OCIE1A);
    1752:	87 e5       	ldi	r24, 0x57	; 87
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	27 e5       	ldi	r18, 0x57	; 87
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	f9 01       	movw	r30, r18
    175c:	20 81       	ld	r18, Z
    175e:	2f 7e       	andi	r18, 0xEF	; 239
    1760:	fc 01       	movw	r30, r24
    1762:	20 83       	st	Z, r18
}
    1764:	df 91       	pop	r29
    1766:	cf 91       	pop	r28
    1768:	08 95       	ret

0000176a <segsum>:
//returns the display to segmentn_data in decimal
void segsum(uint32_t sum, int c_mode, int am_s) {
    176a:	cf 92       	push	r12
    176c:	df 92       	push	r13
    176e:	ef 92       	push	r14
    1770:	ff 92       	push	r15
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	e2 97       	sbiw	r28, 0x32	; 50
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	6b 87       	std	Y+11, r22	; 0x0b
    1788:	7c 87       	std	Y+12, r23	; 0x0c
    178a:	8d 87       	std	Y+13, r24	; 0x0d
    178c:	9e 87       	std	Y+14, r25	; 0x0e
    178e:	58 8b       	std	Y+16, r21	; 0x10
    1790:	4f 87       	std	Y+15, r20	; 0x0f
    1792:	3a 8b       	std	Y+18, r19	; 0x12
    1794:	29 8b       	std	Y+17, r18	; 0x11
	int num_d=0, i;
    1796:	1a 82       	std	Y+2, r1	; 0x02
    1798:	19 82       	std	Y+1, r1	; 0x01
	uint8_t hour, min;
	int temp, temp2; 
	temp = sum;
    179a:	8b 85       	ldd	r24, Y+11	; 0x0b
    179c:	9c 85       	ldd	r25, Y+12	; 0x0c
    179e:	9f 83       	std	Y+7, r25	; 0x07
    17a0:	8e 83       	std	Y+6, r24	; 0x06
	while(sum >= (pow(10, num_d))) {num_d++;}//record number of digits
    17a2:	05 c0       	rjmp	.+10     	; 0x17ae <segsum+0x44>
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	01 96       	adiw	r24, 0x01	; 1
    17aa:	9a 83       	std	Y+2, r25	; 0x02
    17ac:	89 83       	std	Y+1, r24	; 0x01
    17ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    17b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17b6:	0e 94 94 11 	call	0x2328	; 0x2328 <__floatunsisf>
    17ba:	6b 01       	movw	r12, r22
    17bc:	7c 01       	movw	r14, r24
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	9a 81       	ldd	r25, Y+2	; 0x02
    17c2:	aa 27       	eor	r26, r26
    17c4:	97 fd       	sbrc	r25, 7
    17c6:	a0 95       	com	r26
    17c8:	ba 2f       	mov	r27, r26
    17ca:	bc 01       	movw	r22, r24
    17cc:	cd 01       	movw	r24, r26
    17ce:	0e 94 96 11 	call	0x232c	; 0x232c <__floatsisf>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	9c 01       	movw	r18, r24
    17d8:	ad 01       	movw	r20, r26
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	80 e2       	ldi	r24, 0x20	; 32
    17e0:	91 e4       	ldi	r25, 0x41	; 65
    17e2:	0e 94 ad 12 	call	0x255a	; 0x255a <pow>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	9c 01       	movw	r18, r24
    17ec:	ad 01       	movw	r20, r26
    17ee:	c7 01       	movw	r24, r14
    17f0:	b6 01       	movw	r22, r12
    17f2:	0e 94 46 12 	call	0x248c	; 0x248c <__gesf2>
    17f6:	88 23       	and	r24, r24
    17f8:	ac f6       	brge	.-86     	; 0x17a4 <segsum+0x3a>


	switch(c_mode){
    17fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    17fc:	98 89       	ldd	r25, Y+16	; 0x10
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	91 05       	cpc	r25, r1
    1802:	09 f4       	brne	.+2      	; 0x1806 <segsum+0x9c>
    1804:	b9 c0       	rjmp	.+370    	; 0x1978 <segsum+0x20e>
    1806:	82 30       	cpi	r24, 0x02	; 2
    1808:	91 05       	cpc	r25, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <segsum+0xa4>
    180c:	3a c1       	rjmp	.+628    	; 0x1a82 <segsum+0x318>
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	09 f0       	breq	.+2      	; 0x1814 <segsum+0xaa>
    1812:	be c1       	rjmp	.+892    	; 0x1b90 <segsum+0x426>

		case DECIMAL:
			//seg segment_data array correctly
			temp = sum/1000;
    1814:	8b 85       	ldd	r24, Y+11	; 0x0b
    1816:	9c 85       	ldd	r25, Y+12	; 0x0c
    1818:	ad 85       	ldd	r26, Y+13	; 0x0d
    181a:	be 85       	ldd	r27, Y+14	; 0x0e
    181c:	28 ee       	ldi	r18, 0xE8	; 232
    181e:	33 e0       	ldi	r19, 0x03	; 3
    1820:	40 e0       	ldi	r20, 0x00	; 0
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	bc 01       	movw	r22, r24
    1826:	cd 01       	movw	r24, r26
    1828:	0e 94 a7 10 	call	0x214e	; 0x214e <__udivmodsi4>
    182c:	da 01       	movw	r26, r20
    182e:	c9 01       	movw	r24, r18
    1830:	9f 83       	std	Y+7, r25	; 0x07
    1832:	8e 83       	std	Y+6, r24	; 0x06
			temp2=temp*1000;
    1834:	4e 81       	ldd	r20, Y+6	; 0x06
    1836:	5f 81       	ldd	r21, Y+7	; 0x07
    1838:	28 ee       	ldi	r18, 0xE8	; 232
    183a:	33 e0       	ldi	r19, 0x03	; 3
    183c:	42 9f       	mul	r20, r18
    183e:	c0 01       	movw	r24, r0
    1840:	43 9f       	mul	r20, r19
    1842:	90 0d       	add	r25, r0
    1844:	52 9f       	mul	r21, r18
    1846:	90 0d       	add	r25, r0
    1848:	11 24       	eor	r1, r1
    184a:	99 87       	std	Y+9, r25	; 0x09
    184c:	88 87       	std	Y+8, r24	; 0x08
			segment_data[4] = dec_to_7seg[temp];
    184e:	8e 81       	ldd	r24, Y+6	; 0x06
    1850:	9f 81       	ldd	r25, Y+7	; 0x07
    1852:	84 5f       	subi	r24, 0xF4	; 244
    1854:	9e 4f       	sbci	r25, 0xFE	; 254
    1856:	fc 01       	movw	r30, r24
    1858:	80 81       	ld	r24, Z
    185a:	80 93 0b 01 	sts	0x010B, r24
			temp = sum - temp2;
    185e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1860:	3c 85       	ldd	r19, Y+12	; 0x0c
    1862:	88 85       	ldd	r24, Y+8	; 0x08
    1864:	99 85       	ldd	r25, Y+9	; 0x09
    1866:	a9 01       	movw	r20, r18
    1868:	48 1b       	sub	r20, r24
    186a:	59 0b       	sbc	r21, r25
    186c:	ca 01       	movw	r24, r20
    186e:	9f 83       	std	Y+7, r25	; 0x07
    1870:	8e 83       	std	Y+6, r24	; 0x06
			temp = temp/100;
    1872:	8e 81       	ldd	r24, Y+6	; 0x06
    1874:	9f 81       	ldd	r25, Y+7	; 0x07
    1876:	24 e6       	ldi	r18, 0x64	; 100
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	b9 01       	movw	r22, r18
    187c:	0e 94 93 10 	call	0x2126	; 0x2126 <__divmodhi4>
    1880:	cb 01       	movw	r24, r22
    1882:	9f 83       	std	Y+7, r25	; 0x07
    1884:	8e 83       	std	Y+6, r24	; 0x06
			temp2+=temp*100;
    1886:	2e 81       	ldd	r18, Y+6	; 0x06
    1888:	3f 81       	ldd	r19, Y+7	; 0x07
    188a:	44 e6       	ldi	r20, 0x64	; 100
    188c:	42 9f       	mul	r20, r18
    188e:	c0 01       	movw	r24, r0
    1890:	43 9f       	mul	r20, r19
    1892:	90 0d       	add	r25, r0
    1894:	11 24       	eor	r1, r1
    1896:	28 85       	ldd	r18, Y+8	; 0x08
    1898:	39 85       	ldd	r19, Y+9	; 0x09
    189a:	82 0f       	add	r24, r18
    189c:	93 1f       	adc	r25, r19
    189e:	99 87       	std	Y+9, r25	; 0x09
    18a0:	88 87       	std	Y+8, r24	; 0x08
			segment_data[3] = dec_to_7seg[temp];
    18a2:	8e 81       	ldd	r24, Y+6	; 0x06
    18a4:	9f 81       	ldd	r25, Y+7	; 0x07
    18a6:	84 5f       	subi	r24, 0xF4	; 244
    18a8:	9e 4f       	sbci	r25, 0xFE	; 254
    18aa:	fc 01       	movw	r30, r24
    18ac:	80 81       	ld	r24, Z
    18ae:	80 93 0a 01 	sts	0x010A, r24
			temp = sum - temp2;
    18b2:	2b 85       	ldd	r18, Y+11	; 0x0b
    18b4:	3c 85       	ldd	r19, Y+12	; 0x0c
    18b6:	88 85       	ldd	r24, Y+8	; 0x08
    18b8:	99 85       	ldd	r25, Y+9	; 0x09
    18ba:	a9 01       	movw	r20, r18
    18bc:	48 1b       	sub	r20, r24
    18be:	59 0b       	sbc	r21, r25
    18c0:	ca 01       	movw	r24, r20
    18c2:	9f 83       	std	Y+7, r25	; 0x07
    18c4:	8e 83       	std	Y+6, r24	; 0x06
			temp = temp/10;
    18c6:	8e 81       	ldd	r24, Y+6	; 0x06
    18c8:	9f 81       	ldd	r25, Y+7	; 0x07
    18ca:	2a e0       	ldi	r18, 0x0A	; 10
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	b9 01       	movw	r22, r18
    18d0:	0e 94 93 10 	call	0x2126	; 0x2126 <__divmodhi4>
    18d4:	cb 01       	movw	r24, r22
    18d6:	9f 83       	std	Y+7, r25	; 0x07
    18d8:	8e 83       	std	Y+6, r24	; 0x06
			temp2+=temp*10;
    18da:	8e 81       	ldd	r24, Y+6	; 0x06
    18dc:	9f 81       	ldd	r25, Y+7	; 0x07
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	9c 01       	movw	r18, r24
    18e4:	22 0f       	add	r18, r18
    18e6:	33 1f       	adc	r19, r19
    18e8:	22 0f       	add	r18, r18
    18ea:	33 1f       	adc	r19, r19
    18ec:	82 0f       	add	r24, r18
    18ee:	93 1f       	adc	r25, r19
    18f0:	28 85       	ldd	r18, Y+8	; 0x08
    18f2:	39 85       	ldd	r19, Y+9	; 0x09
    18f4:	82 0f       	add	r24, r18
    18f6:	93 1f       	adc	r25, r19
    18f8:	99 87       	std	Y+9, r25	; 0x09
    18fa:	88 87       	std	Y+8, r24	; 0x08
			segment_data[1] = dec_to_7seg[temp];
    18fc:	8e 81       	ldd	r24, Y+6	; 0x06
    18fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1900:	84 5f       	subi	r24, 0xF4	; 244
    1902:	9e 4f       	sbci	r25, 0xFE	; 254
    1904:	fc 01       	movw	r30, r24
    1906:	80 81       	ld	r24, Z
    1908:	80 93 08 01 	sts	0x0108, r24
			temp = sum - temp2;
    190c:	2b 85       	ldd	r18, Y+11	; 0x0b
    190e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1910:	88 85       	ldd	r24, Y+8	; 0x08
    1912:	99 85       	ldd	r25, Y+9	; 0x09
    1914:	a9 01       	movw	r20, r18
    1916:	48 1b       	sub	r20, r24
    1918:	59 0b       	sbc	r21, r25
    191a:	ca 01       	movw	r24, r20
    191c:	9f 83       	std	Y+7, r25	; 0x07
    191e:	8e 83       	std	Y+6, r24	; 0x06
			segment_data[0] = dec_to_7seg[temp];
    1920:	8e 81       	ldd	r24, Y+6	; 0x06
    1922:	9f 81       	ldd	r25, Y+7	; 0x07
    1924:	84 5f       	subi	r24, 0xF4	; 244
    1926:	9e 4f       	sbci	r25, 0xFE	; 254
    1928:	fc 01       	movw	r30, r24
    192a:	80 81       	ld	r24, Z
    192c:	80 93 07 01 	sts	0x0107, r24

			//remove leading 0's
			if(num_d>2) {num_d++;}
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	83 30       	cpi	r24, 0x03	; 3
    1936:	91 05       	cpc	r25, r1
    1938:	2c f0       	brlt	.+10     	; 0x1944 <segsum+0x1da>
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	9a 83       	std	Y+2, r25	; 0x02
    1942:	89 83       	std	Y+1, r24	; 0x01
			for(i=5;i>num_d;i--) {segment_data[i-1] = 0b11111111;}	
    1944:	85 e0       	ldi	r24, 0x05	; 5
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	9c 83       	std	Y+4, r25	; 0x04
    194a:	8b 83       	std	Y+3, r24	; 0x03
    194c:	0d c0       	rjmp	.+26     	; 0x1968 <segsum+0x1fe>
    194e:	8b 81       	ldd	r24, Y+3	; 0x03
    1950:	9c 81       	ldd	r25, Y+4	; 0x04
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	89 5f       	subi	r24, 0xF9	; 249
    1956:	9e 4f       	sbci	r25, 0xFE	; 254
    1958:	2f ef       	ldi	r18, 0xFF	; 255
    195a:	fc 01       	movw	r30, r24
    195c:	20 83       	st	Z, r18
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	9c 83       	std	Y+4, r25	; 0x04
    1966:	8b 83       	std	Y+3, r24	; 0x03
    1968:	2b 81       	ldd	r18, Y+3	; 0x03
    196a:	3c 81       	ldd	r19, Y+4	; 0x04
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	82 17       	cp	r24, r18
    1972:	93 07       	cpc	r25, r19
    1974:	64 f3       	brlt	.-40     	; 0x194e <segsum+0x1e4>
			break;
    1976:	0c c1       	rjmp	.+536    	; 0x1b90 <segsum+0x426>
		case TWELVEHOUR:
			hour = (sum/60)%12;
    1978:	8b 85       	ldd	r24, Y+11	; 0x0b
    197a:	9c 85       	ldd	r25, Y+12	; 0x0c
    197c:	ad 85       	ldd	r26, Y+13	; 0x0d
    197e:	be 85       	ldd	r27, Y+14	; 0x0e
    1980:	2c e3       	ldi	r18, 0x3C	; 60
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	bc 01       	movw	r22, r24
    198a:	cd 01       	movw	r24, r26
    198c:	0e 94 a7 10 	call	0x214e	; 0x214e <__udivmodsi4>
    1990:	da 01       	movw	r26, r20
    1992:	c9 01       	movw	r24, r18
    1994:	2c e0       	ldi	r18, 0x0C	; 12
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e0       	ldi	r20, 0x00	; 0
    199a:	50 e0       	ldi	r21, 0x00	; 0
    199c:	bc 01       	movw	r22, r24
    199e:	cd 01       	movw	r24, r26
    19a0:	0e 94 a7 10 	call	0x214e	; 0x214e <__udivmodsi4>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	8d 83       	std	Y+5, r24	; 0x05
			min = (sum)%60;
    19aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    19ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    19ae:	ad 85       	ldd	r26, Y+13	; 0x0d
    19b0:	be 85       	ldd	r27, Y+14	; 0x0e
    19b2:	2c e3       	ldi	r18, 0x3C	; 60
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	40 e0       	ldi	r20, 0x00	; 0
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	bc 01       	movw	r22, r24
    19bc:	cd 01       	movw	r24, r26
    19be:	0e 94 a7 10 	call	0x214e	; 0x214e <__udivmodsi4>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	8a 87       	std	Y+10, r24	; 0x0a
			if (hour == 0) hour = 12;
    19c8:	8d 81       	ldd	r24, Y+5	; 0x05
    19ca:	88 23       	and	r24, r24
    19cc:	11 f4       	brne	.+4      	; 0x19d2 <segsum+0x268>
    19ce:	8c e0       	ldi	r24, 0x0C	; 12
    19d0:	8d 83       	std	Y+5, r24	; 0x05


			segment_data[0] = dec_to_7seg[min%10];
    19d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d4:	8d ec       	ldi	r24, 0xCD	; 205
    19d6:	98 9f       	mul	r25, r24
    19d8:	81 2d       	mov	r24, r1
    19da:	11 24       	eor	r1, r1
    19dc:	86 95       	lsr	r24
    19de:	86 95       	lsr	r24
    19e0:	86 95       	lsr	r24
    19e2:	88 0f       	add	r24, r24
    19e4:	28 2f       	mov	r18, r24
    19e6:	22 0f       	add	r18, r18
    19e8:	22 0f       	add	r18, r18
    19ea:	82 0f       	add	r24, r18
    19ec:	f9 2f       	mov	r31, r25
    19ee:	f8 1b       	sub	r31, r24
    19f0:	8f 2f       	mov	r24, r31
    19f2:	88 2f       	mov	r24, r24
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	84 5f       	subi	r24, 0xF4	; 244
    19f8:	9e 4f       	sbci	r25, 0xFE	; 254
    19fa:	fc 01       	movw	r30, r24
    19fc:	80 81       	ld	r24, Z
    19fe:	80 93 07 01 	sts	0x0107, r24
			segment_data[1] = dec_to_7seg[min/10];
    1a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a04:	8d ec       	ldi	r24, 0xCD	; 205
    1a06:	98 9f       	mul	r25, r24
    1a08:	81 2d       	mov	r24, r1
    1a0a:	11 24       	eor	r1, r1
    1a0c:	86 95       	lsr	r24
    1a0e:	86 95       	lsr	r24
    1a10:	86 95       	lsr	r24
    1a12:	88 2f       	mov	r24, r24
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	84 5f       	subi	r24, 0xF4	; 244
    1a18:	9e 4f       	sbci	r25, 0xFE	; 254
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	80 81       	ld	r24, Z
    1a1e:	80 93 08 01 	sts	0x0108, r24
			segment_data[3] = dec_to_7seg[hour%10];
    1a22:	9d 81       	ldd	r25, Y+5	; 0x05
    1a24:	8d ec       	ldi	r24, 0xCD	; 205
    1a26:	98 9f       	mul	r25, r24
    1a28:	81 2d       	mov	r24, r1
    1a2a:	11 24       	eor	r1, r1
    1a2c:	86 95       	lsr	r24
    1a2e:	86 95       	lsr	r24
    1a30:	86 95       	lsr	r24
    1a32:	88 0f       	add	r24, r24
    1a34:	28 2f       	mov	r18, r24
    1a36:	22 0f       	add	r18, r18
    1a38:	22 0f       	add	r18, r18
    1a3a:	82 0f       	add	r24, r18
    1a3c:	f9 2f       	mov	r31, r25
    1a3e:	f8 1b       	sub	r31, r24
    1a40:	8f 2f       	mov	r24, r31
    1a42:	88 2f       	mov	r24, r24
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	84 5f       	subi	r24, 0xF4	; 244
    1a48:	9e 4f       	sbci	r25, 0xFE	; 254
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	80 81       	ld	r24, Z
    1a4e:	80 93 0a 01 	sts	0x010A, r24
			if(hour < 10) {segment_data[4] = 0b11111111;}	
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	8a 30       	cpi	r24, 0x0A	; 10
    1a56:	20 f4       	brcc	.+8      	; 0x1a60 <segsum+0x2f6>
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	80 93 0b 01 	sts	0x010B, r24
			else segment_data[4] = dec_to_7seg[hour/10];
			break;
    1a5e:	98 c0       	rjmp	.+304    	; 0x1b90 <segsum+0x426>

			segment_data[0] = dec_to_7seg[min%10];
			segment_data[1] = dec_to_7seg[min/10];
			segment_data[3] = dec_to_7seg[hour%10];
			if(hour < 10) {segment_data[4] = 0b11111111;}	
			else segment_data[4] = dec_to_7seg[hour/10];
    1a60:	9d 81       	ldd	r25, Y+5	; 0x05
    1a62:	8d ec       	ldi	r24, 0xCD	; 205
    1a64:	98 9f       	mul	r25, r24
    1a66:	81 2d       	mov	r24, r1
    1a68:	11 24       	eor	r1, r1
    1a6a:	86 95       	lsr	r24
    1a6c:	86 95       	lsr	r24
    1a6e:	86 95       	lsr	r24
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	84 5f       	subi	r24, 0xF4	; 244
    1a76:	9e 4f       	sbci	r25, 0xFE	; 254
    1a78:	fc 01       	movw	r30, r24
    1a7a:	80 81       	ld	r24, Z
    1a7c:	80 93 0b 01 	sts	0x010B, r24
			break;
    1a80:	87 c0       	rjmp	.+270    	; 0x1b90 <segsum+0x426>

		case TWENTYFOURHOUR:
			hour = (sum/60)%12;
    1a82:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a84:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a86:	ad 85       	ldd	r26, Y+13	; 0x0d
    1a88:	be 85       	ldd	r27, Y+14	; 0x0e
    1a8a:	2c e3       	ldi	r18, 0x3C	; 60
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	50 e0       	ldi	r21, 0x00	; 0
    1a92:	bc 01       	movw	r22, r24
    1a94:	cd 01       	movw	r24, r26
    1a96:	0e 94 a7 10 	call	0x214e	; 0x214e <__udivmodsi4>
    1a9a:	da 01       	movw	r26, r20
    1a9c:	c9 01       	movw	r24, r18
    1a9e:	2c e0       	ldi	r18, 0x0C	; 12
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e0       	ldi	r20, 0x00	; 0
    1aa4:	50 e0       	ldi	r21, 0x00	; 0
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	0e 94 a7 10 	call	0x214e	; 0x214e <__udivmodsi4>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
			min = (sum)%60;
    1ab4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ab6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ab8:	ad 85       	ldd	r26, Y+13	; 0x0d
    1aba:	be 85       	ldd	r27, Y+14	; 0x0e
    1abc:	2c e3       	ldi	r18, 0x3C	; 60
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e0       	ldi	r20, 0x00	; 0
    1ac2:	50 e0       	ldi	r21, 0x00	; 0
    1ac4:	bc 01       	movw	r22, r24
    1ac6:	cd 01       	movw	r24, r26
    1ac8:	0e 94 a7 10 	call	0x214e	; 0x214e <__udivmodsi4>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	8a 87       	std	Y+10, r24	; 0x0a

			if(am_s) hour += 12;
    1ad2:	89 89       	ldd	r24, Y+17	; 0x11
    1ad4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	19 f0       	breq	.+6      	; 0x1ae0 <segsum+0x376>
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	84 5f       	subi	r24, 0xF4	; 244
    1ade:	8d 83       	std	Y+5, r24	; 0x05

			segment_data[0] = dec_to_7seg[min%10];
    1ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae2:	8d ec       	ldi	r24, 0xCD	; 205
    1ae4:	98 9f       	mul	r25, r24
    1ae6:	81 2d       	mov	r24, r1
    1ae8:	11 24       	eor	r1, r1
    1aea:	86 95       	lsr	r24
    1aec:	86 95       	lsr	r24
    1aee:	86 95       	lsr	r24
    1af0:	88 0f       	add	r24, r24
    1af2:	28 2f       	mov	r18, r24
    1af4:	22 0f       	add	r18, r18
    1af6:	22 0f       	add	r18, r18
    1af8:	82 0f       	add	r24, r18
    1afa:	f9 2f       	mov	r31, r25
    1afc:	f8 1b       	sub	r31, r24
    1afe:	8f 2f       	mov	r24, r31
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	84 5f       	subi	r24, 0xF4	; 244
    1b06:	9e 4f       	sbci	r25, 0xFE	; 254
    1b08:	fc 01       	movw	r30, r24
    1b0a:	80 81       	ld	r24, Z
    1b0c:	80 93 07 01 	sts	0x0107, r24
			segment_data[1] = dec_to_7seg[min/10];
    1b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b12:	8d ec       	ldi	r24, 0xCD	; 205
    1b14:	98 9f       	mul	r25, r24
    1b16:	81 2d       	mov	r24, r1
    1b18:	11 24       	eor	r1, r1
    1b1a:	86 95       	lsr	r24
    1b1c:	86 95       	lsr	r24
    1b1e:	86 95       	lsr	r24
    1b20:	88 2f       	mov	r24, r24
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	84 5f       	subi	r24, 0xF4	; 244
    1b26:	9e 4f       	sbci	r25, 0xFE	; 254
    1b28:	fc 01       	movw	r30, r24
    1b2a:	80 81       	ld	r24, Z
    1b2c:	80 93 08 01 	sts	0x0108, r24
			segment_data[3] = dec_to_7seg[hour%10];
    1b30:	9d 81       	ldd	r25, Y+5	; 0x05
    1b32:	8d ec       	ldi	r24, 0xCD	; 205
    1b34:	98 9f       	mul	r25, r24
    1b36:	81 2d       	mov	r24, r1
    1b38:	11 24       	eor	r1, r1
    1b3a:	86 95       	lsr	r24
    1b3c:	86 95       	lsr	r24
    1b3e:	86 95       	lsr	r24
    1b40:	88 0f       	add	r24, r24
    1b42:	28 2f       	mov	r18, r24
    1b44:	22 0f       	add	r18, r18
    1b46:	22 0f       	add	r18, r18
    1b48:	82 0f       	add	r24, r18
    1b4a:	f9 2f       	mov	r31, r25
    1b4c:	f8 1b       	sub	r31, r24
    1b4e:	8f 2f       	mov	r24, r31
    1b50:	88 2f       	mov	r24, r24
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	84 5f       	subi	r24, 0xF4	; 244
    1b56:	9e 4f       	sbci	r25, 0xFE	; 254
    1b58:	fc 01       	movw	r30, r24
    1b5a:	80 81       	ld	r24, Z
    1b5c:	80 93 0a 01 	sts	0x010A, r24
			if(hour < 10) {segment_data[4] = 0b11111111;}	
    1b60:	8d 81       	ldd	r24, Y+5	; 0x05
    1b62:	8a 30       	cpi	r24, 0x0A	; 10
    1b64:	20 f4       	brcc	.+8      	; 0x1b6e <segsum+0x404>
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	80 93 0b 01 	sts	0x010B, r24
    1b6c:	10 c0       	rjmp	.+32     	; 0x1b8e <segsum+0x424>
			else segment_data[4] = dec_to_7seg[hour/10];
    1b6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b70:	8d ec       	ldi	r24, 0xCD	; 205
    1b72:	98 9f       	mul	r25, r24
    1b74:	81 2d       	mov	r24, r1
    1b76:	11 24       	eor	r1, r1
    1b78:	86 95       	lsr	r24
    1b7a:	86 95       	lsr	r24
    1b7c:	86 95       	lsr	r24
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	84 5f       	subi	r24, 0xF4	; 244
    1b84:	9e 4f       	sbci	r25, 0xFE	; 254
    1b86:	fc 01       	movw	r30, r24
    1b88:	80 81       	ld	r24, Z
    1b8a:	80 93 0b 01 	sts	0x010B, r24
			break;
    1b8e:	00 00       	nop


	}
}
    1b90:	e2 96       	adiw	r28, 0x32	; 50
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	df 91       	pop	r29
    1b9e:	cf 91       	pop	r28
    1ba0:	ff 90       	pop	r15
    1ba2:	ef 90       	pop	r14
    1ba4:	df 90       	pop	r13
    1ba6:	cf 90       	pop	r12
    1ba8:	08 95       	ret

00001baa <main>:



uint8_t main()
{
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	e5 97       	sbiw	r28, 0x35	; 53
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
	int i, temp, delay;

	uint8_t aset=(1 << 7), norm=0x00, t_mode=0x00;
    1bbe:	80 e8       	ldi	r24, 0x80	; 128
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
    1bc2:	1c 82       	std	Y+4, r1	; 0x04
    1bc4:	1d 82       	std	Y+5, r1	; 0x05

	int0_init();
    1bc6:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <int0_init>
	int1_init();
    1bca:	0e 94 a2 0a 	call	0x1544	; 0x1544 <int1_init>
	int3_init();
    1bce:	0e 94 ed 0a 	call	0x15da	; 0x15da <int3_init>
	//set port bits 4-7 B as outputs
	spi_init();    //initalize SPI port
    1bd2:	0e 94 c1 07 	call	0xf82	; 0xf82 <spi_init>
	sei();         //enable interrupts before entering loop
    1bd6:	78 94       	sei

	DDRD = 0xff;
    1bd8:	81 e3       	ldi	r24, 0x31	; 49
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	2f ef       	ldi	r18, 0xFF	; 255
    1bde:	fc 01       	movw	r30, r24
    1be0:	20 83       	st	Z, r18
	DDRB = 0xff;
    1be2:	87 e3       	ldi	r24, 0x37	; 55
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	2f ef       	ldi	r18, 0xFF	; 255
    1be8:	fc 01       	movw	r30, r24
    1bea:	20 83       	st	Z, r18
	DDRC = 0xff;
    1bec:	84 e3       	ldi	r24, 0x34	; 52
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	2f ef       	ldi	r18, 0xFF	; 255
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	20 83       	st	Z, r18
	PORTC = 0x00;
    1bf6:	85 e3       	ldi	r24, 0x35	; 53
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	10 82       	st	Z, r1
	DDRA = 0xff;
    1bfe:	8a e3       	ldi	r24, 0x3A	; 58
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	2f ef       	ldi	r18, 0xFF	; 255
    1c04:	fc 01       	movw	r30, r24
    1c06:	20 83       	st	Z, r18
	PORTA = 0x00;
    1c08:	8b e3       	ldi	r24, 0x3B	; 59
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	10 82       	st	Z, r1
	SPDR = 0x01;
    1c10:	8f e2       	ldi	r24, 0x2F	; 47
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	21 e0       	ldi	r18, 0x01	; 1
    1c16:	fc 01       	movw	r30, r24
    1c18:	20 83       	st	Z, r18
	DDRF = 0xff;
    1c1a:	81 e6       	ldi	r24, 0x61	; 97
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	2f ef       	ldi	r18, 0xFF	; 255
    1c20:	fc 01       	movw	r30, r24
    1c22:	20 83       	st	Z, r18
	DDRE = 0xff;
    1c24:	82 e2       	ldi	r24, 0x22	; 34
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	2f ef       	ldi	r18, 0xFF	; 255
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	20 83       	st	Z, r18
	PORTE = 0x00;
    1c2e:	83 e2       	ldi	r24, 0x23	; 35
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	fc 01       	movw	r30, r24
    1c34:	10 82       	st	Z, r1
	while(1)
	{



		if(button>=0){ //if button is pressed toggle mode
    1c36:	80 91 24 01 	lds	r24, 0x0124
    1c3a:	90 91 25 01 	lds	r25, 0x0125
    1c3e:	99 23       	and	r25, r25
    1c40:	0c f4       	brge	.+2      	; 0x1c44 <main+0x9a>
    1c42:	81 c0       	rjmp	.+258    	; 0x1d46 <main+0x19c>


			switch(button){
    1c44:	80 91 24 01 	lds	r24, 0x0124
    1c48:	90 91 25 01 	lds	r25, 0x0125
    1c4c:	84 30       	cpi	r24, 0x04	; 4
    1c4e:	91 05       	cpc	r25, r1
    1c50:	b9 f1       	breq	.+110    	; 0x1cc0 <main+0x116>
    1c52:	85 30       	cpi	r24, 0x05	; 5
    1c54:	91 05       	cpc	r25, r1
    1c56:	3c f4       	brge	.+14     	; 0x1c66 <main+0xbc>
    1c58:	81 30       	cpi	r24, 0x01	; 1
    1c5a:	91 05       	cpc	r25, r1
    1c5c:	71 f0       	breq	.+28     	; 0x1c7a <main+0xd0>
    1c5e:	82 30       	cpi	r24, 0x02	; 2
    1c60:	91 05       	cpc	r25, r1
    1c62:	01 f1       	breq	.+64     	; 0x1ca4 <main+0xfa>
    1c64:	3a c0       	rjmp	.+116    	; 0x1cda <main+0x130>
    1c66:	80 31       	cpi	r24, 0x10	; 16
    1c68:	91 05       	cpc	r25, r1
    1c6a:	89 f1       	breq	.+98     	; 0x1cce <main+0x124>
    1c6c:	80 32       	cpi	r24, 0x20	; 32
    1c6e:	91 05       	cpc	r25, r1
    1c70:	89 f1       	breq	.+98     	; 0x1cd4 <main+0x12a>
    1c72:	88 30       	cpi	r24, 0x08	; 8
    1c74:	91 05       	cpc	r25, r1
    1c76:	e9 f0       	breq	.+58     	; 0x1cb2 <main+0x108>
    1c78:	30 c0       	rjmp	.+96     	; 0x1cda <main+0x130>
				case 1:
					mode ^= 0x80;
    1c7a:	90 91 19 01 	lds	r25, 0x0119
    1c7e:	80 e8       	ldi	r24, 0x80	; 128
    1c80:	89 27       	eor	r24, r25
    1c82:	80 93 19 01 	sts	0x0119, r24
					show_alarm = 1-show_alarm;
    1c86:	80 91 1e 01 	lds	r24, 0x011E
    1c8a:	90 91 1f 01 	lds	r25, 0x011F
    1c8e:	21 e0       	ldi	r18, 0x01	; 1
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	a9 01       	movw	r20, r18
    1c94:	48 1b       	sub	r20, r24
    1c96:	59 0b       	sbc	r21, r25
    1c98:	ca 01       	movw	r24, r20
    1c9a:	90 93 1f 01 	sts	0x011F, r25
    1c9e:	80 93 1e 01 	sts	0x011E, r24
					break;
    1ca2:	1b c0       	rjmp	.+54     	; 0x1cda <main+0x130>
				case 2:
					mode ^= 0x40;
    1ca4:	90 91 19 01 	lds	r25, 0x0119
    1ca8:	80 e4       	ldi	r24, 0x40	; 64
    1caa:	89 27       	eor	r24, r25
    1cac:	80 93 19 01 	sts	0x0119, r24
					break;
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <main+0x130>
				case 8 :
					mode ^= 0x01;
    1cb2:	90 91 19 01 	lds	r25, 0x0119
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	89 27       	eor	r24, r25
    1cba:	80 93 19 01 	sts	0x0119, r24
					break;
    1cbe:	0d c0       	rjmp	.+26     	; 0x1cda <main+0x130>
				case 4:
					mode ^= 0x20;
    1cc0:	90 91 19 01 	lds	r25, 0x0119
    1cc4:	80 e2       	ldi	r24, 0x20	; 32
    1cc6:	89 27       	eor	r24, r25
    1cc8:	80 93 19 01 	sts	0x0119, r24
					break;
    1ccc:	06 c0       	rjmp	.+12     	; 0x1cda <main+0x130>
				case 16:
					alarm_off();
    1cce:	0e 94 a5 0b 	call	0x174a	; 0x174a <alarm_off>
					break;
    1cd2:	03 c0       	rjmp	.+6      	; 0x1cda <main+0x130>
				case 32:
					alarm_on();
    1cd4:	0e 94 95 0b 	call	0x172a	; 0x172a <alarm_on>
					break;
    1cd8:	00 00       	nop
			}
			switch(mode & (0X7f)){//control count increment value based on mode
    1cda:	80 91 19 01 	lds	r24, 0x0119
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	8f 77       	andi	r24, 0x7F	; 127
    1ce4:	99 27       	eor	r25, r25
    1ce6:	80 32       	cpi	r24, 0x20	; 32
    1ce8:	91 05       	cpc	r25, r1
    1cea:	c9 f0       	breq	.+50     	; 0x1d1e <main+0x174>
    1cec:	81 32       	cpi	r24, 0x21	; 33
    1cee:	91 05       	cpc	r25, r1
    1cf0:	1c f4       	brge	.+6      	; 0x1cf8 <main+0x14e>
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	41 f0       	breq	.+16     	; 0x1d06 <main+0x15c>
    1cf6:	21 c0       	rjmp	.+66     	; 0x1d3a <main+0x190>
    1cf8:	80 34       	cpi	r24, 0x40	; 64
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	49 f0       	breq	.+18     	; 0x1d10 <main+0x166>
    1cfe:	80 36       	cpi	r24, 0x60	; 96
    1d00:	91 05       	cpc	r25, r1
    1d02:	a1 f0       	breq	.+40     	; 0x1d2c <main+0x182>
    1d04:	1a c0       	rjmp	.+52     	; 0x1d3a <main+0x190>
				case 0x00:
					count_add = 0;
    1d06:	10 92 01 01 	sts	0x0101, r1
    1d0a:	10 92 00 01 	sts	0x0100, r1
					break;
    1d0e:	15 c0       	rjmp	.+42     	; 0x1d3a <main+0x190>
				case 0x40:
					count_add = 1;
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	90 93 01 01 	sts	0x0101, r25
    1d18:	80 93 00 01 	sts	0x0100, r24
					break;
    1d1c:	0e c0       	rjmp	.+28     	; 0x1d3a <main+0x190>
				case 0x20:
					count_add = 2;
    1d1e:	82 e0       	ldi	r24, 0x02	; 2
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	90 93 01 01 	sts	0x0101, r25
    1d26:	80 93 00 01 	sts	0x0100, r24
					break;
    1d2a:	07 c0       	rjmp	.+14     	; 0x1d3a <main+0x190>
				case 0x60:
					count_add = 4;
    1d2c:	84 e0       	ldi	r24, 0x04	; 4
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	90 93 01 01 	sts	0x0101, r25
    1d34:	80 93 00 01 	sts	0x0100, r24
					break;
    1d38:	00 00       	nop
			}

			button = -1;	//rell ISR that button has been read and can be changed
    1d3a:	8f ef       	ldi	r24, 0xFF	; 255
    1d3c:	9f ef       	ldi	r25, 0xFF	; 255
    1d3e:	90 93 25 01 	sts	0x0125, r25
    1d42:	80 93 24 01 	sts	0x0124, r24
		}

		if(show_alarm) 	segsum(alarm, 2, aam);
    1d46:	80 91 1e 01 	lds	r24, 0x011E
    1d4a:	90 91 1f 01 	lds	r25, 0x011F
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	91 f0       	breq	.+36     	; 0x1d76 <main+0x1cc>
    1d52:	20 91 1c 01 	lds	r18, 0x011C
    1d56:	30 91 1d 01 	lds	r19, 0x011D
    1d5a:	80 91 28 01 	lds	r24, 0x0128
    1d5e:	90 91 29 01 	lds	r25, 0x0129
    1d62:	cc 01       	movw	r24, r24
    1d64:	a0 e0       	ldi	r26, 0x00	; 0
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	42 e0       	ldi	r20, 0x02	; 2
    1d6a:	50 e0       	ldi	r21, 0x00	; 0
    1d6c:	bc 01       	movw	r22, r24
    1d6e:	cd 01       	movw	r24, r26
    1d70:	0e 94 b5 0b 	call	0x176a	; 0x176a <segsum>
    1d74:	11 c0       	rjmp	.+34     	; 0x1d98 <main+0x1ee>
		else 		segsum(count, 2, am);
    1d76:	20 91 1a 01 	lds	r18, 0x011A
    1d7a:	30 91 1b 01 	lds	r19, 0x011B
    1d7e:	80 91 26 01 	lds	r24, 0x0126
    1d82:	90 91 27 01 	lds	r25, 0x0127
    1d86:	cc 01       	movw	r24, r24
    1d88:	a0 e0       	ldi	r26, 0x00	; 0
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	42 e0       	ldi	r20, 0x02	; 2
    1d8e:	50 e0       	ldi	r21, 0x00	; 0
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 b5 0b 	call	0x176a	; 0x176a <segsum>

		//		sei();         //enable interrupts before entering loop
		for(i=4;i>=0;i--){//bound a counter (0-4) to keep track of digit to display 
    1d98:	84 e0       	ldi	r24, 0x04	; 4
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	9a 83       	std	Y+2, r25	; 0x02
    1d9e:	89 83       	std	Y+1, r24	; 0x01
    1da0:	ad c1       	rjmp	.+858    	; 0x20fc <main+0x552>
			DDRA = 0xff;//make PORTA an output
    1da2:	8a e3       	ldi	r24, 0x3A	; 58
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	2f ef       	ldi	r18, 0xFF	; 255
    1da8:	fc 01       	movw	r30, r24
    1daa:	20 83       	st	Z, r18
			PORTA = segment_data[i];//segment_data[i];
    1dac:	8b e3       	ldi	r24, 0x3B	; 59
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	29 81       	ldd	r18, Y+1	; 0x01
    1db2:	3a 81       	ldd	r19, Y+2	; 0x02
    1db4:	29 5f       	subi	r18, 0xF9	; 249
    1db6:	3e 4f       	sbci	r19, 0xFE	; 254
    1db8:	f9 01       	movw	r30, r18
    1dba:	20 81       	ld	r18, Z
    1dbc:	fc 01       	movw	r30, r24
    1dbe:	20 83       	st	Z, r18
			PORTB &= DC;
    1dc0:	88 e3       	ldi	r24, 0x38	; 56
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	28 e3       	ldi	r18, 0x38	; 56
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	f9 01       	movw	r30, r18
    1dca:	20 81       	ld	r18, Z
    1dcc:	2f 78       	andi	r18, 0x8F	; 143
    1dce:	fc 01       	movw	r30, r24
    1dd0:	20 83       	st	Z, r18
			PORTB |= digit_data[i];//update digit to display
    1dd2:	88 e3       	ldi	r24, 0x38	; 56
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	28 e3       	ldi	r18, 0x38	; 56
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	f9 01       	movw	r30, r18
    1ddc:	40 81       	ld	r20, Z
    1dde:	29 81       	ldd	r18, Y+1	; 0x01
    1de0:	3a 81       	ldd	r19, Y+2	; 0x02
    1de2:	2e 5f       	subi	r18, 0xFE	; 254
    1de4:	3e 4f       	sbci	r19, 0xFE	; 254
    1de6:	f9 01       	movw	r30, r18
    1de8:	20 81       	ld	r18, Z
    1dea:	24 2b       	or	r18, r20
    1dec:	fc 01       	movw	r30, r24
    1dee:	20 83       	st	Z, r18
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	a6 e9       	ldi	r26, 0x96	; 150
    1df6:	b3 e4       	ldi	r27, 0x43	; 67
    1df8:	8e 83       	std	Y+6, r24	; 0x06
    1dfa:	9f 83       	std	Y+7, r25	; 0x07
    1dfc:	a8 87       	std	Y+8, r26	; 0x08
    1dfe:	b9 87       	std	Y+9, r27	; 0x09
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
    1e00:	2b ea       	ldi	r18, 0xAB	; 171
    1e02:	3a ea       	ldi	r19, 0xAA	; 170
    1e04:	4a ea       	ldi	r20, 0xAA	; 170
    1e06:	50 e4       	ldi	r21, 0x40	; 64
    1e08:	6e 81       	ldd	r22, Y+6	; 0x06
    1e0a:	7f 81       	ldd	r23, Y+7	; 0x07
    1e0c:	88 85       	ldd	r24, Y+8	; 0x08
    1e0e:	99 85       	ldd	r25, Y+9	; 0x09
    1e10:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	8a 87       	std	Y+10, r24	; 0x0a
    1e1a:	9b 87       	std	Y+11, r25	; 0x0b
    1e1c:	ac 87       	std	Y+12, r26	; 0x0c
    1e1e:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e8       	ldi	r20, 0x80	; 128
    1e26:	5f e3       	ldi	r21, 0x3F	; 63
    1e28:	6a 85       	ldd	r22, Y+10	; 0x0a
    1e2a:	7b 85       	ldd	r23, Y+11	; 0x0b
    1e2c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e2e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e30:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__cmpsf2>
    1e34:	88 23       	and	r24, r24
    1e36:	1c f4       	brge	.+6      	; 0x1e3e <main+0x294>
		__ticks = 1;
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	8e 87       	std	Y+14, r24	; 0x0e
    1e3c:	91 c0       	rjmp	.+290    	; 0x1f60 <main+0x3b6>
	else if (__tmp > 255)
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4f e7       	ldi	r20, 0x7F	; 127
    1e44:	53 e4       	ldi	r21, 0x43	; 67
    1e46:	6a 85       	ldd	r22, Y+10	; 0x0a
    1e48:	7b 85       	ldd	r23, Y+11	; 0x0b
    1e4a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e4c:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e4e:	0e 94 46 12 	call	0x248c	; 0x248c <__gesf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	0c f0       	brlt	.+2      	; 0x1e58 <main+0x2ae>
    1e56:	7b c0       	rjmp	.+246    	; 0x1f4e <main+0x3a4>
	{
		_delay_ms(__us / 1000.0);
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	4a e7       	ldi	r20, 0x7A	; 122
    1e5e:	54 e4       	ldi	r21, 0x44	; 68
    1e60:	6e 81       	ldd	r22, Y+6	; 0x06
    1e62:	7f 81       	ldd	r23, Y+7	; 0x07
    1e64:	88 85       	ldd	r24, Y+8	; 0x08
    1e66:	99 85       	ldd	r25, Y+9	; 0x09
    1e68:	0e 94 00 11 	call	0x2200	; 0x2200 <__divsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	8f 87       	std	Y+15, r24	; 0x0f
    1e72:	98 8b       	std	Y+16, r25	; 0x10
    1e74:	a9 8b       	std	Y+17, r26	; 0x11
    1e76:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	4a e7       	ldi	r20, 0x7A	; 122
    1e7e:	55 e4       	ldi	r21, 0x45	; 69
    1e80:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e82:	78 89       	ldd	r23, Y+16	; 0x10
    1e84:	89 89       	ldd	r24, Y+17	; 0x11
    1e86:	9a 89       	ldd	r25, Y+18	; 0x12
    1e88:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	8b 8b       	std	Y+19, r24	; 0x13
    1e92:	9c 8b       	std	Y+20, r25	; 0x14
    1e94:	ad 8b       	std	Y+21, r26	; 0x15
    1e96:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	6b 89       	ldd	r22, Y+19	; 0x13
    1ea2:	7c 89       	ldd	r23, Y+20	; 0x14
    1ea4:	8d 89       	ldd	r24, Y+21	; 0x15
    1ea6:	9e 89       	ldd	r25, Y+22	; 0x16
    1ea8:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__cmpsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	2c f4       	brge	.+10     	; 0x1eba <main+0x310>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	98 8f       	std	Y+24, r25	; 0x18
    1eb6:	8f 8b       	std	Y+23, r24	; 0x17
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <main+0x38e>
	else if (__tmp > 65535)
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	3f ef       	ldi	r19, 0xFF	; 255
    1ebe:	4f e7       	ldi	r20, 0x7F	; 127
    1ec0:	57 e4       	ldi	r21, 0x47	; 71
    1ec2:	6b 89       	ldd	r22, Y+19	; 0x13
    1ec4:	7c 89       	ldd	r23, Y+20	; 0x14
    1ec6:	8d 89       	ldd	r24, Y+21	; 0x15
    1ec8:	9e 89       	ldd	r25, Y+22	; 0x16
    1eca:	0e 94 46 12 	call	0x248c	; 0x248c <__gesf2>
    1ece:	18 16       	cp	r1, r24
    1ed0:	4c f5       	brge	.+82     	; 0x1f24 <main+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e2       	ldi	r20, 0x20	; 32
    1ed8:	51 e4       	ldi	r21, 0x41	; 65
    1eda:	6f 85       	ldd	r22, Y+15	; 0x0f
    1edc:	78 89       	ldd	r23, Y+16	; 0x10
    1ede:	89 89       	ldd	r24, Y+17	; 0x11
    1ee0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee2:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	bc 01       	movw	r22, r24
    1eec:	cd 01       	movw	r24, r26
    1eee:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	98 8f       	std	Y+24, r25	; 0x18
    1ef8:	8f 8b       	std	Y+23, r24	; 0x17
    1efa:	0f c0       	rjmp	.+30     	; 0x1f1a <main+0x370>
    1efc:	80 e9       	ldi	r24, 0x90	; 144
    1efe:	91 e0       	ldi	r25, 0x01	; 1
    1f00:	9a 8f       	std	Y+26, r25	; 0x1a
    1f02:	89 8f       	std	Y+25, r24	; 0x19
    1f04:	89 8d       	ldd	r24, Y+25	; 0x19
    1f06:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <main+0x35e>
    1f0c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f0e:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f10:	8f 89       	ldd	r24, Y+23	; 0x17
    1f12:	98 8d       	ldd	r25, Y+24	; 0x18
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	98 8f       	std	Y+24, r25	; 0x18
    1f18:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1e:	00 97       	sbiw	r24, 0x00	; 0
    1f20:	69 f7       	brne	.-38     	; 0x1efc <main+0x352>
    1f22:	24 c0       	rjmp	.+72     	; 0x1f6c <main+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f24:	6b 89       	ldd	r22, Y+19	; 0x13
    1f26:	7c 89       	ldd	r23, Y+20	; 0x14
    1f28:	8d 89       	ldd	r24, Y+21	; 0x15
    1f2a:	9e 89       	ldd	r25, Y+22	; 0x16
    1f2c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	98 8f       	std	Y+24, r25	; 0x18
    1f36:	8f 8b       	std	Y+23, r24	; 0x17
    1f38:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3c:	9c 8f       	std	Y+28, r25	; 0x1c
    1f3e:	8b 8f       	std	Y+27, r24	; 0x1b
    1f40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <main+0x39a>
    1f48:	9c 8f       	std	Y+28, r25	; 0x1c
    1f4a:	8b 8f       	std	Y+27, r24	; 0x1b
    1f4c:	0f c0       	rjmp	.+30     	; 0x1f6c <main+0x3c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f4e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1f50:	7b 85       	ldd	r23, Y+11	; 0x0b
    1f52:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f54:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f56:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	8e 87       	std	Y+14, r24	; 0x0e
    1f60:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f62:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f66:	8a 95       	dec	r24
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <main+0x3bc>
    1f6a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_us(300);
			PORTA = 0xff;//isegment_data[i];
    1f6c:	8b e3       	ldi	r24, 0x3B	; 59
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	2f ef       	ldi	r18, 0xFF	; 255
    1f72:	fc 01       	movw	r30, r24
    1f74:	20 83       	st	Z, r18
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	a8 ec       	ldi	r26, 0xC8	; 200
    1f7c:	b3 e4       	ldi	r27, 0x43	; 67
    1f7e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f80:	9f 8f       	std	Y+31, r25	; 0x1f
    1f82:	a8 a3       	std	Y+32, r26	; 0x20
    1f84:	b9 a3       	std	Y+33, r27	; 0x21
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
    1f86:	2b ea       	ldi	r18, 0xAB	; 171
    1f88:	3a ea       	ldi	r19, 0xAA	; 170
    1f8a:	4a ea       	ldi	r20, 0xAA	; 170
    1f8c:	50 e4       	ldi	r21, 0x40	; 64
    1f8e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1f90:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1f92:	88 a1       	ldd	r24, Y+32	; 0x20
    1f94:	99 a1       	ldd	r25, Y+33	; 0x21
    1f96:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	8a a3       	std	Y+34, r24	; 0x22
    1fa0:	9b a3       	std	Y+35, r25	; 0x23
    1fa2:	ac a3       	std	Y+36, r26	; 0x24
    1fa4:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e8       	ldi	r20, 0x80	; 128
    1fac:	5f e3       	ldi	r21, 0x3F	; 63
    1fae:	6a a1       	ldd	r22, Y+34	; 0x22
    1fb0:	7b a1       	ldd	r23, Y+35	; 0x23
    1fb2:	8c a1       	ldd	r24, Y+36	; 0x24
    1fb4:	9d a1       	ldd	r25, Y+37	; 0x25
    1fb6:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__cmpsf2>
    1fba:	88 23       	and	r24, r24
    1fbc:	1c f4       	brge	.+6      	; 0x1fc4 <main+0x41a>
		__ticks = 1;
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	8e a3       	std	Y+38, r24	; 0x26
    1fc2:	91 c0       	rjmp	.+290    	; 0x20e6 <main+0x53c>
	else if (__tmp > 255)
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	4f e7       	ldi	r20, 0x7F	; 127
    1fca:	53 e4       	ldi	r21, 0x43	; 67
    1fcc:	6a a1       	ldd	r22, Y+34	; 0x22
    1fce:	7b a1       	ldd	r23, Y+35	; 0x23
    1fd0:	8c a1       	ldd	r24, Y+36	; 0x24
    1fd2:	9d a1       	ldd	r25, Y+37	; 0x25
    1fd4:	0e 94 46 12 	call	0x248c	; 0x248c <__gesf2>
    1fd8:	18 16       	cp	r1, r24
    1fda:	0c f0       	brlt	.+2      	; 0x1fde <main+0x434>
    1fdc:	7b c0       	rjmp	.+246    	; 0x20d4 <main+0x52a>
	{
		_delay_ms(__us / 1000.0);
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	4a e7       	ldi	r20, 0x7A	; 122
    1fe4:	54 e4       	ldi	r21, 0x44	; 68
    1fe6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1fe8:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1fea:	88 a1       	ldd	r24, Y+32	; 0x20
    1fec:	99 a1       	ldd	r25, Y+33	; 0x21
    1fee:	0e 94 00 11 	call	0x2200	; 0x2200 <__divsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	8f a3       	std	Y+39, r24	; 0x27
    1ff8:	98 a7       	std	Y+40, r25	; 0x28
    1ffa:	a9 a7       	std	Y+41, r26	; 0x29
    1ffc:	ba a7       	std	Y+42, r27	; 0x2a
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	4a e7       	ldi	r20, 0x7A	; 122
    2004:	55 e4       	ldi	r21, 0x45	; 69
    2006:	6f a1       	ldd	r22, Y+39	; 0x27
    2008:	78 a5       	ldd	r23, Y+40	; 0x28
    200a:	89 a5       	ldd	r24, Y+41	; 0x29
    200c:	9a a5       	ldd	r25, Y+42	; 0x2a
    200e:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	8b a7       	std	Y+43, r24	; 0x2b
    2018:	9c a7       	std	Y+44, r25	; 0x2c
    201a:	ad a7       	std	Y+45, r26	; 0x2d
    201c:	be a7       	std	Y+46, r27	; 0x2e
	if (__tmp < 1.0)
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e8       	ldi	r20, 0x80	; 128
    2024:	5f e3       	ldi	r21, 0x3F	; 63
    2026:	6b a5       	ldd	r22, Y+43	; 0x2b
    2028:	7c a5       	ldd	r23, Y+44	; 0x2c
    202a:	8d a5       	ldd	r24, Y+45	; 0x2d
    202c:	9e a5       	ldd	r25, Y+46	; 0x2e
    202e:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <__cmpsf2>
    2032:	88 23       	and	r24, r24
    2034:	2c f4       	brge	.+10     	; 0x2040 <main+0x496>
		__ticks = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	98 ab       	std	Y+48, r25	; 0x30
    203c:	8f a7       	std	Y+47, r24	; 0x2f
    203e:	3f c0       	rjmp	.+126    	; 0x20be <main+0x514>
	else if (__tmp > 65535)
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	3f ef       	ldi	r19, 0xFF	; 255
    2044:	4f e7       	ldi	r20, 0x7F	; 127
    2046:	57 e4       	ldi	r21, 0x47	; 71
    2048:	6b a5       	ldd	r22, Y+43	; 0x2b
    204a:	7c a5       	ldd	r23, Y+44	; 0x2c
    204c:	8d a5       	ldd	r24, Y+45	; 0x2d
    204e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2050:	0e 94 46 12 	call	0x248c	; 0x248c <__gesf2>
    2054:	18 16       	cp	r1, r24
    2056:	4c f5       	brge	.+82     	; 0x20aa <main+0x500>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e2       	ldi	r20, 0x20	; 32
    205e:	51 e4       	ldi	r21, 0x41	; 65
    2060:	6f a1       	ldd	r22, Y+39	; 0x27
    2062:	78 a5       	ldd	r23, Y+40	; 0x28
    2064:	89 a5       	ldd	r24, Y+41	; 0x29
    2066:	9a a5       	ldd	r25, Y+42	; 0x2a
    2068:	0e 94 4a 12 	call	0x2494	; 0x2494 <__mulsf3>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	bc 01       	movw	r22, r24
    2072:	cd 01       	movw	r24, r26
    2074:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
    2078:	dc 01       	movw	r26, r24
    207a:	cb 01       	movw	r24, r22
    207c:	98 ab       	std	Y+48, r25	; 0x30
    207e:	8f a7       	std	Y+47, r24	; 0x2f
    2080:	0f c0       	rjmp	.+30     	; 0x20a0 <main+0x4f6>
    2082:	80 e9       	ldi	r24, 0x90	; 144
    2084:	91 e0       	ldi	r25, 0x01	; 1
    2086:	9a ab       	std	Y+50, r25	; 0x32
    2088:	89 ab       	std	Y+49, r24	; 0x31
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    208a:	89 a9       	ldd	r24, Y+49	; 0x31
    208c:	9a a9       	ldd	r25, Y+50	; 0x32
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <main+0x4e4>
    2092:	9a ab       	std	Y+50, r25	; 0x32
    2094:	89 ab       	std	Y+49, r24	; 0x31
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2096:	8f a5       	ldd	r24, Y+47	; 0x2f
    2098:	98 a9       	ldd	r25, Y+48	; 0x30
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	98 ab       	std	Y+48, r25	; 0x30
    209e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a2:	98 a9       	ldd	r25, Y+48	; 0x30
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	69 f7       	brne	.-38     	; 0x2082 <main+0x4d8>
    20a8:	24 c0       	rjmp	.+72     	; 0x20f2 <main+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20aa:	6b a5       	ldd	r22, Y+43	; 0x2b
    20ac:	7c a5       	ldd	r23, Y+44	; 0x2c
    20ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    20b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    20b2:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	98 ab       	std	Y+48, r25	; 0x30
    20bc:	8f a7       	std	Y+47, r24	; 0x2f
    20be:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c0:	98 a9       	ldd	r25, Y+48	; 0x30
    20c2:	9c ab       	std	Y+52, r25	; 0x34
    20c4:	8b ab       	std	Y+51, r24	; 0x33
    20c6:	8b a9       	ldd	r24, Y+51	; 0x33
    20c8:	9c a9       	ldd	r25, Y+52	; 0x34
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <main+0x520>
    20ce:	9c ab       	std	Y+52, r25	; 0x34
    20d0:	8b ab       	std	Y+51, r24	; 0x33
    20d2:	0f c0       	rjmp	.+30     	; 0x20f2 <main+0x548>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20d4:	6a a1       	ldd	r22, Y+34	; 0x22
    20d6:	7b a1       	ldd	r23, Y+35	; 0x23
    20d8:	8c a1       	ldd	r24, Y+36	; 0x24
    20da:	9d a1       	ldd	r25, Y+37	; 0x25
    20dc:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	8e a3       	std	Y+38, r24	; 0x26
    20e6:	8e a1       	ldd	r24, Y+38	; 0x26
    20e8:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20ea:	8d a9       	ldd	r24, Y+53	; 0x35
    20ec:	8a 95       	dec	r24
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <main+0x542>
    20f0:	8d ab       	std	Y+53, r24	; 0x35

		if(show_alarm) 	segsum(alarm, 2, aam);
		else 		segsum(count, 2, am);

		//		sei();         //enable interrupts before entering loop
		for(i=4;i>=0;i--){//bound a counter (0-4) to keep track of digit to display 
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	9a 81       	ldd	r25, Y+2	; 0x02
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	99 23       	and	r25, r25
    2102:	0c f0       	brlt	.+2      	; 0x2106 <main+0x55c>
    2104:	4e ce       	rjmp	.-868    	; 0x1da2 <main+0x1f8>
			_delay_us(300);
			PORTA = 0xff;//isegment_data[i];
			_delay_us(400);
		}
		//		sei();         //enable interrupts before entering loop
	}
    2106:	97 cd       	rjmp	.-1234   	; 0x1c36 <main+0x8c>

00002108 <__umulhisi3>:
    2108:	a2 9f       	mul	r26, r18
    210a:	b0 01       	movw	r22, r0
    210c:	b3 9f       	mul	r27, r19
    210e:	c0 01       	movw	r24, r0
    2110:	a3 9f       	mul	r26, r19
    2112:	70 0d       	add	r23, r0
    2114:	81 1d       	adc	r24, r1
    2116:	11 24       	eor	r1, r1
    2118:	91 1d       	adc	r25, r1
    211a:	b2 9f       	mul	r27, r18
    211c:	70 0d       	add	r23, r0
    211e:	81 1d       	adc	r24, r1
    2120:	11 24       	eor	r1, r1
    2122:	91 1d       	adc	r25, r1
    2124:	08 95       	ret

00002126 <__divmodhi4>:
    2126:	97 fb       	bst	r25, 7
    2128:	07 2e       	mov	r0, r23
    212a:	16 f4       	brtc	.+4      	; 0x2130 <__divmodhi4+0xa>
    212c:	00 94       	com	r0
    212e:	07 d0       	rcall	.+14     	; 0x213e <__divmodhi4_neg1>
    2130:	77 fd       	sbrc	r23, 7
    2132:	09 d0       	rcall	.+18     	; 0x2146 <__divmodhi4_neg2>
    2134:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <__udivmodhi4>
    2138:	07 fc       	sbrc	r0, 7
    213a:	05 d0       	rcall	.+10     	; 0x2146 <__divmodhi4_neg2>
    213c:	3e f4       	brtc	.+14     	; 0x214c <__divmodhi4_exit>

0000213e <__divmodhi4_neg1>:
    213e:	90 95       	com	r25
    2140:	81 95       	neg	r24
    2142:	9f 4f       	sbci	r25, 0xFF	; 255
    2144:	08 95       	ret

00002146 <__divmodhi4_neg2>:
    2146:	70 95       	com	r23
    2148:	61 95       	neg	r22
    214a:	7f 4f       	sbci	r23, 0xFF	; 255

0000214c <__divmodhi4_exit>:
    214c:	08 95       	ret

0000214e <__udivmodsi4>:
    214e:	a1 e2       	ldi	r26, 0x21	; 33
    2150:	1a 2e       	mov	r1, r26
    2152:	aa 1b       	sub	r26, r26
    2154:	bb 1b       	sub	r27, r27
    2156:	fd 01       	movw	r30, r26
    2158:	0d c0       	rjmp	.+26     	; 0x2174 <__udivmodsi4_ep>

0000215a <__udivmodsi4_loop>:
    215a:	aa 1f       	adc	r26, r26
    215c:	bb 1f       	adc	r27, r27
    215e:	ee 1f       	adc	r30, r30
    2160:	ff 1f       	adc	r31, r31
    2162:	a2 17       	cp	r26, r18
    2164:	b3 07       	cpc	r27, r19
    2166:	e4 07       	cpc	r30, r20
    2168:	f5 07       	cpc	r31, r21
    216a:	20 f0       	brcs	.+8      	; 0x2174 <__udivmodsi4_ep>
    216c:	a2 1b       	sub	r26, r18
    216e:	b3 0b       	sbc	r27, r19
    2170:	e4 0b       	sbc	r30, r20
    2172:	f5 0b       	sbc	r31, r21

00002174 <__udivmodsi4_ep>:
    2174:	66 1f       	adc	r22, r22
    2176:	77 1f       	adc	r23, r23
    2178:	88 1f       	adc	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	1a 94       	dec	r1
    217e:	69 f7       	brne	.-38     	; 0x215a <__udivmodsi4_loop>
    2180:	60 95       	com	r22
    2182:	70 95       	com	r23
    2184:	80 95       	com	r24
    2186:	90 95       	com	r25
    2188:	9b 01       	movw	r18, r22
    218a:	ac 01       	movw	r20, r24
    218c:	bd 01       	movw	r22, r26
    218e:	cf 01       	movw	r24, r30
    2190:	08 95       	ret

00002192 <__divmodsi4>:
    2192:	05 2e       	mov	r0, r21
    2194:	97 fb       	bst	r25, 7
    2196:	1e f4       	brtc	.+6      	; 0x219e <__divmodsi4+0xc>
    2198:	00 94       	com	r0
    219a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <__negsi2>
    219e:	57 fd       	sbrc	r21, 7
    21a0:	07 d0       	rcall	.+14     	; 0x21b0 <__divmodsi4_neg2>
    21a2:	0e 94 a7 10 	call	0x214e	; 0x214e <__udivmodsi4>
    21a6:	07 fc       	sbrc	r0, 7
    21a8:	03 d0       	rcall	.+6      	; 0x21b0 <__divmodsi4_neg2>
    21aa:	4e f4       	brtc	.+18     	; 0x21be <__divmodsi4_exit>
    21ac:	0c 94 e0 10 	jmp	0x21c0	; 0x21c0 <__negsi2>

000021b0 <__divmodsi4_neg2>:
    21b0:	50 95       	com	r21
    21b2:	40 95       	com	r20
    21b4:	30 95       	com	r19
    21b6:	21 95       	neg	r18
    21b8:	3f 4f       	sbci	r19, 0xFF	; 255
    21ba:	4f 4f       	sbci	r20, 0xFF	; 255
    21bc:	5f 4f       	sbci	r21, 0xFF	; 255

000021be <__divmodsi4_exit>:
    21be:	08 95       	ret

000021c0 <__negsi2>:
    21c0:	90 95       	com	r25
    21c2:	80 95       	com	r24
    21c4:	70 95       	com	r23
    21c6:	61 95       	neg	r22
    21c8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ca:	8f 4f       	sbci	r24, 0xFF	; 255
    21cc:	9f 4f       	sbci	r25, 0xFF	; 255
    21ce:	08 95       	ret

000021d0 <__udivmodhi4>:
    21d0:	aa 1b       	sub	r26, r26
    21d2:	bb 1b       	sub	r27, r27
    21d4:	51 e1       	ldi	r21, 0x11	; 17
    21d6:	07 c0       	rjmp	.+14     	; 0x21e6 <__udivmodhi4_ep>

000021d8 <__udivmodhi4_loop>:
    21d8:	aa 1f       	adc	r26, r26
    21da:	bb 1f       	adc	r27, r27
    21dc:	a6 17       	cp	r26, r22
    21de:	b7 07       	cpc	r27, r23
    21e0:	10 f0       	brcs	.+4      	; 0x21e6 <__udivmodhi4_ep>
    21e2:	a6 1b       	sub	r26, r22
    21e4:	b7 0b       	sbc	r27, r23

000021e6 <__udivmodhi4_ep>:
    21e6:	88 1f       	adc	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	5a 95       	dec	r21
    21ec:	a9 f7       	brne	.-22     	; 0x21d8 <__udivmodhi4_loop>
    21ee:	80 95       	com	r24
    21f0:	90 95       	com	r25
    21f2:	bc 01       	movw	r22, r24
    21f4:	cd 01       	movw	r24, r26
    21f6:	08 95       	ret

000021f8 <__cmpsf2>:
    21f8:	d4 d0       	rcall	.+424    	; 0x23a2 <__fp_cmp>
    21fa:	08 f4       	brcc	.+2      	; 0x21fe <__cmpsf2+0x6>
    21fc:	81 e0       	ldi	r24, 0x01	; 1
    21fe:	08 95       	ret

00002200 <__divsf3>:
    2200:	0c d0       	rcall	.+24     	; 0x221a <__divsf3x>
    2202:	0a c1       	rjmp	.+532    	; 0x2418 <__fp_round>
    2204:	02 d1       	rcall	.+516    	; 0x240a <__fp_pscB>
    2206:	40 f0       	brcs	.+16     	; 0x2218 <__divsf3+0x18>
    2208:	f9 d0       	rcall	.+498    	; 0x23fc <__fp_pscA>
    220a:	30 f0       	brcs	.+12     	; 0x2218 <__divsf3+0x18>
    220c:	21 f4       	brne	.+8      	; 0x2216 <__divsf3+0x16>
    220e:	5f 3f       	cpi	r21, 0xFF	; 255
    2210:	19 f0       	breq	.+6      	; 0x2218 <__divsf3+0x18>
    2212:	eb c0       	rjmp	.+470    	; 0x23ea <__fp_inf>
    2214:	51 11       	cpse	r21, r1
    2216:	34 c1       	rjmp	.+616    	; 0x2480 <__fp_szero>
    2218:	ee c0       	rjmp	.+476    	; 0x23f6 <__fp_nan>

0000221a <__divsf3x>:
    221a:	0f d1       	rcall	.+542    	; 0x243a <__fp_split3>
    221c:	98 f3       	brcs	.-26     	; 0x2204 <__divsf3+0x4>

0000221e <__divsf3_pse>:
    221e:	99 23       	and	r25, r25
    2220:	c9 f3       	breq	.-14     	; 0x2214 <__divsf3+0x14>
    2222:	55 23       	and	r21, r21
    2224:	b1 f3       	breq	.-20     	; 0x2212 <__divsf3+0x12>
    2226:	95 1b       	sub	r25, r21
    2228:	55 0b       	sbc	r21, r21
    222a:	bb 27       	eor	r27, r27
    222c:	aa 27       	eor	r26, r26
    222e:	62 17       	cp	r22, r18
    2230:	73 07       	cpc	r23, r19
    2232:	84 07       	cpc	r24, r20
    2234:	38 f0       	brcs	.+14     	; 0x2244 <__divsf3_pse+0x26>
    2236:	9f 5f       	subi	r25, 0xFF	; 255
    2238:	5f 4f       	sbci	r21, 0xFF	; 255
    223a:	22 0f       	add	r18, r18
    223c:	33 1f       	adc	r19, r19
    223e:	44 1f       	adc	r20, r20
    2240:	aa 1f       	adc	r26, r26
    2242:	a9 f3       	breq	.-22     	; 0x222e <__divsf3_pse+0x10>
    2244:	33 d0       	rcall	.+102    	; 0x22ac <__divsf3_pse+0x8e>
    2246:	0e 2e       	mov	r0, r30
    2248:	3a f0       	brmi	.+14     	; 0x2258 <__divsf3_pse+0x3a>
    224a:	e0 e8       	ldi	r30, 0x80	; 128
    224c:	30 d0       	rcall	.+96     	; 0x22ae <__divsf3_pse+0x90>
    224e:	91 50       	subi	r25, 0x01	; 1
    2250:	50 40       	sbci	r21, 0x00	; 0
    2252:	e6 95       	lsr	r30
    2254:	00 1c       	adc	r0, r0
    2256:	ca f7       	brpl	.-14     	; 0x224a <__divsf3_pse+0x2c>
    2258:	29 d0       	rcall	.+82     	; 0x22ac <__divsf3_pse+0x8e>
    225a:	fe 2f       	mov	r31, r30
    225c:	27 d0       	rcall	.+78     	; 0x22ac <__divsf3_pse+0x8e>
    225e:	66 0f       	add	r22, r22
    2260:	77 1f       	adc	r23, r23
    2262:	88 1f       	adc	r24, r24
    2264:	bb 1f       	adc	r27, r27
    2266:	26 17       	cp	r18, r22
    2268:	37 07       	cpc	r19, r23
    226a:	48 07       	cpc	r20, r24
    226c:	ab 07       	cpc	r26, r27
    226e:	b0 e8       	ldi	r27, 0x80	; 128
    2270:	09 f0       	breq	.+2      	; 0x2274 <__divsf3_pse+0x56>
    2272:	bb 0b       	sbc	r27, r27
    2274:	80 2d       	mov	r24, r0
    2276:	bf 01       	movw	r22, r30
    2278:	ff 27       	eor	r31, r31
    227a:	93 58       	subi	r25, 0x83	; 131
    227c:	5f 4f       	sbci	r21, 0xFF	; 255
    227e:	2a f0       	brmi	.+10     	; 0x228a <__divsf3_pse+0x6c>
    2280:	9e 3f       	cpi	r25, 0xFE	; 254
    2282:	51 05       	cpc	r21, r1
    2284:	68 f0       	brcs	.+26     	; 0x22a0 <__divsf3_pse+0x82>
    2286:	b1 c0       	rjmp	.+354    	; 0x23ea <__fp_inf>
    2288:	fb c0       	rjmp	.+502    	; 0x2480 <__fp_szero>
    228a:	5f 3f       	cpi	r21, 0xFF	; 255
    228c:	ec f3       	brlt	.-6      	; 0x2288 <__divsf3_pse+0x6a>
    228e:	98 3e       	cpi	r25, 0xE8	; 232
    2290:	dc f3       	brlt	.-10     	; 0x2288 <__divsf3_pse+0x6a>
    2292:	86 95       	lsr	r24
    2294:	77 95       	ror	r23
    2296:	67 95       	ror	r22
    2298:	b7 95       	ror	r27
    229a:	f7 95       	ror	r31
    229c:	9f 5f       	subi	r25, 0xFF	; 255
    229e:	c9 f7       	brne	.-14     	; 0x2292 <__divsf3_pse+0x74>
    22a0:	88 0f       	add	r24, r24
    22a2:	91 1d       	adc	r25, r1
    22a4:	96 95       	lsr	r25
    22a6:	87 95       	ror	r24
    22a8:	97 f9       	bld	r25, 7
    22aa:	08 95       	ret
    22ac:	e1 e0       	ldi	r30, 0x01	; 1
    22ae:	66 0f       	add	r22, r22
    22b0:	77 1f       	adc	r23, r23
    22b2:	88 1f       	adc	r24, r24
    22b4:	bb 1f       	adc	r27, r27
    22b6:	62 17       	cp	r22, r18
    22b8:	73 07       	cpc	r23, r19
    22ba:	84 07       	cpc	r24, r20
    22bc:	ba 07       	cpc	r27, r26
    22be:	20 f0       	brcs	.+8      	; 0x22c8 <__divsf3_pse+0xaa>
    22c0:	62 1b       	sub	r22, r18
    22c2:	73 0b       	sbc	r23, r19
    22c4:	84 0b       	sbc	r24, r20
    22c6:	ba 0b       	sbc	r27, r26
    22c8:	ee 1f       	adc	r30, r30
    22ca:	88 f7       	brcc	.-30     	; 0x22ae <__divsf3_pse+0x90>
    22cc:	e0 95       	com	r30
    22ce:	08 95       	ret

000022d0 <__fixunssfsi>:
    22d0:	bc d0       	rcall	.+376    	; 0x244a <__fp_splitA>
    22d2:	88 f0       	brcs	.+34     	; 0x22f6 <__fixunssfsi+0x26>
    22d4:	9f 57       	subi	r25, 0x7F	; 127
    22d6:	90 f0       	brcs	.+36     	; 0x22fc <__fixunssfsi+0x2c>
    22d8:	b9 2f       	mov	r27, r25
    22da:	99 27       	eor	r25, r25
    22dc:	b7 51       	subi	r27, 0x17	; 23
    22de:	a0 f0       	brcs	.+40     	; 0x2308 <__fixunssfsi+0x38>
    22e0:	d1 f0       	breq	.+52     	; 0x2316 <__fixunssfsi+0x46>
    22e2:	66 0f       	add	r22, r22
    22e4:	77 1f       	adc	r23, r23
    22e6:	88 1f       	adc	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	1a f0       	brmi	.+6      	; 0x22f2 <__fixunssfsi+0x22>
    22ec:	ba 95       	dec	r27
    22ee:	c9 f7       	brne	.-14     	; 0x22e2 <__fixunssfsi+0x12>
    22f0:	12 c0       	rjmp	.+36     	; 0x2316 <__fixunssfsi+0x46>
    22f2:	b1 30       	cpi	r27, 0x01	; 1
    22f4:	81 f0       	breq	.+32     	; 0x2316 <__fixunssfsi+0x46>
    22f6:	c3 d0       	rcall	.+390    	; 0x247e <__fp_zero>
    22f8:	b1 e0       	ldi	r27, 0x01	; 1
    22fa:	08 95       	ret
    22fc:	c0 c0       	rjmp	.+384    	; 0x247e <__fp_zero>
    22fe:	67 2f       	mov	r22, r23
    2300:	78 2f       	mov	r23, r24
    2302:	88 27       	eor	r24, r24
    2304:	b8 5f       	subi	r27, 0xF8	; 248
    2306:	39 f0       	breq	.+14     	; 0x2316 <__fixunssfsi+0x46>
    2308:	b9 3f       	cpi	r27, 0xF9	; 249
    230a:	cc f3       	brlt	.-14     	; 0x22fe <__fixunssfsi+0x2e>
    230c:	86 95       	lsr	r24
    230e:	77 95       	ror	r23
    2310:	67 95       	ror	r22
    2312:	b3 95       	inc	r27
    2314:	d9 f7       	brne	.-10     	; 0x230c <__fixunssfsi+0x3c>
    2316:	3e f4       	brtc	.+14     	; 0x2326 <__fixunssfsi+0x56>
    2318:	90 95       	com	r25
    231a:	80 95       	com	r24
    231c:	70 95       	com	r23
    231e:	61 95       	neg	r22
    2320:	7f 4f       	sbci	r23, 0xFF	; 255
    2322:	8f 4f       	sbci	r24, 0xFF	; 255
    2324:	9f 4f       	sbci	r25, 0xFF	; 255
    2326:	08 95       	ret

00002328 <__floatunsisf>:
    2328:	e8 94       	clt
    232a:	09 c0       	rjmp	.+18     	; 0x233e <__floatsisf+0x12>

0000232c <__floatsisf>:
    232c:	97 fb       	bst	r25, 7
    232e:	3e f4       	brtc	.+14     	; 0x233e <__floatsisf+0x12>
    2330:	90 95       	com	r25
    2332:	80 95       	com	r24
    2334:	70 95       	com	r23
    2336:	61 95       	neg	r22
    2338:	7f 4f       	sbci	r23, 0xFF	; 255
    233a:	8f 4f       	sbci	r24, 0xFF	; 255
    233c:	9f 4f       	sbci	r25, 0xFF	; 255
    233e:	99 23       	and	r25, r25
    2340:	a9 f0       	breq	.+42     	; 0x236c <__floatsisf+0x40>
    2342:	f9 2f       	mov	r31, r25
    2344:	96 e9       	ldi	r25, 0x96	; 150
    2346:	bb 27       	eor	r27, r27
    2348:	93 95       	inc	r25
    234a:	f6 95       	lsr	r31
    234c:	87 95       	ror	r24
    234e:	77 95       	ror	r23
    2350:	67 95       	ror	r22
    2352:	b7 95       	ror	r27
    2354:	f1 11       	cpse	r31, r1
    2356:	f8 cf       	rjmp	.-16     	; 0x2348 <__floatsisf+0x1c>
    2358:	fa f4       	brpl	.+62     	; 0x2398 <__floatsisf+0x6c>
    235a:	bb 0f       	add	r27, r27
    235c:	11 f4       	brne	.+4      	; 0x2362 <__floatsisf+0x36>
    235e:	60 ff       	sbrs	r22, 0
    2360:	1b c0       	rjmp	.+54     	; 0x2398 <__floatsisf+0x6c>
    2362:	6f 5f       	subi	r22, 0xFF	; 255
    2364:	7f 4f       	sbci	r23, 0xFF	; 255
    2366:	8f 4f       	sbci	r24, 0xFF	; 255
    2368:	9f 4f       	sbci	r25, 0xFF	; 255
    236a:	16 c0       	rjmp	.+44     	; 0x2398 <__floatsisf+0x6c>
    236c:	88 23       	and	r24, r24
    236e:	11 f0       	breq	.+4      	; 0x2374 <__floatsisf+0x48>
    2370:	96 e9       	ldi	r25, 0x96	; 150
    2372:	11 c0       	rjmp	.+34     	; 0x2396 <__floatsisf+0x6a>
    2374:	77 23       	and	r23, r23
    2376:	21 f0       	breq	.+8      	; 0x2380 <__floatsisf+0x54>
    2378:	9e e8       	ldi	r25, 0x8E	; 142
    237a:	87 2f       	mov	r24, r23
    237c:	76 2f       	mov	r23, r22
    237e:	05 c0       	rjmp	.+10     	; 0x238a <__floatsisf+0x5e>
    2380:	66 23       	and	r22, r22
    2382:	71 f0       	breq	.+28     	; 0x23a0 <__floatsisf+0x74>
    2384:	96 e8       	ldi	r25, 0x86	; 134
    2386:	86 2f       	mov	r24, r22
    2388:	70 e0       	ldi	r23, 0x00	; 0
    238a:	60 e0       	ldi	r22, 0x00	; 0
    238c:	2a f0       	brmi	.+10     	; 0x2398 <__floatsisf+0x6c>
    238e:	9a 95       	dec	r25
    2390:	66 0f       	add	r22, r22
    2392:	77 1f       	adc	r23, r23
    2394:	88 1f       	adc	r24, r24
    2396:	da f7       	brpl	.-10     	; 0x238e <__floatsisf+0x62>
    2398:	88 0f       	add	r24, r24
    239a:	96 95       	lsr	r25
    239c:	87 95       	ror	r24
    239e:	97 f9       	bld	r25, 7
    23a0:	08 95       	ret

000023a2 <__fp_cmp>:
    23a2:	99 0f       	add	r25, r25
    23a4:	00 08       	sbc	r0, r0
    23a6:	55 0f       	add	r21, r21
    23a8:	aa 0b       	sbc	r26, r26
    23aa:	e0 e8       	ldi	r30, 0x80	; 128
    23ac:	fe ef       	ldi	r31, 0xFE	; 254
    23ae:	16 16       	cp	r1, r22
    23b0:	17 06       	cpc	r1, r23
    23b2:	e8 07       	cpc	r30, r24
    23b4:	f9 07       	cpc	r31, r25
    23b6:	c0 f0       	brcs	.+48     	; 0x23e8 <__fp_cmp+0x46>
    23b8:	12 16       	cp	r1, r18
    23ba:	13 06       	cpc	r1, r19
    23bc:	e4 07       	cpc	r30, r20
    23be:	f5 07       	cpc	r31, r21
    23c0:	98 f0       	brcs	.+38     	; 0x23e8 <__fp_cmp+0x46>
    23c2:	62 1b       	sub	r22, r18
    23c4:	73 0b       	sbc	r23, r19
    23c6:	84 0b       	sbc	r24, r20
    23c8:	95 0b       	sbc	r25, r21
    23ca:	39 f4       	brne	.+14     	; 0x23da <__fp_cmp+0x38>
    23cc:	0a 26       	eor	r0, r26
    23ce:	61 f0       	breq	.+24     	; 0x23e8 <__fp_cmp+0x46>
    23d0:	23 2b       	or	r18, r19
    23d2:	24 2b       	or	r18, r20
    23d4:	25 2b       	or	r18, r21
    23d6:	21 f4       	brne	.+8      	; 0x23e0 <__fp_cmp+0x3e>
    23d8:	08 95       	ret
    23da:	0a 26       	eor	r0, r26
    23dc:	09 f4       	brne	.+2      	; 0x23e0 <__fp_cmp+0x3e>
    23de:	a1 40       	sbci	r26, 0x01	; 1
    23e0:	a6 95       	lsr	r26
    23e2:	8f ef       	ldi	r24, 0xFF	; 255
    23e4:	81 1d       	adc	r24, r1
    23e6:	81 1d       	adc	r24, r1
    23e8:	08 95       	ret

000023ea <__fp_inf>:
    23ea:	97 f9       	bld	r25, 7
    23ec:	9f 67       	ori	r25, 0x7F	; 127
    23ee:	80 e8       	ldi	r24, 0x80	; 128
    23f0:	70 e0       	ldi	r23, 0x00	; 0
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	08 95       	ret

000023f6 <__fp_nan>:
    23f6:	9f ef       	ldi	r25, 0xFF	; 255
    23f8:	80 ec       	ldi	r24, 0xC0	; 192
    23fa:	08 95       	ret

000023fc <__fp_pscA>:
    23fc:	00 24       	eor	r0, r0
    23fe:	0a 94       	dec	r0
    2400:	16 16       	cp	r1, r22
    2402:	17 06       	cpc	r1, r23
    2404:	18 06       	cpc	r1, r24
    2406:	09 06       	cpc	r0, r25
    2408:	08 95       	ret

0000240a <__fp_pscB>:
    240a:	00 24       	eor	r0, r0
    240c:	0a 94       	dec	r0
    240e:	12 16       	cp	r1, r18
    2410:	13 06       	cpc	r1, r19
    2412:	14 06       	cpc	r1, r20
    2414:	05 06       	cpc	r0, r21
    2416:	08 95       	ret

00002418 <__fp_round>:
    2418:	09 2e       	mov	r0, r25
    241a:	03 94       	inc	r0
    241c:	00 0c       	add	r0, r0
    241e:	11 f4       	brne	.+4      	; 0x2424 <__fp_round+0xc>
    2420:	88 23       	and	r24, r24
    2422:	52 f0       	brmi	.+20     	; 0x2438 <__fp_round+0x20>
    2424:	bb 0f       	add	r27, r27
    2426:	40 f4       	brcc	.+16     	; 0x2438 <__fp_round+0x20>
    2428:	bf 2b       	or	r27, r31
    242a:	11 f4       	brne	.+4      	; 0x2430 <__fp_round+0x18>
    242c:	60 ff       	sbrs	r22, 0
    242e:	04 c0       	rjmp	.+8      	; 0x2438 <__fp_round+0x20>
    2430:	6f 5f       	subi	r22, 0xFF	; 255
    2432:	7f 4f       	sbci	r23, 0xFF	; 255
    2434:	8f 4f       	sbci	r24, 0xFF	; 255
    2436:	9f 4f       	sbci	r25, 0xFF	; 255
    2438:	08 95       	ret

0000243a <__fp_split3>:
    243a:	57 fd       	sbrc	r21, 7
    243c:	90 58       	subi	r25, 0x80	; 128
    243e:	44 0f       	add	r20, r20
    2440:	55 1f       	adc	r21, r21
    2442:	59 f0       	breq	.+22     	; 0x245a <__fp_splitA+0x10>
    2444:	5f 3f       	cpi	r21, 0xFF	; 255
    2446:	71 f0       	breq	.+28     	; 0x2464 <__fp_splitA+0x1a>
    2448:	47 95       	ror	r20

0000244a <__fp_splitA>:
    244a:	88 0f       	add	r24, r24
    244c:	97 fb       	bst	r25, 7
    244e:	99 1f       	adc	r25, r25
    2450:	61 f0       	breq	.+24     	; 0x246a <__fp_splitA+0x20>
    2452:	9f 3f       	cpi	r25, 0xFF	; 255
    2454:	79 f0       	breq	.+30     	; 0x2474 <__fp_splitA+0x2a>
    2456:	87 95       	ror	r24
    2458:	08 95       	ret
    245a:	12 16       	cp	r1, r18
    245c:	13 06       	cpc	r1, r19
    245e:	14 06       	cpc	r1, r20
    2460:	55 1f       	adc	r21, r21
    2462:	f2 cf       	rjmp	.-28     	; 0x2448 <__fp_split3+0xe>
    2464:	46 95       	lsr	r20
    2466:	f1 df       	rcall	.-30     	; 0x244a <__fp_splitA>
    2468:	08 c0       	rjmp	.+16     	; 0x247a <__fp_splitA+0x30>
    246a:	16 16       	cp	r1, r22
    246c:	17 06       	cpc	r1, r23
    246e:	18 06       	cpc	r1, r24
    2470:	99 1f       	adc	r25, r25
    2472:	f1 cf       	rjmp	.-30     	; 0x2456 <__fp_splitA+0xc>
    2474:	86 95       	lsr	r24
    2476:	71 05       	cpc	r23, r1
    2478:	61 05       	cpc	r22, r1
    247a:	08 94       	sec
    247c:	08 95       	ret

0000247e <__fp_zero>:
    247e:	e8 94       	clt

00002480 <__fp_szero>:
    2480:	bb 27       	eor	r27, r27
    2482:	66 27       	eor	r22, r22
    2484:	77 27       	eor	r23, r23
    2486:	cb 01       	movw	r24, r22
    2488:	97 f9       	bld	r25, 7
    248a:	08 95       	ret

0000248c <__gesf2>:
    248c:	8a df       	rcall	.-236    	; 0x23a2 <__fp_cmp>
    248e:	08 f4       	brcc	.+2      	; 0x2492 <__gesf2+0x6>
    2490:	8f ef       	ldi	r24, 0xFF	; 255
    2492:	08 95       	ret

00002494 <__mulsf3>:
    2494:	0b d0       	rcall	.+22     	; 0x24ac <__mulsf3x>
    2496:	c0 cf       	rjmp	.-128    	; 0x2418 <__fp_round>
    2498:	b1 df       	rcall	.-158    	; 0x23fc <__fp_pscA>
    249a:	28 f0       	brcs	.+10     	; 0x24a6 <__mulsf3+0x12>
    249c:	b6 df       	rcall	.-148    	; 0x240a <__fp_pscB>
    249e:	18 f0       	brcs	.+6      	; 0x24a6 <__mulsf3+0x12>
    24a0:	95 23       	and	r25, r21
    24a2:	09 f0       	breq	.+2      	; 0x24a6 <__mulsf3+0x12>
    24a4:	a2 cf       	rjmp	.-188    	; 0x23ea <__fp_inf>
    24a6:	a7 cf       	rjmp	.-178    	; 0x23f6 <__fp_nan>
    24a8:	11 24       	eor	r1, r1
    24aa:	ea cf       	rjmp	.-44     	; 0x2480 <__fp_szero>

000024ac <__mulsf3x>:
    24ac:	c6 df       	rcall	.-116    	; 0x243a <__fp_split3>
    24ae:	a0 f3       	brcs	.-24     	; 0x2498 <__mulsf3+0x4>

000024b0 <__mulsf3_pse>:
    24b0:	95 9f       	mul	r25, r21
    24b2:	d1 f3       	breq	.-12     	; 0x24a8 <__mulsf3+0x14>
    24b4:	95 0f       	add	r25, r21
    24b6:	50 e0       	ldi	r21, 0x00	; 0
    24b8:	55 1f       	adc	r21, r21
    24ba:	62 9f       	mul	r22, r18
    24bc:	f0 01       	movw	r30, r0
    24be:	72 9f       	mul	r23, r18
    24c0:	bb 27       	eor	r27, r27
    24c2:	f0 0d       	add	r31, r0
    24c4:	b1 1d       	adc	r27, r1
    24c6:	63 9f       	mul	r22, r19
    24c8:	aa 27       	eor	r26, r26
    24ca:	f0 0d       	add	r31, r0
    24cc:	b1 1d       	adc	r27, r1
    24ce:	aa 1f       	adc	r26, r26
    24d0:	64 9f       	mul	r22, r20
    24d2:	66 27       	eor	r22, r22
    24d4:	b0 0d       	add	r27, r0
    24d6:	a1 1d       	adc	r26, r1
    24d8:	66 1f       	adc	r22, r22
    24da:	82 9f       	mul	r24, r18
    24dc:	22 27       	eor	r18, r18
    24de:	b0 0d       	add	r27, r0
    24e0:	a1 1d       	adc	r26, r1
    24e2:	62 1f       	adc	r22, r18
    24e4:	73 9f       	mul	r23, r19
    24e6:	b0 0d       	add	r27, r0
    24e8:	a1 1d       	adc	r26, r1
    24ea:	62 1f       	adc	r22, r18
    24ec:	83 9f       	mul	r24, r19
    24ee:	a0 0d       	add	r26, r0
    24f0:	61 1d       	adc	r22, r1
    24f2:	22 1f       	adc	r18, r18
    24f4:	74 9f       	mul	r23, r20
    24f6:	33 27       	eor	r19, r19
    24f8:	a0 0d       	add	r26, r0
    24fa:	61 1d       	adc	r22, r1
    24fc:	23 1f       	adc	r18, r19
    24fe:	84 9f       	mul	r24, r20
    2500:	60 0d       	add	r22, r0
    2502:	21 1d       	adc	r18, r1
    2504:	82 2f       	mov	r24, r18
    2506:	76 2f       	mov	r23, r22
    2508:	6a 2f       	mov	r22, r26
    250a:	11 24       	eor	r1, r1
    250c:	9f 57       	subi	r25, 0x7F	; 127
    250e:	50 40       	sbci	r21, 0x00	; 0
    2510:	8a f0       	brmi	.+34     	; 0x2534 <__mulsf3_pse+0x84>
    2512:	e1 f0       	breq	.+56     	; 0x254c <__mulsf3_pse+0x9c>
    2514:	88 23       	and	r24, r24
    2516:	4a f0       	brmi	.+18     	; 0x252a <__mulsf3_pse+0x7a>
    2518:	ee 0f       	add	r30, r30
    251a:	ff 1f       	adc	r31, r31
    251c:	bb 1f       	adc	r27, r27
    251e:	66 1f       	adc	r22, r22
    2520:	77 1f       	adc	r23, r23
    2522:	88 1f       	adc	r24, r24
    2524:	91 50       	subi	r25, 0x01	; 1
    2526:	50 40       	sbci	r21, 0x00	; 0
    2528:	a9 f7       	brne	.-22     	; 0x2514 <__mulsf3_pse+0x64>
    252a:	9e 3f       	cpi	r25, 0xFE	; 254
    252c:	51 05       	cpc	r21, r1
    252e:	70 f0       	brcs	.+28     	; 0x254c <__mulsf3_pse+0x9c>
    2530:	5c cf       	rjmp	.-328    	; 0x23ea <__fp_inf>
    2532:	a6 cf       	rjmp	.-180    	; 0x2480 <__fp_szero>
    2534:	5f 3f       	cpi	r21, 0xFF	; 255
    2536:	ec f3       	brlt	.-6      	; 0x2532 <__mulsf3_pse+0x82>
    2538:	98 3e       	cpi	r25, 0xE8	; 232
    253a:	dc f3       	brlt	.-10     	; 0x2532 <__mulsf3_pse+0x82>
    253c:	86 95       	lsr	r24
    253e:	77 95       	ror	r23
    2540:	67 95       	ror	r22
    2542:	b7 95       	ror	r27
    2544:	f7 95       	ror	r31
    2546:	e7 95       	ror	r30
    2548:	9f 5f       	subi	r25, 0xFF	; 255
    254a:	c1 f7       	brne	.-16     	; 0x253c <__mulsf3_pse+0x8c>
    254c:	fe 2b       	or	r31, r30
    254e:	88 0f       	add	r24, r24
    2550:	91 1d       	adc	r25, r1
    2552:	96 95       	lsr	r25
    2554:	87 95       	ror	r24
    2556:	97 f9       	bld	r25, 7
    2558:	08 95       	ret

0000255a <pow>:
    255a:	fa 01       	movw	r30, r20
    255c:	ee 0f       	add	r30, r30
    255e:	ff 1f       	adc	r31, r31
    2560:	30 96       	adiw	r30, 0x00	; 0
    2562:	21 05       	cpc	r18, r1
    2564:	31 05       	cpc	r19, r1
    2566:	99 f1       	breq	.+102    	; 0x25ce <pow+0x74>
    2568:	61 15       	cp	r22, r1
    256a:	71 05       	cpc	r23, r1
    256c:	61 f4       	brne	.+24     	; 0x2586 <pow+0x2c>
    256e:	80 38       	cpi	r24, 0x80	; 128
    2570:	bf e3       	ldi	r27, 0x3F	; 63
    2572:	9b 07       	cpc	r25, r27
    2574:	49 f1       	breq	.+82     	; 0x25c8 <pow+0x6e>
    2576:	68 94       	set
    2578:	90 38       	cpi	r25, 0x80	; 128
    257a:	81 05       	cpc	r24, r1
    257c:	61 f0       	breq	.+24     	; 0x2596 <pow+0x3c>
    257e:	80 38       	cpi	r24, 0x80	; 128
    2580:	bf ef       	ldi	r27, 0xFF	; 255
    2582:	9b 07       	cpc	r25, r27
    2584:	41 f0       	breq	.+16     	; 0x2596 <pow+0x3c>
    2586:	99 23       	and	r25, r25
    2588:	42 f5       	brpl	.+80     	; 0x25da <pow+0x80>
    258a:	ff 3f       	cpi	r31, 0xFF	; 255
    258c:	e1 05       	cpc	r30, r1
    258e:	31 05       	cpc	r19, r1
    2590:	21 05       	cpc	r18, r1
    2592:	11 f1       	breq	.+68     	; 0x25d8 <pow+0x7e>
    2594:	e8 94       	clt
    2596:	08 94       	sec
    2598:	e7 95       	ror	r30
    259a:	d9 01       	movw	r26, r18
    259c:	aa 23       	and	r26, r26
    259e:	29 f4       	brne	.+10     	; 0x25aa <pow+0x50>
    25a0:	ab 2f       	mov	r26, r27
    25a2:	be 2f       	mov	r27, r30
    25a4:	f8 5f       	subi	r31, 0xF8	; 248
    25a6:	d0 f3       	brcs	.-12     	; 0x259c <pow+0x42>
    25a8:	10 c0       	rjmp	.+32     	; 0x25ca <pow+0x70>
    25aa:	ff 5f       	subi	r31, 0xFF	; 255
    25ac:	70 f4       	brcc	.+28     	; 0x25ca <pow+0x70>
    25ae:	a6 95       	lsr	r26
    25b0:	e0 f7       	brcc	.-8      	; 0x25aa <pow+0x50>
    25b2:	f7 39       	cpi	r31, 0x97	; 151
    25b4:	50 f0       	brcs	.+20     	; 0x25ca <pow+0x70>
    25b6:	19 f0       	breq	.+6      	; 0x25be <pow+0x64>
    25b8:	ff 3a       	cpi	r31, 0xAF	; 175
    25ba:	38 f4       	brcc	.+14     	; 0x25ca <pow+0x70>
    25bc:	9f 77       	andi	r25, 0x7F	; 127
    25be:	9f 93       	push	r25
    25c0:	0c d0       	rcall	.+24     	; 0x25da <pow+0x80>
    25c2:	0f 90       	pop	r0
    25c4:	07 fc       	sbrc	r0, 7
    25c6:	90 58       	subi	r25, 0x80	; 128
    25c8:	08 95       	ret
    25ca:	3e f0       	brts	.+14     	; 0x25da <pow+0x80>
    25cc:	14 cf       	rjmp	.-472    	; 0x23f6 <__fp_nan>
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	70 e0       	ldi	r23, 0x00	; 0
    25d2:	80 e8       	ldi	r24, 0x80	; 128
    25d4:	9f e3       	ldi	r25, 0x3F	; 63
    25d6:	08 95       	ret
    25d8:	4f e7       	ldi	r20, 0x7F	; 127
    25da:	9f 77       	andi	r25, 0x7F	; 127
    25dc:	5f 93       	push	r21
    25de:	4f 93       	push	r20
    25e0:	3f 93       	push	r19
    25e2:	2f 93       	push	r18
    25e4:	9e d0       	rcall	.+316    	; 0x2722 <log>
    25e6:	2f 91       	pop	r18
    25e8:	3f 91       	pop	r19
    25ea:	4f 91       	pop	r20
    25ec:	5f 91       	pop	r21
    25ee:	52 df       	rcall	.-348    	; 0x2494 <__mulsf3>
    25f0:	05 c0       	rjmp	.+10     	; 0x25fc <exp>
    25f2:	19 f4       	brne	.+6      	; 0x25fa <pow+0xa0>
    25f4:	0e f0       	brts	.+2      	; 0x25f8 <pow+0x9e>
    25f6:	f9 ce       	rjmp	.-526    	; 0x23ea <__fp_inf>
    25f8:	42 cf       	rjmp	.-380    	; 0x247e <__fp_zero>
    25fa:	fd ce       	rjmp	.-518    	; 0x23f6 <__fp_nan>

000025fc <exp>:
    25fc:	26 df       	rcall	.-436    	; 0x244a <__fp_splitA>
    25fe:	c8 f3       	brcs	.-14     	; 0x25f2 <pow+0x98>
    2600:	96 38       	cpi	r25, 0x86	; 134
    2602:	c0 f7       	brcc	.-16     	; 0x25f4 <pow+0x9a>
    2604:	07 f8       	bld	r0, 7
    2606:	0f 92       	push	r0
    2608:	e8 94       	clt
    260a:	2b e3       	ldi	r18, 0x3B	; 59
    260c:	3a ea       	ldi	r19, 0xAA	; 170
    260e:	48 eb       	ldi	r20, 0xB8	; 184
    2610:	5f e7       	ldi	r21, 0x7F	; 127
    2612:	4e df       	rcall	.-356    	; 0x24b0 <__mulsf3_pse>
    2614:	0f 92       	push	r0
    2616:	0f 92       	push	r0
    2618:	0f 92       	push	r0
    261a:	4d b7       	in	r20, 0x3d	; 61
    261c:	5e b7       	in	r21, 0x3e	; 62
    261e:	0f 92       	push	r0
    2620:	c0 d0       	rcall	.+384    	; 0x27a2 <modf>
    2622:	ec e8       	ldi	r30, 0x8C	; 140
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	16 d0       	rcall	.+44     	; 0x2654 <__fp_powser>
    2628:	4f 91       	pop	r20
    262a:	5f 91       	pop	r21
    262c:	ef 91       	pop	r30
    262e:	ff 91       	pop	r31
    2630:	e5 95       	asr	r30
    2632:	ee 1f       	adc	r30, r30
    2634:	ff 1f       	adc	r31, r31
    2636:	49 f0       	breq	.+18     	; 0x264a <exp+0x4e>
    2638:	fe 57       	subi	r31, 0x7E	; 126
    263a:	e0 68       	ori	r30, 0x80	; 128
    263c:	44 27       	eor	r20, r20
    263e:	ee 0f       	add	r30, r30
    2640:	44 1f       	adc	r20, r20
    2642:	fa 95       	dec	r31
    2644:	e1 f7       	brne	.-8      	; 0x263e <exp+0x42>
    2646:	41 95       	neg	r20
    2648:	55 0b       	sbc	r21, r21
    264a:	32 d0       	rcall	.+100    	; 0x26b0 <ldexp>
    264c:	0f 90       	pop	r0
    264e:	07 fe       	sbrs	r0, 7
    2650:	26 c0       	rjmp	.+76     	; 0x269e <inverse>
    2652:	08 95       	ret

00002654 <__fp_powser>:
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	1f 93       	push	r17
    265a:	0f 93       	push	r16
    265c:	ff 92       	push	r15
    265e:	ef 92       	push	r14
    2660:	df 92       	push	r13
    2662:	7b 01       	movw	r14, r22
    2664:	8c 01       	movw	r16, r24
    2666:	68 94       	set
    2668:	05 c0       	rjmp	.+10     	; 0x2674 <__fp_powser+0x20>
    266a:	da 2e       	mov	r13, r26
    266c:	ef 01       	movw	r28, r30
    266e:	1e df       	rcall	.-452    	; 0x24ac <__mulsf3x>
    2670:	fe 01       	movw	r30, r28
    2672:	e8 94       	clt
    2674:	a5 91       	lpm	r26, Z+
    2676:	25 91       	lpm	r18, Z+
    2678:	35 91       	lpm	r19, Z+
    267a:	45 91       	lpm	r20, Z+
    267c:	55 91       	lpm	r21, Z+
    267e:	ae f3       	brts	.-22     	; 0x266a <__fp_powser+0x16>
    2680:	ef 01       	movw	r28, r30
    2682:	d4 d0       	rcall	.+424    	; 0x282c <__addsf3x>
    2684:	fe 01       	movw	r30, r28
    2686:	97 01       	movw	r18, r14
    2688:	a8 01       	movw	r20, r16
    268a:	da 94       	dec	r13
    268c:	79 f7       	brne	.-34     	; 0x266c <__fp_powser+0x18>
    268e:	df 90       	pop	r13
    2690:	ef 90       	pop	r14
    2692:	ff 90       	pop	r15
    2694:	0f 91       	pop	r16
    2696:	1f 91       	pop	r17
    2698:	cf 91       	pop	r28
    269a:	df 91       	pop	r29
    269c:	08 95       	ret

0000269e <inverse>:
    269e:	9b 01       	movw	r18, r22
    26a0:	ac 01       	movw	r20, r24
    26a2:	60 e0       	ldi	r22, 0x00	; 0
    26a4:	70 e0       	ldi	r23, 0x00	; 0
    26a6:	80 e8       	ldi	r24, 0x80	; 128
    26a8:	9f e3       	ldi	r25, 0x3F	; 63
    26aa:	aa cd       	rjmp	.-1196   	; 0x2200 <__divsf3>
    26ac:	9e ce       	rjmp	.-708    	; 0x23ea <__fp_inf>
    26ae:	11 c1       	rjmp	.+546    	; 0x28d2 <__fp_mpack>

000026b0 <ldexp>:
    26b0:	cc de       	rcall	.-616    	; 0x244a <__fp_splitA>
    26b2:	e8 f3       	brcs	.-6      	; 0x26ae <inverse+0x10>
    26b4:	99 23       	and	r25, r25
    26b6:	d9 f3       	breq	.-10     	; 0x26ae <inverse+0x10>
    26b8:	94 0f       	add	r25, r20
    26ba:	51 1d       	adc	r21, r1
    26bc:	bb f3       	brvs	.-18     	; 0x26ac <inverse+0xe>
    26be:	91 50       	subi	r25, 0x01	; 1
    26c0:	50 40       	sbci	r21, 0x00	; 0
    26c2:	94 f0       	brlt	.+36     	; 0x26e8 <ldexp+0x38>
    26c4:	59 f0       	breq	.+22     	; 0x26dc <ldexp+0x2c>
    26c6:	88 23       	and	r24, r24
    26c8:	32 f0       	brmi	.+12     	; 0x26d6 <ldexp+0x26>
    26ca:	66 0f       	add	r22, r22
    26cc:	77 1f       	adc	r23, r23
    26ce:	88 1f       	adc	r24, r24
    26d0:	91 50       	subi	r25, 0x01	; 1
    26d2:	50 40       	sbci	r21, 0x00	; 0
    26d4:	c1 f7       	brne	.-16     	; 0x26c6 <ldexp+0x16>
    26d6:	9e 3f       	cpi	r25, 0xFE	; 254
    26d8:	51 05       	cpc	r21, r1
    26da:	44 f7       	brge	.-48     	; 0x26ac <inverse+0xe>
    26dc:	88 0f       	add	r24, r24
    26de:	91 1d       	adc	r25, r1
    26e0:	96 95       	lsr	r25
    26e2:	87 95       	ror	r24
    26e4:	97 f9       	bld	r25, 7
    26e6:	08 95       	ret
    26e8:	5f 3f       	cpi	r21, 0xFF	; 255
    26ea:	ac f0       	brlt	.+42     	; 0x2716 <ldexp+0x66>
    26ec:	98 3e       	cpi	r25, 0xE8	; 232
    26ee:	9c f0       	brlt	.+38     	; 0x2716 <ldexp+0x66>
    26f0:	bb 27       	eor	r27, r27
    26f2:	86 95       	lsr	r24
    26f4:	77 95       	ror	r23
    26f6:	67 95       	ror	r22
    26f8:	b7 95       	ror	r27
    26fa:	08 f4       	brcc	.+2      	; 0x26fe <ldexp+0x4e>
    26fc:	b1 60       	ori	r27, 0x01	; 1
    26fe:	93 95       	inc	r25
    2700:	c1 f7       	brne	.-16     	; 0x26f2 <ldexp+0x42>
    2702:	bb 0f       	add	r27, r27
    2704:	58 f7       	brcc	.-42     	; 0x26dc <ldexp+0x2c>
    2706:	11 f4       	brne	.+4      	; 0x270c <ldexp+0x5c>
    2708:	60 ff       	sbrs	r22, 0
    270a:	e8 cf       	rjmp	.-48     	; 0x26dc <ldexp+0x2c>
    270c:	6f 5f       	subi	r22, 0xFF	; 255
    270e:	7f 4f       	sbci	r23, 0xFF	; 255
    2710:	8f 4f       	sbci	r24, 0xFF	; 255
    2712:	9f 4f       	sbci	r25, 0xFF	; 255
    2714:	e3 cf       	rjmp	.-58     	; 0x26dc <ldexp+0x2c>
    2716:	b4 ce       	rjmp	.-664    	; 0x2480 <__fp_szero>
    2718:	0e f0       	brts	.+2      	; 0x271c <ldexp+0x6c>
    271a:	db c0       	rjmp	.+438    	; 0x28d2 <__fp_mpack>
    271c:	6c ce       	rjmp	.-808    	; 0x23f6 <__fp_nan>
    271e:	68 94       	set
    2720:	64 ce       	rjmp	.-824    	; 0x23ea <__fp_inf>

00002722 <log>:
    2722:	93 de       	rcall	.-730    	; 0x244a <__fp_splitA>
    2724:	c8 f3       	brcs	.-14     	; 0x2718 <ldexp+0x68>
    2726:	99 23       	and	r25, r25
    2728:	d1 f3       	breq	.-12     	; 0x271e <ldexp+0x6e>
    272a:	c6 f3       	brts	.-16     	; 0x271c <ldexp+0x6c>
    272c:	df 93       	push	r29
    272e:	cf 93       	push	r28
    2730:	1f 93       	push	r17
    2732:	0f 93       	push	r16
    2734:	ff 92       	push	r15
    2736:	c9 2f       	mov	r28, r25
    2738:	dd 27       	eor	r29, r29
    273a:	88 23       	and	r24, r24
    273c:	2a f0       	brmi	.+10     	; 0x2748 <log+0x26>
    273e:	21 97       	sbiw	r28, 0x01	; 1
    2740:	66 0f       	add	r22, r22
    2742:	77 1f       	adc	r23, r23
    2744:	88 1f       	adc	r24, r24
    2746:	da f7       	brpl	.-10     	; 0x273e <log+0x1c>
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f eb       	ldi	r21, 0xBF	; 191
    2750:	9f e3       	ldi	r25, 0x3F	; 63
    2752:	88 39       	cpi	r24, 0x98	; 152
    2754:	20 f0       	brcs	.+8      	; 0x275e <log+0x3c>
    2756:	80 3e       	cpi	r24, 0xE0	; 224
    2758:	30 f0       	brcs	.+12     	; 0x2766 <log+0x44>
    275a:	21 96       	adiw	r28, 0x01	; 1
    275c:	8f 77       	andi	r24, 0x7F	; 127
    275e:	55 d0       	rcall	.+170    	; 0x280a <__addsf3>
    2760:	e4 eb       	ldi	r30, 0xB4	; 180
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	03 c0       	rjmp	.+6      	; 0x276c <log+0x4a>
    2766:	51 d0       	rcall	.+162    	; 0x280a <__addsf3>
    2768:	e1 ee       	ldi	r30, 0xE1	; 225
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	73 df       	rcall	.-282    	; 0x2654 <__fp_powser>
    276e:	8b 01       	movw	r16, r22
    2770:	be 01       	movw	r22, r28
    2772:	ec 01       	movw	r28, r24
    2774:	fb 2e       	mov	r15, r27
    2776:	6f 57       	subi	r22, 0x7F	; 127
    2778:	71 09       	sbc	r23, r1
    277a:	75 95       	asr	r23
    277c:	77 1f       	adc	r23, r23
    277e:	88 0b       	sbc	r24, r24
    2780:	99 0b       	sbc	r25, r25
    2782:	d4 dd       	rcall	.-1112   	; 0x232c <__floatsisf>
    2784:	28 e1       	ldi	r18, 0x18	; 24
    2786:	32 e7       	ldi	r19, 0x72	; 114
    2788:	41 e3       	ldi	r20, 0x31	; 49
    278a:	5f e3       	ldi	r21, 0x3F	; 63
    278c:	8f de       	rcall	.-738    	; 0x24ac <__mulsf3x>
    278e:	af 2d       	mov	r26, r15
    2790:	98 01       	movw	r18, r16
    2792:	ae 01       	movw	r20, r28
    2794:	ff 90       	pop	r15
    2796:	0f 91       	pop	r16
    2798:	1f 91       	pop	r17
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	46 d0       	rcall	.+140    	; 0x282c <__addsf3x>
    27a0:	3b ce       	rjmp	.-906    	; 0x2418 <__fp_round>

000027a2 <modf>:
    27a2:	fa 01       	movw	r30, r20
    27a4:	dc 01       	movw	r26, r24
    27a6:	aa 0f       	add	r26, r26
    27a8:	bb 1f       	adc	r27, r27
    27aa:	9b 01       	movw	r18, r22
    27ac:	ac 01       	movw	r20, r24
    27ae:	bf 57       	subi	r27, 0x7F	; 127
    27b0:	28 f4       	brcc	.+10     	; 0x27bc <modf+0x1a>
    27b2:	22 27       	eor	r18, r18
    27b4:	33 27       	eor	r19, r19
    27b6:	44 27       	eor	r20, r20
    27b8:	50 78       	andi	r21, 0x80	; 128
    27ba:	1f c0       	rjmp	.+62     	; 0x27fa <modf+0x58>
    27bc:	b7 51       	subi	r27, 0x17	; 23
    27be:	88 f4       	brcc	.+34     	; 0x27e2 <modf+0x40>
    27c0:	ab 2f       	mov	r26, r27
    27c2:	00 24       	eor	r0, r0
    27c4:	46 95       	lsr	r20
    27c6:	37 95       	ror	r19
    27c8:	27 95       	ror	r18
    27ca:	01 1c       	adc	r0, r1
    27cc:	a3 95       	inc	r26
    27ce:	d2 f3       	brmi	.-12     	; 0x27c4 <modf+0x22>
    27d0:	00 20       	and	r0, r0
    27d2:	69 f0       	breq	.+26     	; 0x27ee <modf+0x4c>
    27d4:	22 0f       	add	r18, r18
    27d6:	33 1f       	adc	r19, r19
    27d8:	44 1f       	adc	r20, r20
    27da:	b3 95       	inc	r27
    27dc:	da f3       	brmi	.-10     	; 0x27d4 <modf+0x32>
    27de:	0d d0       	rcall	.+26     	; 0x27fa <modf+0x58>
    27e0:	13 c0       	rjmp	.+38     	; 0x2808 <__subsf3>
    27e2:	61 30       	cpi	r22, 0x01	; 1
    27e4:	71 05       	cpc	r23, r1
    27e6:	a0 e8       	ldi	r26, 0x80	; 128
    27e8:	8a 07       	cpc	r24, r26
    27ea:	b9 46       	sbci	r27, 0x69	; 105
    27ec:	30 f4       	brcc	.+12     	; 0x27fa <modf+0x58>
    27ee:	9b 01       	movw	r18, r22
    27f0:	ac 01       	movw	r20, r24
    27f2:	66 27       	eor	r22, r22
    27f4:	77 27       	eor	r23, r23
    27f6:	88 27       	eor	r24, r24
    27f8:	90 78       	andi	r25, 0x80	; 128
    27fa:	30 96       	adiw	r30, 0x00	; 0
    27fc:	21 f0       	breq	.+8      	; 0x2806 <modf+0x64>
    27fe:	20 83       	st	Z, r18
    2800:	31 83       	std	Z+1, r19	; 0x01
    2802:	42 83       	std	Z+2, r20	; 0x02
    2804:	53 83       	std	Z+3, r21	; 0x03
    2806:	08 95       	ret

00002808 <__subsf3>:
    2808:	50 58       	subi	r21, 0x80	; 128

0000280a <__addsf3>:
    280a:	bb 27       	eor	r27, r27
    280c:	aa 27       	eor	r26, r26
    280e:	0e d0       	rcall	.+28     	; 0x282c <__addsf3x>
    2810:	03 ce       	rjmp	.-1018   	; 0x2418 <__fp_round>
    2812:	f4 dd       	rcall	.-1048   	; 0x23fc <__fp_pscA>
    2814:	30 f0       	brcs	.+12     	; 0x2822 <__addsf3+0x18>
    2816:	f9 dd       	rcall	.-1038   	; 0x240a <__fp_pscB>
    2818:	20 f0       	brcs	.+8      	; 0x2822 <__addsf3+0x18>
    281a:	31 f4       	brne	.+12     	; 0x2828 <__addsf3+0x1e>
    281c:	9f 3f       	cpi	r25, 0xFF	; 255
    281e:	11 f4       	brne	.+4      	; 0x2824 <__addsf3+0x1a>
    2820:	1e f4       	brtc	.+6      	; 0x2828 <__addsf3+0x1e>
    2822:	e9 cd       	rjmp	.-1070   	; 0x23f6 <__fp_nan>
    2824:	0e f4       	brtc	.+2      	; 0x2828 <__addsf3+0x1e>
    2826:	e0 95       	com	r30
    2828:	e7 fb       	bst	r30, 7
    282a:	df cd       	rjmp	.-1090   	; 0x23ea <__fp_inf>

0000282c <__addsf3x>:
    282c:	e9 2f       	mov	r30, r25
    282e:	05 de       	rcall	.-1014   	; 0x243a <__fp_split3>
    2830:	80 f3       	brcs	.-32     	; 0x2812 <__addsf3+0x8>
    2832:	ba 17       	cp	r27, r26
    2834:	62 07       	cpc	r22, r18
    2836:	73 07       	cpc	r23, r19
    2838:	84 07       	cpc	r24, r20
    283a:	95 07       	cpc	r25, r21
    283c:	18 f0       	brcs	.+6      	; 0x2844 <__addsf3x+0x18>
    283e:	71 f4       	brne	.+28     	; 0x285c <__addsf3x+0x30>
    2840:	9e f5       	brtc	.+102    	; 0x28a8 <__addsf3x+0x7c>
    2842:	1d ce       	rjmp	.-966    	; 0x247e <__fp_zero>
    2844:	0e f4       	brtc	.+2      	; 0x2848 <__addsf3x+0x1c>
    2846:	e0 95       	com	r30
    2848:	0b 2e       	mov	r0, r27
    284a:	ba 2f       	mov	r27, r26
    284c:	a0 2d       	mov	r26, r0
    284e:	0b 01       	movw	r0, r22
    2850:	b9 01       	movw	r22, r18
    2852:	90 01       	movw	r18, r0
    2854:	0c 01       	movw	r0, r24
    2856:	ca 01       	movw	r24, r20
    2858:	a0 01       	movw	r20, r0
    285a:	11 24       	eor	r1, r1
    285c:	ff 27       	eor	r31, r31
    285e:	59 1b       	sub	r21, r25
    2860:	99 f0       	breq	.+38     	; 0x2888 <__addsf3x+0x5c>
    2862:	59 3f       	cpi	r21, 0xF9	; 249
    2864:	50 f4       	brcc	.+20     	; 0x287a <__addsf3x+0x4e>
    2866:	50 3e       	cpi	r21, 0xE0	; 224
    2868:	68 f1       	brcs	.+90     	; 0x28c4 <__addsf3x+0x98>
    286a:	1a 16       	cp	r1, r26
    286c:	f0 40       	sbci	r31, 0x00	; 0
    286e:	a2 2f       	mov	r26, r18
    2870:	23 2f       	mov	r18, r19
    2872:	34 2f       	mov	r19, r20
    2874:	44 27       	eor	r20, r20
    2876:	58 5f       	subi	r21, 0xF8	; 248
    2878:	f3 cf       	rjmp	.-26     	; 0x2860 <__addsf3x+0x34>
    287a:	46 95       	lsr	r20
    287c:	37 95       	ror	r19
    287e:	27 95       	ror	r18
    2880:	a7 95       	ror	r26
    2882:	f0 40       	sbci	r31, 0x00	; 0
    2884:	53 95       	inc	r21
    2886:	c9 f7       	brne	.-14     	; 0x287a <__addsf3x+0x4e>
    2888:	7e f4       	brtc	.+30     	; 0x28a8 <__addsf3x+0x7c>
    288a:	1f 16       	cp	r1, r31
    288c:	ba 0b       	sbc	r27, r26
    288e:	62 0b       	sbc	r22, r18
    2890:	73 0b       	sbc	r23, r19
    2892:	84 0b       	sbc	r24, r20
    2894:	ba f0       	brmi	.+46     	; 0x28c4 <__addsf3x+0x98>
    2896:	91 50       	subi	r25, 0x01	; 1
    2898:	a1 f0       	breq	.+40     	; 0x28c2 <__addsf3x+0x96>
    289a:	ff 0f       	add	r31, r31
    289c:	bb 1f       	adc	r27, r27
    289e:	66 1f       	adc	r22, r22
    28a0:	77 1f       	adc	r23, r23
    28a2:	88 1f       	adc	r24, r24
    28a4:	c2 f7       	brpl	.-16     	; 0x2896 <__addsf3x+0x6a>
    28a6:	0e c0       	rjmp	.+28     	; 0x28c4 <__addsf3x+0x98>
    28a8:	ba 0f       	add	r27, r26
    28aa:	62 1f       	adc	r22, r18
    28ac:	73 1f       	adc	r23, r19
    28ae:	84 1f       	adc	r24, r20
    28b0:	48 f4       	brcc	.+18     	; 0x28c4 <__addsf3x+0x98>
    28b2:	87 95       	ror	r24
    28b4:	77 95       	ror	r23
    28b6:	67 95       	ror	r22
    28b8:	b7 95       	ror	r27
    28ba:	f7 95       	ror	r31
    28bc:	9e 3f       	cpi	r25, 0xFE	; 254
    28be:	08 f0       	brcs	.+2      	; 0x28c2 <__addsf3x+0x96>
    28c0:	b3 cf       	rjmp	.-154    	; 0x2828 <__addsf3+0x1e>
    28c2:	93 95       	inc	r25
    28c4:	88 0f       	add	r24, r24
    28c6:	08 f0       	brcs	.+2      	; 0x28ca <__addsf3x+0x9e>
    28c8:	99 27       	eor	r25, r25
    28ca:	ee 0f       	add	r30, r30
    28cc:	97 95       	ror	r25
    28ce:	87 95       	ror	r24
    28d0:	08 95       	ret

000028d2 <__fp_mpack>:
    28d2:	9f 3f       	cpi	r25, 0xFF	; 255
    28d4:	31 f0       	breq	.+12     	; 0x28e2 <__fp_mpack_finite+0xc>

000028d6 <__fp_mpack_finite>:
    28d6:	91 50       	subi	r25, 0x01	; 1
    28d8:	20 f4       	brcc	.+8      	; 0x28e2 <__fp_mpack_finite+0xc>
    28da:	87 95       	ror	r24
    28dc:	77 95       	ror	r23
    28de:	67 95       	ror	r22
    28e0:	b7 95       	ror	r27
    28e2:	88 0f       	add	r24, r24
    28e4:	91 1d       	adc	r25, r1
    28e6:	96 95       	lsr	r25
    28e8:	87 95       	ror	r24
    28ea:	97 f9       	bld	r25, 7
    28ec:	08 95       	ret

000028ee <strlen>:
    28ee:	fc 01       	movw	r30, r24
    28f0:	01 90       	ld	r0, Z+
    28f2:	00 20       	and	r0, r0
    28f4:	e9 f7       	brne	.-6      	; 0x28f0 <strlen+0x2>
    28f6:	80 95       	com	r24
    28f8:	90 95       	com	r25
    28fa:	8e 0f       	add	r24, r30
    28fc:	9f 1f       	adc	r25, r31
    28fe:	08 95       	ret

00002900 <_exit>:
    2900:	f8 94       	cli

00002902 <__stop_program>:
    2902:	ff cf       	rjmp	.-2      	; 0x2902 <__stop_program>
